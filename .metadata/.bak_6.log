!SESSION 2021-07-16 12:03:15.179 -----------------------------------------------
eclipse.buildId=4.7.3.M20180330-0640
java.version=1.8.0_282
java.vendor=AdoptOpenJDK
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\gitrepo\mratdd\.metadata\.bak_5.log
Created Time: 2021-07-16 16:53:30.509

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:30.511
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.512
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.512
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:30.514
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.514
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:53:30.517
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:30.519
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.520
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.520
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:30.522
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:30.522
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:53:32.032
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:32.035
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:32.035
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:32.035
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:32.037
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:32.037
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:32.379
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:32.381
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:53:34.551
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
		private WebElement FirstRecommendationSectionTag;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
		private WebElement FirstRecommendationSectionPlanName;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:34.554
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:34.554
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:34.554
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:34.556
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:34.556
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:34.570
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:34.572
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:34.847
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:34.849
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:36.367
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:36.369
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:36.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:36.491
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:41.093
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:41.095
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:46.097
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:46.099
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:48.291
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:48.293
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:48.395
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:48.397
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:50.474
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:50.476
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:51.170
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:51.173
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:51.655
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:51.657
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:51.833
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:51.835
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:52.618
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:52.620
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:54.322
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:54.324
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:55.626
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:55.628
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:53:56.594
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:56.597
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:56.598
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:56.598
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:56.600
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:56.600
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:56.613
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:56.615
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:53:58.619
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:58.622
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:58.623
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:58.623
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:58.625
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:53:58.625
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:53:58.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:53:58.684
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:00.660
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:00.666
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:00.666
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:00.666
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:00.670
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:00.670
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:01.162
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:01.164
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:01.583
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:01.587
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:01.587
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:01.587
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:01.590
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:01.590
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:03.566
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package acceptancetests.acquisition.planRecommendationEngine;

import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.JSONException;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;

import acceptancetests.acquisition.vpp.VPPCommonConstants;
import acceptancetests.data.CommonConstants;
import acceptancetests.data.PageConstants;
import atdd.framework.Assertion;
import atdd.framework.DataTableParser;
import atdd.framework.MRScenario;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.PlanSelectorNewPage;
import pages.acquisition.planRecommendationEngine.ACQDrugCostEstimatorPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineAdditionalServicesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCommonutility;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCostPreferencesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCoverageOptionPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineEditResponsePage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineHeaderAndFooter;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineLandingAndZipcodePages;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineNewResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePharmacyPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePrioritiesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineSpecialNeedsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineTravelPage;

public class PlanRecommendationEngineStepDefinition {

	@Autowired
	
	MRScenario loginScenario;

	public MRScenario getLoginScenario() {
		return loginScenario;
	}
//	WebDriver wd;
//	List<DataTableRow> inputRow;
	HashMap<String, String> inputValues;
	public String PREflow="";
	
	public void readfeaturedata(DataTable data) {
		inputValues = new HashMap<String, String>();
		inputValues = DataTableParser.readDataTableAsMaps(data);
		String temp = inputValues.get("Plan Type");
		if (temp != null && PREflow != temp) {
			PREflow = temp;
			//System.out.println("\n\n\n\n\n\n");
			String curID = String.valueOf(Thread.currentThread().getId());
			System.out.println("Current Thread ID is - "+curID+" for the flow "+PREflow);
			//CommonConstants.PRE_FLOW = new LinkedHashMap<String,String>();
			CommonConstants.PRE_FLOW.put(curID, PREflow);
		}
	}
	
	boolean if_offline_prod = false, popup_clicked = false;
	@Given("^the user is on UHC medicare acquisition site PRE landing page$")
	public void the_user_on_uhc_medicaresolutions_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE"); //changed on 3/3/21 as part of AARP/UHC cleanup
		if_offline_prod = aquisitionhomepage.openPRE(inputValues.get("Site"));
//		aquisitionhomepage.fixPrivateConnection();
		
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
		@And("^clicks on get started button and runs questionnaire$")
	public void clicks_on_get_started_button_and_directly_skip_to_results(DataTable givenAttributes) throws Throwable {
			readfeaturedata(givenAttributes);
			String zipcode = inputValues.get("Zip Code");
			System.out.println("Zipcode is:"+zipcode);
			String county = inputValues.get("CountyDropDown");
			System.out.println("Email is:"+county);
			String isMultiCounty = inputValues.get("Is Multi County");
			System.out.println("Entered Search Key is:"+isMultiCounty);
			checkpopup();
			
			getLoginScenario().saveBean(VPPCommonConstants.ZIPCODE, zipcode);
			getLoginScenario().saveBean(VPPCommonConstants.COUNTY, county);
			getLoginScenario().saveBean(VPPCommonConstants.IS_MULTICOUNTY, isMultiCounty);
			
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.quizStartAndRunQuestionnaire(zipcode);
		} else {
			planSelectorhomepage.quizStartAndRunQuestionnaireWithCounty(zipcode, county);
		}
	}
	
	@When("^user navigate to Plan Recommendation Engine and Checking Breadcrumbs$")
	public void user_navigate_PRE_Breadcrumbs() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}
	
	@Then("^user validate elements on landing page of Plan Recommendation Engine$")
	public void user_check_landing_page_Plan_Selector_tool() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}

	
	@When("^user navigate Plan Recommendation Engine Using Shop From Home in Find Your Plan$")
	public void navigate_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaShopTools();
//		headerAndFooter.breadCrumbs();
}
	
	@When("^user navigate Plan Recommendation Engine Using Get Started From Medicare Articles$")
	public void navigate_PRE_tool_MedicareArticles() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareArticles();
}
	
	@When("^user navigate to Medicare Education and validate Plan Recommendation Engine Widget$")
	public void navigate_MedicareEducation() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareEducation();
}
	
	@Then("^user validate Header elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.headerElements();
		headerAndFooter.headerLinkvalidation();
	}
	@Then("^user validate Footer elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_footer_Plan_Selector_tool() throws Exception {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.footerElements();
		headerAndFooter.footerLinkvalidation();
	}
	@Then("^user validate Header and Footer Functionality of Plan Recommendation Engine$")
	public void user_check_header_footer_Actions_Plan_Selector_tool(DataTable givenAttributes) throws Throwable{
		WebDriver wd = (WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER);
		String actualpageurl = wd.getCurrentUrl();
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		System.out.println("Zipcode is:"+zipcode);
		String email = inputValues.get("EMail");
		System.out.println("Email is:"+email);
		String searchKey = inputValues.get("Search Key");
		System.out.println("Entered Search Key is:"+searchKey);
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.zipcodeFunctionInShopforaplan(zipcode);
		Thread.sleep(5000);
		headerAndFooter.emailFunctionInShopforaplan(email);
		Thread.sleep(5000);
		if(actualpageurl.contains("uhcmedicaresolutions")){
			headerAndFooter.enterSearchFunction(searchKey);
			Thread.sleep(5000);	
		}
	}
	
	@And("^clicks on get started button and check error scenarios$")
	public void clicks_on_get_started_button_and_check_error_scenarios(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		String county = inputValues.get("CountyDropDown");
		String isMultiCounty = inputValues.get("Is Multi County");
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.getStartedAndRunInvalidzipcode(zipcode);
		} else {
			planSelectorhomepage.getStartedAndRunzipcodeWithCounty(zipcode, county);
		}
			
	}
	
	@And("^user validate elements in coverage options page$")
	public void elements_coverage_page() {
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		planSelectorCoverageepage.coverageOptionpage();
		
	}
	
	@And("^user selects plan type in coverage options page$")
	public void select_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (!(plantype.isEmpty())) {
			planSelectorCoverageepage.coverageOptionpageFunctional(plantype);
		}
	}
	
	@And("^user not selects plan type in coverage options page$")
	public void notselect_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (plantype.isEmpty()) {
			planSelectorCoverageepage.coverageOptionpageerror();
		}
	}
	
	@And("^user select planType and continous the page back to previous page$")
	public void previous_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpageFunctional(inputValues.get("Plan Type"));
	}
	
	@And("^user select planType and Click previous button to check previous page$")
	public void previous_zipcode_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpagePreviousButton(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate elements in Special Needs page$")
	public void elements_special_page() {
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorSpecialneedspage.specialNeedspage();
	}
	
	@And("^user selects SNP options in Special Needs Page")
	public void select_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Positive";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validating error scenario in Special Needs Page")
	public void error_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Negative";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validate elements in doctors page$")
    public void elements_doctor_page() {
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDoctorspage.doctorspageElements();
                    
    }
    
    @And("^user selects doctors in doctors page$")
    public void select_plan_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    String status = "Positive_NextPageName";
                    if (!(doctor.isEmpty())) {
                                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
                    }
    }
    
    @And("^user not selects doctors in doctors page$")
    public void notselect_doctor_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    if (doctor.isEmpty()) {
                                    planSelectorDoctorspage.doctorspageerror();
                    }
    }
    
    @And("^user select doctors and continous the page back from Doctors to previous page$")
    public void previous_doctors_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    String status = "Positive_NextPageName";
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
    }
    
    @And("^user select doctors and Click previous button from Doctors to check previous page$")
    public void previous_travel_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspagePreviousButton(inputValues.get("Doctors"));
    }
    
    @And("^user validating error scenario in doctors Page")
    public void error_doctor_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageerror();             
    }
    
    @And("^user selects Doctors in Doctors page and cancels the selection$")
	public void select_doctors_page_cancelvalidation(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.doctorspageCancel(inputValues.get("Doctors Search Text"), inputValues.get("Multi Doctor"));
	}
    
    @And("^user validate elements in drugs page$")
    public void elements_drugs_page() {
    				PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDrugspage.drugspage();
                    
    }
    
       @And("^user selects skip option in Drug page$")
    public void select_prescription_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    	planSelectorDrugspage.skipDrugs(drug);
                    	
    }
       
       @Then("^user selects add drug option in Drug page$")
   	public void add_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option in Drug page without continue next page$")
      	public void add_drugs_page_WithoutContinue(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
      		planSelectorDrugspage.drugnamesList();
      	}
       
       @Then("^user selects add drug option and cancels the modals in Drug page$")
   	public void add_drugs_page_cancelvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugspageCancel(inputValues.get("Drug Details"));
   	}
       
       @Then("^user validates errors in Drug page$")
   	public void add_drugs_page_errorvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugpagesError(inputValues.get("Drug Details"));
   	}
       
       @Then("^user search and choose a drug in Drug page$")
   	public void choose_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugChoose(inputValues.get("Search Text"),inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option without drugs in Drug page$")
   	public void add_NoDrug_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.continueNextpageZeroDrug();
   	}
       
       @Then("^user selects add drug option and comparing DCE and Drug page$")
      	public void verify_drugs_dce_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugwithDCE();
      	}
      	
      	@Then("^user verify drug list are same in DCE VS Drug page$")
      	public void verify_drugs_dce_vs_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugsDCEvsPRE();
      	}
       
       @Then("^user selects add drug option and verifying the drugs in Drug page$")
     	public void verify_drugs_page(DataTable givenAttributes) {
     		readfeaturedata(givenAttributes);
     		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
     		planSelectorDrugspage.comparingDrugsStartOver();
     	}
    
       @And("^user not selects prescription options in drug page$")
    public void notselect_prescription_opt_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    if (drug.isEmpty()) {
                    	planSelectorDrugspage.drugspageerror();
                    }
    }
       
       @Then("^user search and not found a drug in Drug Page$")
   	public void notfound_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugNotFound(inputValues.get("Search Text"));
   	}
       
   	@Then("^user validate elements in additional services page$")
   	public void elements_additional_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorAdditionalpage.additionalpage(inputValues.get("Drug Selection"));
   	}
   	
	@Then("^user selects additional services option in additional services page$")
   	public void select_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageFunctional(inputValues.get("Additional Option"));
   	}
	
	@Then("^user validates additional services error function in additional services page$")
   	public void noselect_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageerror(inputValues.get("Additional Option"));
   	}

	@Then("^user validate elements in cost preferences page$")
   	public void elements_costpreferences_page() {
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorPreferencespage.costpreferencepage();
   	}
	
	@Then("^user selects cost preferences option in cost preferences page$")
   	public void select_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorPreferencespage.costPreferencepageFunctional(inputValues.get("Preference Option"));
   	}
	
	@Then("^user validates cost preferences error function in cost preferences page$")
	public void noselect_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage = new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String preference = inputValues.get("Preference Option");
		if (preference.isEmpty()) {
			planSelectorPreferencespage.costPreferencepageerror();
		}
	}
	
	@Then("^user validate elements in loading results page$")
   	public void elements_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorResultspage.resultsloadingpage();
   	}
	
	@Then("^user validate recommendations in results page$")
   	public void view_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,false);
   	}
	
	@Then("^user validate tie recommendations in results page$")
   	public void view_tie_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,true);
   	}
	
	@Then("^user validate drugs details from PRE to VPP page$")
	public void view_drugs_PRE_VPP_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.drugsDetailsPREtoVPP();
	}
	
	@Then("^user validate removed drugs details updated from VPP to PRE page$")
	public void view_removed_drugs_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.removedDrugsDetailsVPPtoPRE();
	}
	
	@Then("^user navigate to PRE using StartNow button and verify drugs details in PRE page$")
	public void startnow_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startnowtilldrugs();
	}
	
	@Then("^user proceed page navigation till VPP page after Start Now button$")
	public void view_VPP_StartNow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startNowFullFlow(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate drugs details from DCE to PRE page$")
	public void drugs_DCE_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoPRE();
	}
	
	@Then("^user validate drugs details from VPP to DCE page$")
	public void drugs_VPP_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoDCE(inputValues.get("Drugs Name"));
	}
	
	@And("^user navigates to vpp summary page$")
   	public void navigate_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		planSelectorResultspage.navigateVPP(inputValues);
		checkpopup();
   	}
	
	@Then("^user adds Doctors in vpp summary page$")
   	public void add_providers_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.addProviderVPP(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
//		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user navigate to PRE from vpp page$")
   	public void PRE_VPP_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user clicks on GetStarted button in PRE page$")
   	public void PRE_GetStarted() {
		checkpopup();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
   	}
	
	@Then("^user navigate Doctors lookup session in Doctors page$")
	public void navigate_doctors_lookup_session() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@And("^user verifies doctors session in Doctors page$")
   	public void verify_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyProvidersSession(multiDoctor);
   	}
	
	@And("^user verifies doctors and continue to next page$")
   	public void verify_doctors_continue_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.getcontinue(multiDoctor);
   	}
	
	
	@When("^user navigates to Zip Code page from vpp plans$")
	public void user_navigates_to_zipcode_page_fromvpp_pdp() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.DCEtoPRE();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
	}
	
	@And("^user validte zip info in location page$")
	public void user_validates_zipcodepage(DataTable inputdata) {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		readfeaturedata(inputdata);
		planSelectorhomepage.zipcodeInfoValidation(inputValues);
	}
	
	@And("^user verifies Start Over doctors session in Doctors page$")
   	public void verify_StartOver_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyDoctorsSession(multiDoctor);
   	}
	
	@Then("^user adds Providers in Doctors page$")
	public void add_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.addProvidersPRE(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
	}
	
	@And("^user verifies doctors session in VPP page$")
   	public void verify_doctors_session_vpp_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.verifyProviderPREVPP();
   	}
	
	@Then("^user edits Doctors in Doctors page$")
	public void edit_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.editProvider(inputValues.get("Doctors Search Text1"), inputValues.get("Multi Doctor1"),
				inputValues.get("Doctors Search Text2"), inputValues.get("Multi Doctor2"));
	}
	
	@Then("^user navigates to VPP Summary Page$")
   	public void startNow_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		planSelectorResultspage.countyandViewPlan(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate zipcode and County in location page using StartNow$")
   	public void zipcode_location_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPre();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user navigate to PRE and validate zipcode using Start Over$")
   	public void zipcode_Doc_Drug_pre(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPreStartOver();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate recommendation rankings in results page$")
   	public void verify_rankings_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String recom = inputValues.get("Recommendation");
		String plansorder = inputValues.get("Ranking plans Order");
		planSelectorResultspage.validateRankingPlans(recom,plansorder);
   	}
	
	@Then("^verify continue function on \"([^\"]*)\" page$")
    public void proceed_next_page(String page) {
     PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     commonutli.continueNextpage(page.trim().toUpperCase(),false);
    }
	
	@And("^user verifies existing PRE provider session using startnow$")
   	public void verify_exisitng_pre_doctors_session_doctors_startnow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.verifyExisitngPREDoclist(multiDoctor);
		planSelectorDoctorspage.nextPageNameValidationDoctor();
   	}
	
	@And("^user verifies exisitng PRE drug session using startnow$")
   	public void verify_exisitng_pre_drugs_session_drug_startnow_page() {
		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDrugspage.verifyExisitngPREDruglist();
		planSelectorDrugspage.continueNextpageNameDrug();
   	}
	
	@When("^user validate email plan list from vpp$")
	public void user_sendPlanEmail_fromvpp_pdp(DataTable givenAttributes) {
		checkpopup();
		readfeaturedata(givenAttributes);
		String recom = inputValues.get("Recommendation");
		String email = inputValues.get("EmailID");
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.sendEmail(recom,email);
	}
	
	@Then("^user selects Doctors in Doctors page and validate next page name$")
	public void select_doctors_next_page_name() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@Then("^user validate UI and API recommendation rankings in results page$")
   	public void verify_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	@Then("^user verifies \"([^\"]*)\" page$")
	public void verify_vpp_summary_page_mobile(String VPP) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (VPP.toUpperCase().contains("PRE"))
			planSelectorResultspage.checkVPP(true);
		else
			planSelectorResultspage.checkVPP(false);
	}
	
	@Then("^user validate MA Plan Names in VPP Summary VS Details in results page$")
   	public void verify_MA_Plan_names_results_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate PDP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_PDP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_SNP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan in Enroll page$")
   	public void verify_SNP_Plan_names() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanName();
	}
	
	@Then("^user adds Drugs in vpp summary page$")
   	public void add_drugs_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.useraddDrugsVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user navigate from VPP to DCE tool$")
   	public void vpp_pre() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.userPreDCE();
   	}
	
	@Then("^user validate future vs current UI and API recommendation rankings in results page$")
   	public void verify_Future_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.checkPlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
		planSelectorResultspage.changePlanyear("current");
		// Toggling back and validating as future year only have values stored in storage
		planSelectorResultspage.changePlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	public void checkpopup() {
		if(if_offline_prod && !popup_clicked) {
			PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			popup_clicked = planSelectorhomepage.close_Popup();
		}
	}
	
	@Then("^user validate saved values in edit response page$")
   	public void check_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.editResponsepage(inputValues);
   	}
	
	@Then("^user return to vpp page using \"([^\"]*)\" from edit response page$")
   	public void check_saved_value_editResponse_page(String button) {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.returnVPP(button);
   	}
	
	@Then("^user edits values in edit response page$")
   	public void edit_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.editUserResponse(inputValues);
   	}
	
	@Then("^user adds doctor in edit response page$")
   	public void add_doctor_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDoctorEditResponse(inputValues);
   	}
	
	@Then("^user navigates to edit response page$")
   	public void navigate_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateEditResponsePage(inputValues.get("Plan Type"));
   	}

	@Then("^user edits coverage value in edit response page$")
   	public void edit_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.changeCoverage(inputValues);
   	}
	
	@Then("^user validates coverage value in edit response page$")
   	public void validate_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.checkCoveragevalue(inputValues);
   	}
	
	@Then("^user adds SNP options and Location in edit response page$")
   	public void add_snp_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addSNPEditResponse(inputValues);
		preEditpage.addLocationEditResponse(inputValues);
   	}
	
	@Then("^user selects add drug option in drug page from edit response page$")
   	public void add_drug_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDrugs(inputValues);
   	}
	
	@Then("^user save plans in vpp summary and Validate in Visitor profile page$")
	public void user_verify_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateCombineSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user save 2 MA plans in vpp summary and Validate in Visitor profile page$")
	public void user_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user Validate Drug and Provider details in Visitor profile page$")
	public void user_verify_drug_provider() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateDrugProvider();
	}
	
	@Given("^the user is on external acquisition site landing page$")
	public void the_user_on_external_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE");
		aquisitionhomepage.openExternalLinkPRE(inputValues.get("Site Name"));
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
	@When("^user navigate to Plan Recommendation Engine Tool$")
	public void the_user_external_PRE(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.navigatePRE(inputValues);
	}
	
	@Then("^user selects priority in priorities page$")
	public void user_selects_priorities(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesFunctional(inputValues.get("Priority Option"),inputValues.get("Priorities"));
		priorities.continuePriority();
	}

	@Then("^user validate elements in priorities page$")
	public void user_validate_prioritiesElements() {
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesElements();
	}
	
	@Then("^user validate PDP Plan Names in VPP Details and Click Enroll button in Plan Details page$")
   	public void verify_Plan_names_Enroll_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesAndEnroll();
	}
	
	@When("^user navigate to Drug Cost Estimator page$")
	public void navigate_DCE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToDrugCostEstimatorViaShopTools();
	}
	
	@And("^user validate druglist in Drug Cost Estimator page$")
	public void Druglist_DCE() {
		ACQDrugCostEstimatorPage dceDrugs =  new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dceDrugs.getDruglist();
	}
	
	@Then("^user adds Drugs in Drug Cost Estimator page$")
   	public void add_drugs_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dce.useraddDrugsDCEWithoutVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user validate navigate to Get a Plan Recomendation page$")
	public void navigate_PRE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngine();
	}
	
	@Then("^user save recommendation results and validate in VP$")
   	public void save_results() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.validateSaveResults();
	}
	
	@Then("^user navigate to visitor profile and open PRE Widget$")
    public void pre_Widget_open(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithoutMSPlan(inputValues.get("User Type"));
    }
	
	@And("^user Click on Getstarted in PRE Home Page and Continue till Covergae page$")
    public void I_click_questionnaire_first() {
        PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorhomepage.getStartedContinueZipcode();
    }
	
	@Then("^user select plans in VPP Summary and navigate to Plan Compare page$")
   	public void verify_Plans_compare_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesPlanCompare();
	}
	
	@And("^user validate buttons in SaveResult Model and PRE Widget in VP$")
	public void btn_SaveResult_Widget(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateSaveResultsPage();
		preEditpage.PRESaveResultModelBtn();
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user creates a \"([^\"]*)\" tab from PRE$")
   	public void create_tab(String tabtype) {
		PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		commonutli.creatingTab(tabtype.toUpperCase());
   	}
	
	@Then("^user validate recommendation section in PRE Widget on VP$")
    public void pre_Widget_recom() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.recomPREWidget();
    }
	
	@Then("^user validate a \"([^\"]*)\" buttons from PRE$")
   	public void btn_tab(String tabtype) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.validateLinks(tabtype);
   	}
	
	@Then("^user navigate to visitor profile with saving MS plan$")
    public void Guest_Profile_MSPlan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.SavingMsplan();
		preEditpage.shoppingcartNavigation(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithMSPlan();
    }
	
	@When("^user Sigin visitor profile from PRE$")
	public void sign_vp(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.SignIn(inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user do browser back from current page$")
   	public void browser_back() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.browserBack();
   	}
	
	/////////////////////////////////////////////////////// New Results Page //////////////////////////////
	
	@Then("^user validate elements in PRE results page$")
   	public void elements_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorNewResultspage.preResultsUI(inputValues.get("Zip Code"),inputValues.get("CountyDropDown"));
   	}
	
	@Then("^user validate pagination in PRE results page$")
   	public void pagination_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validatePagination();
		//planSelectorNewResultspage.findPlan();
   	}
	
	@Then("^user validate drugDetails in PRE results page$")
   	public void drugDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"tile");
   	}
	
	@Then("^user validate doctors info in PRE results page$")
   	public void doctorDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"tile");
   	}
	
	@And("^user selects empty doctors in doctors page$")
    public void zeroDoctor_doctor_page(DataTable givenAttributes) throws Throwable {
        readfeaturedata(givenAttributes);
        PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorDoctorspage.addZeroProviders(inputValues.get("Doctors Search Text"));
     }
	
	@Then("^user validate snp info in PRE results page$")
   	public void snpDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateSNPInfo(inputValues.get("SNPInfo"));
   	}
	
	@Then("^user views plan details from results page$")
   	public void viewDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.viewPlanInfo(inputValues.get("planInfo"));
   	}
	
	@Then("^user views learn more from results page$")
   	public void learnMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.learnMore(inputValues.get("Learn More"));
   	}

	@Then("^user validate drugCostModal in PRE results page$")
   	public void drugDetailsModel_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"model");
   	}
	
	@Then("^user validate showmoreDrug in PRE results page$")
   	public void drugShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"show");
   	}
	
	@Then("^user validate showmoreDoctor in PRE results page$")
   	public void doctorShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"show");
   	}
	
	@Then("^the user do poc$")
   	public void poc_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.poc();
   	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:03.569
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.569
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.569
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:03.571
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.571
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:03.618
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:03.622
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.622
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.622
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:03.624
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:03.626
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.626
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:03.629
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:03.726
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:03.729
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.729
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.729
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:03.731
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:03.731
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:05.167
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:05.171
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:05.172
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:05.172
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:05.174
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:05.174
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:05.181
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:05.183
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:09.186
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:09.189
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:09.190
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:09.190
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:09.192
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:09.192
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:09.200
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:09.201
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:10.711
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:10.714
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:10.715
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:10.715
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:10.717
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:10.717
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:13.301
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package acceptancetests.acquisition.planRecommendationEngine;

import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.JSONException;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;

import acceptancetests.acquisition.vpp.VPPCommonConstants;
import acceptancetests.data.CommonConstants;
import acceptancetests.data.PageConstants;
import atdd.framework.Assertion;
import atdd.framework.DataTableParser;
import atdd.framework.MRScenario;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.PlanSelectorNewPage;
import pages.acquisition.planRecommendationEngine.ACQDrugCostEstimatorPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineAdditionalServicesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCommonutility;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCostPreferencesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCoverageOptionPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineEditResponsePage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineHeaderAndFooter;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineLandingAndZipcodePages;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineNewResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePharmacyPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePrioritiesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineSpecialNeedsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineTravelPage;

public class PlanRecommendationEngineStepDefinition {

	@Autowired
	
	MRScenario loginScenario;

	public MRScenario getLoginScenario() {
		return loginScenario;
	}
//	WebDriver wd;
//	List<DataTableRow> inputRow;
	HashMap<String, String> inputValues;
	public String PREflow="";
	
	public void readfeaturedata(DataTable data) {
		inputValues = new HashMap<String, String>();
		inputValues = DataTableParser.readDataTableAsMaps(data);
		String temp = inputValues.get("Plan Type");
		if (temp != null && PREflow != temp) {
			PREflow = temp;
			//System.out.println("\n\n\n\n\n\n");
			String curID = String.valueOf(Thread.currentThread().getId());
			System.out.println("Current Thread ID is - "+curID+" for the flow "+PREflow);
			//CommonConstants.PRE_FLOW = new LinkedHashMap<String,String>();
			CommonConstants.PRE_FLOW.put(curID, PREflow);
		}
	}
	
	boolean if_offline_prod = false, popup_clicked = false;
	@Given("^the user is on UHC medicare acquisition site PRE landing page$")
	public void the_user_on_uhc_medicaresolutions_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE"); //changed on 3/3/21 as part of AARP/UHC cleanup
		if_offline_prod = aquisitionhomepage.openPRE(inputValues.get("Site"));
//		aquisitionhomepage.fixPrivateConnection();
		
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
		@And("^clicks on get started button and runs questionnaire$")
	public void clicks_on_get_started_button_and_directly_skip_to_results(DataTable givenAttributes) throws Throwable {
			readfeaturedata(givenAttributes);
			String zipcode = inputValues.get("Zip Code");
			System.out.println("Zipcode is:"+zipcode);
			String county = inputValues.get("CountyDropDown");
			System.out.println("Email is:"+county);
			String isMultiCounty = inputValues.get("Is Multi County");
			System.out.println("Entered Search Key is:"+isMultiCounty);
			checkpopup();
			
			getLoginScenario().saveBean(VPPCommonConstants.ZIPCODE, zipcode);
			getLoginScenario().saveBean(VPPCommonConstants.COUNTY, county);
			getLoginScenario().saveBean(VPPCommonConstants.IS_MULTICOUNTY, isMultiCounty);
			
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.quizStartAndRunQuestionnaire(zipcode);
		} else {
			planSelectorhomepage.quizStartAndRunQuestionnaireWithCounty(zipcode, county);
		}
	}
	
	@When("^user navigate to Plan Recommendation Engine and Checking Breadcrumbs$")
	public void user_navigate_PRE_Breadcrumbs() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}
	
	@Then("^user validate elements on landing page of Plan Recommendation Engine$")
	public void user_check_landing_page_Plan_Selector_tool() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}

	
	@When("^user navigate Plan Recommendation Engine Using Shop From Home in Find Your Plan$")
	public void navigate_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaShopTools();
//		headerAndFooter.breadCrumbs();
}
	
	@When("^user navigate Plan Recommendation Engine Using Get Started From Medicare Articles$")
	public void navigate_PRE_tool_MedicareArticles() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareArticles();
}
	
	@When("^user navigate to Medicare Education and validate Plan Recommendation Engine Widget$")
	public void navigate_MedicareEducation() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareEducation();
}
	
	@Then("^user validate Header elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.headerElements();
		headerAndFooter.headerLinkvalidation();
	}
	@Then("^user validate Footer elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_footer_Plan_Selector_tool() throws Exception {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.footerElements();
		headerAndFooter.footerLinkvalidation();
	}
	@Then("^user validate Header and Footer Functionality of Plan Recommendation Engine$")
	public void user_check_header_footer_Actions_Plan_Selector_tool(DataTable givenAttributes) throws Throwable{
		WebDriver wd = (WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER);
		String actualpageurl = wd.getCurrentUrl();
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		System.out.println("Zipcode is:"+zipcode);
		String email = inputValues.get("EMail");
		System.out.println("Email is:"+email);
		String searchKey = inputValues.get("Search Key");
		System.out.println("Entered Search Key is:"+searchKey);
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.zipcodeFunctionInShopforaplan(zipcode);
		Thread.sleep(5000);
		headerAndFooter.emailFunctionInShopforaplan(email);
		Thread.sleep(5000);
		if(actualpageurl.contains("uhcmedicaresolutions")){
			headerAndFooter.enterSearchFunction(searchKey);
			Thread.sleep(5000);	
		}
	}
	
	@And("^clicks on get started button and check error scenarios$")
	public void clicks_on_get_started_button_and_check_error_scenarios(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		String county = inputValues.get("CountyDropDown");
		String isMultiCounty = inputValues.get("Is Multi County");
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.getStartedAndRunInvalidzipcode(zipcode);
		} else {
			planSelectorhomepage.getStartedAndRunzipcodeWithCounty(zipcode, county);
		}
			
	}
	
	@And("^user validate elements in coverage options page$")
	public void elements_coverage_page() {
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		planSelectorCoverageepage.coverageOptionpage();
		
	}
	
	@And("^user selects plan type in coverage options page$")
	public void select_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (!(plantype.isEmpty())) {
			planSelectorCoverageepage.coverageOptionpageFunctional(plantype);
		}
	}
	
	@And("^user not selects plan type in coverage options page$")
	public void notselect_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (plantype.isEmpty()) {
			planSelectorCoverageepage.coverageOptionpageerror();
		}
	}
	
	@And("^user select planType and continous the page back to previous page$")
	public void previous_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpageFunctional(inputValues.get("Plan Type"));
	}
	
	@And("^user select planType and Click previous button to check previous page$")
	public void previous_zipcode_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpagePreviousButton(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate elements in Special Needs page$")
	public void elements_special_page() {
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorSpecialneedspage.specialNeedspage();
	}
	
	@And("^user selects SNP options in Special Needs Page")
	public void select_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Positive";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validating error scenario in Special Needs Page")
	public void error_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Negative";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validate elements in doctors page$")
    public void elements_doctor_page() {
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDoctorspage.doctorspageElements();
                    
    }
    
    @And("^user selects doctors in doctors page$")
    public void select_plan_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    String status = "Positive_NextPageName";
                    if (!(doctor.isEmpty())) {
                                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
                    }
    }
    
    @And("^user not selects doctors in doctors page$")
    public void notselect_doctor_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    if (doctor.isEmpty()) {
                                    planSelectorDoctorspage.doctorspageerror();
                    }
    }
    
    @And("^user select doctors and continous the page back from Doctors to previous page$")
    public void previous_doctors_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    String status = "Positive_NextPageName";
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
    }
    
    @And("^user select doctors and Click previous button from Doctors to check previous page$")
    public void previous_travel_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspagePreviousButton(inputValues.get("Doctors"));
    }
    
    @And("^user validating error scenario in doctors Page")
    public void error_doctor_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageerror();             
    }
    
    @And("^user selects Doctors in Doctors page and cancels the selection$")
	public void select_doctors_page_cancelvalidation(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.doctorspageCancel(inputValues.get("Doctors Search Text"), inputValues.get("Multi Doctor"));
	}
    
    @And("^user validate elements in drugs page$")
    public void elements_drugs_page() {
    				PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDrugspage.drugspage();
                    
    }
    
       @And("^user selects skip option in Drug page$")
    public void select_prescription_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    	planSelectorDrugspage.skipDrugs(drug);
                    	
    }
       
       @Then("^user selects add drug option in Drug page$")
   	public void add_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option in Drug page without continue next page$")
      	public void add_drugs_page_WithoutContinue(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
      		planSelectorDrugspage.drugnamesList();
      	}
       
       @Then("^user selects add drug option and cancels the modals in Drug page$")
   	public void add_drugs_page_cancelvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugspageCancel(inputValues.get("Drug Details"));
   	}
       
       @Then("^user validates errors in Drug page$")
   	public void add_drugs_page_errorvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugpagesError(inputValues.get("Drug Details"));
   	}
       
       @Then("^user search and choose a drug in Drug page$")
   	public void choose_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugChoose(inputValues.get("Search Text"),inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option without drugs in Drug page$")
   	public void add_NoDrug_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.continueNextpageZeroDrug();
   	}
       
       @Then("^user selects add drug option and comparing DCE and Drug page$")
      	public void verify_drugs_dce_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugwithDCE();
      	}
      	
      	@Then("^user verify drug list are same in DCE VS Drug page$")
      	public void verify_drugs_dce_vs_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugsDCEvsPRE();
      	}
       
       @Then("^user selects add drug option and verifying the drugs in Drug page$")
     	public void verify_drugs_page(DataTable givenAttributes) {
     		readfeaturedata(givenAttributes);
     		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
     		planSelectorDrugspage.comparingDrugsStartOver();
     	}
    
       @And("^user not selects prescription options in drug page$")
    public void notselect_prescription_opt_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    if (drug.isEmpty()) {
                    	planSelectorDrugspage.drugspageerror();
                    }
    }
       
       @Then("^user search and not found a drug in Drug Page$")
   	public void notfound_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugNotFound(inputValues.get("Search Text"));
   	}
       
   	@Then("^user validate elements in additional services page$")
   	public void elements_additional_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorAdditionalpage.additionalpage(inputValues.get("Drug Selection"));
   	}
   	
	@Then("^user selects additional services option in additional services page$")
   	public void select_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageFunctional(inputValues.get("Additional Option"));
   	}
	
	@Then("^user validates additional services error function in additional services page$")
   	public void noselect_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageerror(inputValues.get("Additional Option"));
   	}

	@Then("^user validate elements in cost preferences page$")
   	public void elements_costpreferences_page() {
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorPreferencespage.costpreferencepage();
   	}
	
	@Then("^user selects cost preferences option in cost preferences page$")
   	public void select_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorPreferencespage.costPreferencepageFunctional(inputValues.get("Preference Option"));
   	}
	
	@Then("^user validates cost preferences error function in cost preferences page$")
	public void noselect_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage = new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String preference = inputValues.get("Preference Option");
		if (preference.isEmpty()) {
			planSelectorPreferencespage.costPreferencepageerror();
		}
	}
	
	@Then("^user validate elements in loading results page$")
   	public void elements_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorResultspage.resultsloadingpage();
   	}
	
	@Then("^user validate recommendations in results page$")
   	public void view_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,false);
   	}
	
	@Then("^user validate tie recommendations in results page$")
   	public void view_tie_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,true);
   	}
	
	@Then("^user validate drugs details from PRE to VPP page$")
	public void view_drugs_PRE_VPP_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.drugsDetailsPREtoVPP();
	}
	
	@Then("^user validate removed drugs details updated from VPP to PRE page$")
	public void view_removed_drugs_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.removedDrugsDetailsVPPtoPRE();
	}
	
	@Then("^user navigate to PRE using StartNow button and verify drugs details in PRE page$")
	public void startnow_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startnowtilldrugs();
	}
	
	@Then("^user proceed page navigation till VPP page after Start Now button$")
	public void view_VPP_StartNow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startNowFullFlow(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate drugs details from DCE to PRE page$")
	public void drugs_DCE_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoPRE();
	}
	
	@Then("^user validate drugs details from VPP to DCE page$")
	public void drugs_VPP_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoDCE(inputValues.get("Drugs Name"));
	}
	
	@And("^user navigates to vpp summary page$")
   	public void navigate_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		planSelectorResultspage.navigateVPP(inputValues);
		checkpopup();
   	}
	
	@Then("^user adds Doctors in vpp summary page$")
   	public void add_providers_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.addProviderVPP(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
//		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user navigate to PRE from vpp page$")
   	public void PRE_VPP_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user clicks on GetStarted button in PRE page$")
   	public void PRE_GetStarted() {
		checkpopup();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
   	}
	
	@Then("^user navigate Doctors lookup session in Doctors page$")
	public void navigate_doctors_lookup_session() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@And("^user verifies doctors session in Doctors page$")
   	public void verify_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyProvidersSession(multiDoctor);
   	}
	
	@And("^user verifies doctors and continue to next page$")
   	public void verify_doctors_continue_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.getcontinue(multiDoctor);
   	}
	
	
	@When("^user navigates to Zip Code page from vpp plans$")
	public void user_navigates_to_zipcode_page_fromvpp_pdp() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.DCEtoPRE();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
	}
	
	@And("^user validte zip info in location page$")
	public void user_validates_zipcodepage(DataTable inputdata) {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		readfeaturedata(inputdata);
		planSelectorhomepage.zipcodeInfoValidation(inputValues);
	}
	
	@And("^user verifies Start Over doctors session in Doctors page$")
   	public void verify_StartOver_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyDoctorsSession(multiDoctor);
   	}
	
	@Then("^user adds Providers in Doctors page$")
	public void add_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.addProvidersPRE(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
	}
	
	@And("^user verifies doctors session in VPP page$")
   	public void verify_doctors_session_vpp_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.verifyProviderPREVPP();
   	}
	
	@Then("^user edits Doctors in Doctors page$")
	public void edit_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.editProvider(inputValues.get("Doctors Search Text1"), inputValues.get("Multi Doctor1"),
				inputValues.get("Doctors Search Text2"), inputValues.get("Multi Doctor2"));
	}
	
	@Then("^user navigates to VPP Summary Page$")
   	public void startNow_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		planSelectorResultspage.countyandViewPlan(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate zipcode and County in location page using StartNow$")
   	public void zipcode_location_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPre();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user navigate to PRE and validate zipcode using Start Over$")
   	public void zipcode_Doc_Drug_pre(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPreStartOver();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate recommendation rankings in results page$")
   	public void verify_rankings_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String recom = inputValues.get("Recommendation");
		String plansorder = inputValues.get("Ranking plans Order");
		planSelectorResultspage.validateRankingPlans(recom,plansorder);
   	}
	
	@Then("^verify continue function on \"([^\"]*)\" page$")
    public void proceed_next_page(String page) {
     PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     commonutli.continueNextpage(page.trim().toUpperCase(),false);
    }
	
	@And("^user verifies existing PRE provider session using startnow$")
   	public void verify_exisitng_pre_doctors_session_doctors_startnow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.verifyExisitngPREDoclist(multiDoctor);
		planSelectorDoctorspage.nextPageNameValidationDoctor();
   	}
	
	@And("^user verifies exisitng PRE drug session using startnow$")
   	public void verify_exisitng_pre_drugs_session_drug_startnow_page() {
		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDrugspage.verifyExisitngPREDruglist();
		planSelectorDrugspage.continueNextpageNameDrug();
   	}
	
	@When("^user validate email plan list from vpp$")
	public void user_sendPlanEmail_fromvpp_pdp(DataTable givenAttributes) {
		checkpopup();
		readfeaturedata(givenAttributes);
		String recom = inputValues.get("Recommendation");
		String email = inputValues.get("EmailID");
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.sendEmail(recom,email);
	}
	
	@Then("^user selects Doctors in Doctors page and validate next page name$")
	public void select_doctors_next_page_name() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@Then("^user validate UI and API recommendation rankings in results page$")
   	public void verify_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	@Then("^user verifies \"([^\"]*)\" page$")
	public void verify_vpp_summary_page_mobile(String VPP) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (VPP.toUpperCase().contains("PRE"))
			planSelectorResultspage.checkVPP(true);
		else
			planSelectorResultspage.checkVPP(false);
	}
	
	@Then("^user validate MA Plan Names in VPP Summary VS Details in results page$")
   	public void verify_MA_Plan_names_results_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate PDP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_PDP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_SNP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan in Enroll page$")
   	public void verify_SNP_Plan_names() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanName();
	}
	
	@Then("^user adds Drugs in vpp summary page$")
   	public void add_drugs_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.useraddDrugsVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user navigate from VPP to DCE tool$")
   	public void vpp_pre() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.userPreDCE();
   	}
	
	@Then("^user validate future vs current UI and API recommendation rankings in results page$")
   	public void verify_Future_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.checkPlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
		planSelectorResultspage.changePlanyear("current");
		// Toggling back and validating as future year only have values stored in storage
		planSelectorResultspage.changePlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	public void checkpopup() {
		if(if_offline_prod && !popup_clicked) {
			PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			popup_clicked = planSelectorhomepage.close_Popup();
		}
	}
	
	@Then("^user validate saved values in edit response page$")
   	public void check_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.editResponsepage(inputValues);
   	}
	
	@Then("^user return to vpp page using \"([^\"]*)\" from edit response page$")
   	public void check_saved_value_editResponse_page(String button) {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.returnVPP(button);
   	}
	
	@Then("^user edits values in edit response page$")
   	public void edit_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.editUserResponse(inputValues);
   	}
	
	@Then("^user adds doctor in edit response page$")
   	public void add_doctor_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDoctorEditResponse(inputValues);
   	}
	
	@Then("^user navigates to edit response page$")
   	public void navigate_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateEditResponsePage(inputValues.get("Plan Type"));
   	}

	@Then("^user edits coverage value in edit response page$")
   	public void edit_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.changeCoverage(inputValues);
   	}
	
	@Then("^user validates coverage value in edit response page$")
   	public void validate_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.checkCoveragevalue(inputValues);
   	}
	
	@Then("^user adds SNP options and Location in edit response page$")
   	public void add_snp_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addSNPEditResponse(inputValues);
		preEditpage.addLocationEditResponse(inputValues);
   	}
	
	@Then("^user selects add drug option in drug page from edit response page$")
   	public void add_drug_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDrugs(inputValues);
   	}
	
	@Then("^user save plans in vpp summary and Validate in Visitor profile page$")
	public void user_verify_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateCombineSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user save 2 MA plans in vpp summary and Validate in Visitor profile page$")
	public void user_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user Validate Drug and Provider details in Visitor profile page$")
	public void user_verify_drug_provider() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateDrugProvider();
	}
	
	@Given("^the user is on external acquisition site landing page$")
	public void the_user_on_external_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE");
		aquisitionhomepage.openExternalLinkPRE(inputValues.get("Site Name"));
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
	@When("^user navigate to Plan Recommendation Engine Tool$")
	public void the_user_external_PRE(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.navigatePRE(inputValues);
	}
	
	@Then("^user selects priority in priorities page$")
	public void user_selects_priorities(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesFunctional(inputValues.get("Priority Option"),inputValues.get("Priorities"));
		priorities.continuePriority();
	}

	@Then("^user validate elements in priorities page$")
	public void user_validate_prioritiesElements() {
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesElements();
	}
	
	@Then("^user validate PDP Plan Names in VPP Details and Click Enroll button in Plan Details page$")
   	public void verify_Plan_names_Enroll_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesAndEnroll();
	}
	
	@When("^user navigate to Drug Cost Estimator page$")
	public void navigate_DCE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToDrugCostEstimatorViaShopTools();
	}
	
	@And("^user validate druglist in Drug Cost Estimator page$")
	public void Druglist_DCE() {
		ACQDrugCostEstimatorPage dceDrugs =  new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dceDrugs.getDruglist();
	}
	
	@Then("^user adds Drugs in Drug Cost Estimator page$")
   	public void add_drugs_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dce.useraddDrugsDCEWithoutVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user validate navigate to Get a Plan Recomendation page$")
	public void navigate_PRE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngine();
	}
	
	@Then("^user save recommendation results and validate in VP$")
   	public void save_results() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.validateSaveResults();
	}
	
	@Then("^user navigate to visitor profile and open PRE Widget$")
    public void pre_Widget_open(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithoutMSPlan(inputValues.get("User Type"));
    }
	
	@And("^user Click on Getstarted in PRE Home Page and Continue till Covergae page$")
    public void I_click_questionnaire_first() {
        PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorhomepage.getStartedContinueZipcode();
    }
	
	@Then("^user select plans in VPP Summary and navigate to Plan Compare page$")
   	public void verify_Plans_compare_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesPlanCompare();
	}
	
	@And("^user validate buttons in SaveResult Model and PRE Widget in VP$")
	public void btn_SaveResult_Widget(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateSaveResultsPage();
		preEditpage.PRESaveResultModelBtn();
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user creates a \"([^\"]*)\" tab from PRE$")
   	public void create_tab(String tabtype) {
		PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		commonutli.creatingTab(tabtype.toUpperCase());
   	}
	
	@Then("^user validate recommendation section in PRE Widget on VP$")
    public void pre_Widget_recom() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.recomPREWidget();
    }
	
	@Then("^user validate a \"([^\"]*)\" buttons from PRE$")
   	public void btn_tab(String tabtype) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.validateLinks(tabtype);
   	}
	
	@Then("^user navigate to visitor profile with saving MS plan$")
    public void Guest_Profile_MSPlan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.SavingMsplan();
		preEditpage.shoppingcartNavigation(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithMSPlan();
    }
	
	@When("^user Sigin visitor profile from PRE$")
	public void sign_vp(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.SignIn(inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user do browser back from current page$")
   	public void browser_back() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.browserBack();
   	}
	
	/////////////////////////////////////////////////////// New Results Page //////////////////////////////
	
	@Then("^user validate elements in PRE results page$")
   	public void elements_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorNewResultspage.preResultsUI(inputValues.get("Zip Code"),inputValues.get("CountyDropDown"));
   	}
	
	@Then("^user validate pagination in PRE results page$")
   	public void pagination_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validatePagination();
		//planSelectorNewResultspage.findPlan();
   	}
	
	@Then("^user validate drugDetails in PRE results page$")
   	public void drugDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"tile");
   	}
	
	@Then("^user validate doctors info in PRE results page$")
   	public void doctorDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"tile");
   	}
	
	@And("^user selects empty doctors in doctors page$")
    public void zeroDoctor_doctor_page(DataTable givenAttributes) throws Throwable {
        readfeaturedata(givenAttributes);
        PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorDoctorspage.addZeroProviders(inputValues.get("Doctors Search Text"));
     }
	
	@Then("^user validate snp info in PRE results page$")
   	public void snpDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateSNPInfo(inputValues.get("SNPInfo"));
   	}
	
	@Then("^user views plan details from results page$")
   	public void viewDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.viewPlanInfo(inputValues.get("planInfo"));
   	}
	
	@Then("^user views learn more from results page$")
   	public void learnMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.learnMore(inputValues.get("Learn More"));
   	}

	@Then("^user validate drugCostModal in PRE results page$")
   	public void drugDetailsModel_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"model");
   	}
	
	@Then("^user validate showmoreDrug in PRE results page$")
   	public void drugShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"show");
   	}
	
	@Then("^user validate showmoreDoctor in PRE results page$")
   	public void doctorShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"show");
   	}
	
	@Then("^the user do poc$")
   	public void poc_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.poc();
   	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:13.313
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.313
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.313
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:13.317
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.317
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:13.369
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:13.375
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.376
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.376
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:13.381
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.381
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:54:13.395
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:54:13.404
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.404
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.404
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:54:13.409
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:54:13.409
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:55:53.023
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:55:53.026
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:55:53.027
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:55:53.027
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:55:53.029
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:55:53.029
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:55:54.327
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:55:54.330
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:55:55.804
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:55:55.806
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:55:57.599
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:55:57.602
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:55:58.868
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:55:58.871
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:04.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:04.416
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:04.513
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:04.515
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:07.839
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:07.841
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:07.847
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:07.849
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:09.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:09.025
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:11.070
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:11.072
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:15.774
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:15.776
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:19.585
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:19.587
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:19.929
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:19.931
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:56:21.561
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:21.563
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:21.564
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:21.564
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:21.566
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:21.566
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:21.574
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:21.576
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:21.946
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:21.948
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:56:24.088
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = planType;
		String R1PlanName = .firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:24.091
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:24.091
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:24.091
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:24.093
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:56:24.093
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:56:24.101
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:56:24.103
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:56:25.104
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(css = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;
	
	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
	private WebElement FirstRecommendationSectionTag;

	@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
	private WebElement FirstRecommendationSectionPlanName;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = planType;
		String R1PlanName = firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
