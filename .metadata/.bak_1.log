!SESSION 2021-07-16 12:03:15.179 -----------------------------------------------
eclipse.buildId=4.7.3.M20180330-0640
java.version=1.8.0_282
java.vendor=AdoptOpenJDK
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\gitrepo\mratdd\.metadata\.bak_0.log
Created Time: 2021-07-16 14:54:32.650

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:54:32.652
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.653
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.653
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:54:32.655
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.655
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 14:54:32.899
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package acceptancetests.acquisition.planRecommendationEngine;

import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.JSONException;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;

import acceptancetests.acquisition.vpp.VPPCommonConstants;
import acceptancetests.data.CommonConstants;
import acceptancetests.data.PageConstants;
import atdd.framework.Assertion;
import atdd.framework.DataTableParser;
import atdd.framework.MRScenario;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.PlanSelectorNewPage;
import pages.acquisition.planRecommendationEngine.ACQDrugCostEstimatorPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineAdditionalServicesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCommonutility;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCostPreferencesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCoverageOptionPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineEditResponsePage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineHeaderAndFooter;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineLandingAndZipcodePages;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineNewResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePharmacyPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePrioritiesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineSpecialNeedsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineTravelPage;

public class PlanRecommendationEngineStepDefinition {

	@Autowired
	
	MRScenario loginScenario;

	public MRScenario getLoginScenario() {
		return loginScenario;
	}
//	WebDriver wd;
//	List<DataTableRow> inputRow;
	HashMap<String, String> inputValues;
	public String PREflow="";
	
	public void readfeaturedata(DataTable data) {
		inputValues = new HashMap<String, String>();
		inputValues = DataTableParser.readDataTableAsMaps(data);
		String temp = inputValues.get("Plan Type");
		if (temp != null && PREflow != temp) {
			PREflow = temp;
			//System.out.println("\n\n\n\n\n\n");
			String curID = String.valueOf(Thread.currentThread().getId());
			System.out.println("Current Thread ID is - "+curID+" for the flow "+PREflow);
			//CommonConstants.PRE_FLOW = new LinkedHashMap<String,String>();
			CommonConstants.PRE_FLOW.put(curID, PREflow);
		}
	}
	
	boolean if_offline_prod = false, popup_clicked = false;
	@Given("^the user is on UHC medicare acquisition site PRE landing page$")
	public void the_user_on_uhc_medicaresolutions_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE"); //changed on 3/3/21 as part of AARP/UHC cleanup
		if_offline_prod = aquisitionhomepage.openPRE(inputValues.get("Site"));
//		aquisitionhomepage.fixPrivateConnection();
		
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
		@And("^clicks on get started button and runs questionnaire$")
	public void clicks_on_get_started_button_and_directly_skip_to_results(DataTable givenAttributes) throws Throwable {
			readfeaturedata(givenAttributes);
			String zipcode = inputValues.get("Zip Code");
			System.out.println("Zipcode is:"+zipcode);
			String county = inputValues.get("CountyDropDown");
			System.out.println("Email is:"+county);
			String isMultiCounty = inputValues.get("Is Multi County");
			System.out.println("Entered Search Key is:"+isMultiCounty);
			checkpopup();
			
			getLoginScenario().saveBean(VPPCommonConstants.ZIPCODE, zipcode);
			getLoginScenario().saveBean(VPPCommonConstants.COUNTY, county);
			getLoginScenario().saveBean(VPPCommonConstants.IS_MULTICOUNTY, isMultiCounty);
			
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.quizStartAndRunQuestionnaire(zipcode);
		} else {
			planSelectorhomepage.quizStartAndRunQuestionnaireWithCounty(zipcode, county);
		}
	}
	
	@When("^user navigate to Plan Recommendation Engine and Checking Breadcrumbs$")
	public void user_navigate_PRE_Breadcrumbs() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}
	
	@Then("^user validate elements on landing page of Plan Recommendation Engine$")
	public void user_check_landing_page_Plan_Selector_tool() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}

	
	@When("^user navigate Plan Recommendation Engine Using Shop From Home in Find Your Plan$")
	public void navigate_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaShopTools();
//		headerAndFooter.breadCrumbs();
}
	
	@When("^user navigate Plan Recommendation Engine Using Get Started From Medicare Articles$")
	public void navigate_PRE_tool_MedicareArticles() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareArticles();
}
	
	@When("^user navigate to Medicare Education and validate Plan Recommendation Engine Widget$")
	public void navigate_MedicareEducation() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareEducation();
}
	
	@Then("^user validate Header elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.headerElements();
		headerAndFooter.headerLinkvalidation();
	}
	@Then("^user validate Footer elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_footer_Plan_Selector_tool() throws Exception {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.footerElements();
		headerAndFooter.footerLinkvalidation();
	}
	@Then("^user validate Header and Footer Functionality of Plan Recommendation Engine$")
	public void user_check_header_footer_Actions_Plan_Selector_tool(DataTable givenAttributes) throws Throwable{
		WebDriver wd = (WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER);
		String actualpageurl = wd.getCurrentUrl();
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		System.out.println("Zipcode is:"+zipcode);
		String email = inputValues.get("EMail");
		System.out.println("Email is:"+email);
		String searchKey = inputValues.get("Search Key");
		System.out.println("Entered Search Key is:"+searchKey);
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.zipcodeFunctionInShopforaplan(zipcode);
		Thread.sleep(5000);
		headerAndFooter.emailFunctionInShopforaplan(email);
		Thread.sleep(5000);
		if(actualpageurl.contains("uhcmedicaresolutions")){
			headerAndFooter.enterSearchFunction(searchKey);
			Thread.sleep(5000);	
		}
	}
	
	@And("^clicks on get started button and check error scenarios$")
	public void clicks_on_get_started_button_and_check_error_scenarios(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		String county = inputValues.get("CountyDropDown");
		String isMultiCounty = inputValues.get("Is Multi County");
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.getStartedAndRunInvalidzipcode(zipcode);
		} else {
			planSelectorhomepage.getStartedAndRunzipcodeWithCounty(zipcode, county);
		}
			
	}
	
	@And("^user validate elements in coverage options page$")
	public void elements_coverage_page() {
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		planSelectorCoverageepage.coverageOptionpage();
		
	}
	
	@And("^user selects plan type in coverage options page$")
	public void select_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (!(plantype.isEmpty())) {
			planSelectorCoverageepage.coverageOptionpageFunctional(plantype);
		}
	}
	
	@And("^user not selects plan type in coverage options page$")
	public void notselect_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (plantype.isEmpty()) {
			planSelectorCoverageepage.coverageOptionpageerror();
		}
	}
	
	@And("^user select planType and continous the page back to previous page$")
	public void previous_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpageFunctional(inputValues.get("Plan Type"));
	}
	
	@And("^user select planType and Click previous button to check previous page$")
	public void previous_zipcode_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpagePreviousButton(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate elements in Special Needs page$")
	public void elements_special_page() {
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorSpecialneedspage.specialNeedspage();
	}
	
	@And("^user selects SNP options in Special Needs Page")
	public void select_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Positive";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validating error scenario in Special Needs Page")
	public void error_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Negative";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validate elements in doctors page$")
    public void elements_doctor_page() {
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDoctorspage.doctorspageElements();
                    
    }
    
    @And("^user selects doctors in doctors page$")
    public void select_plan_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    String status = "Positive_NextPageName";
                    if (!(doctor.isEmpty())) {
                                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
                    }
    }
    
    @And("^user not selects doctors in doctors page$")
    public void notselect_doctor_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    if (doctor.isEmpty()) {
                                    planSelectorDoctorspage.doctorspageerror();
                    }
    }
    
    @And("^user select doctors and continous the page back from Doctors to previous page$")
    public void previous_doctors_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    String status = "Positive_NextPageName";
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
    }
    
    @And("^user select doctors and Click previous button from Doctors to check previous page$")
    public void previous_travel_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspagePreviousButton(inputValues.get("Doctors"));
    }
    
    @And("^user validating error scenario in doctors Page")
    public void error_doctor_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageerror();             
    }
    
    @And("^user selects Doctors in Doctors page and cancels the selection$")
	public void select_doctors_page_cancelvalidation(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.doctorspageCancel(inputValues.get("Doctors Search Text"), inputValues.get("Multi Doctor"));
	}
    
    @And("^user validate elements in drugs page$")
    public void elements_drugs_page() {
    				PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDrugspage.drugspage();
                    
    }
    
       @And("^user selects skip option in Drug page$")
    public void select_prescription_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    	planSelectorDrugspage.skipDrugs(drug);
                    	
    }
       
       @Then("^user selects add drug option in Drug page$")
   	public void add_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option in Drug page without continue next page$")
      	public void add_drugs_page_WithoutContinue(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
      		planSelectorDrugspage.drugnamesList();
      	}
       
       @Then("^user selects add drug option and cancels the modals in Drug page$")
   	public void add_drugs_page_cancelvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugspageCancel(inputValues.get("Drug Details"));
   	}
       
       @Then("^user validates errors in Drug page$")
   	public void add_drugs_page_errorvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugpagesError(inputValues.get("Drug Details"));
   	}
       
       @Then("^user search and choose a drug in Drug page$")
   	public void choose_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugChoose(inputValues.get("Search Text"),inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option without drugs in Drug page$")
   	public void add_NoDrug_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.continueNextpageZeroDrug();
   	}
       
       @Then("^user selects add drug option and comparing DCE and Drug page$")
      	public void verify_drugs_dce_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugwithDCE();
      	}
      	
      	@Then("^user verify drug list are same in DCE VS Drug page$")
      	public void verify_drugs_dce_vs_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugsDCEvsPRE();
      	}
       
       @Then("^user selects add drug option and verifying the drugs in Drug page$")
     	public void verify_drugs_page(DataTable givenAttributes) {
     		readfeaturedata(givenAttributes);
     		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
     		planSelectorDrugspage.comparingDrugsStartOver();
     	}
    
       @And("^user not selects prescription options in drug page$")
    public void notselect_prescription_opt_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    if (drug.isEmpty()) {
                    	planSelectorDrugspage.drugspageerror();
                    }
    }
       
       @Then("^user search and not found a drug in Drug Page$")
   	public void notfound_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugNotFound(inputValues.get("Search Text"));
   	}
       
   	@Then("^user validate elements in additional services page$")
   	public void elements_additional_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorAdditionalpage.additionalpage(inputValues.get("Drug Selection"));
   	}
   	
	@Then("^user selects additional services option in additional services page$")
   	public void select_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageFunctional(inputValues.get("Additional Option"));
   	}
	
	@Then("^user validates additional services error function in additional services page$")
   	public void noselect_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageerror(inputValues.get("Additional Option"));
   	}

	@Then("^user validate elements in cost preferences page$")
   	public void elements_costpreferences_page() {
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorPreferencespage.costpreferencepage();
   	}
	
	@Then("^user selects cost preferences option in cost preferences page$")
   	public void select_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorPreferencespage.costPreferencepageFunctional(inputValues.get("Preference Option"));
   	}
	
	@Then("^user validates cost preferences error function in cost preferences page$")
	public void noselect_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage = new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String preference = inputValues.get("Preference Option");
		if (preference.isEmpty()) {
			planSelectorPreferencespage.costPreferencepageerror();
		}
	}
	
	@Then("^user validate elements in loading results page$")
   	public void elements_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorResultspage.resultsloadingpage();
   	}
	
	@Then("^user validate recommendations in results page$")
   	public void view_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,false);
   	}
	
	@Then("^user validate tie recommendations in results page$")
   	public void view_tie_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,true);
   	}
	
	@Then("^user validate drugs details from PRE to VPP page$")
	public void view_drugs_PRE_VPP_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.drugsDetailsPREtoVPP();
	}
	
	@Then("^user validate removed drugs details updated from VPP to PRE page$")
	public void view_removed_drugs_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.removedDrugsDetailsVPPtoPRE();
	}
	
	@Then("^user navigate to PRE using StartNow button and verify drugs details in PRE page$")
	public void startnow_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startnowtilldrugs();
	}
	
	@Then("^user proceed page navigation till VPP page after Start Now button$")
	public void view_VPP_StartNow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startNowFullFlow(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate drugs details from DCE to PRE page$")
	public void drugs_DCE_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoPRE();
	}
	
	@Then("^user validate drugs details from VPP to DCE page$")
	public void drugs_VPP_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoDCE(inputValues.get("Drugs Name"));
	}
	
	@And("^user navigates to vpp summary page$")
   	public void navigate_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		planSelectorResultspage.navigateVPP(inputValues);
		checkpopup();
   	}
	
	@Then("^user adds Doctors in vpp summary page$")
   	public void add_providers_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.addProviderVPP(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
//		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user navigate to PRE from vpp page$")
   	public void PRE_VPP_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user clicks on GetStarted button in PRE page$")
   	public void PRE_GetStarted() {
		checkpopup();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
   	}
	
	@Then("^user navigate Doctors lookup session in Doctors page$")
	public void navigate_doctors_lookup_session() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@And("^user verifies doctors session in Doctors page$")
   	public void verify_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyProvidersSession(multiDoctor);
   	}
	
	@And("^user verifies doctors and continue to next page$")
   	public void verify_doctors_continue_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.getcontinue(multiDoctor);
   	}
	
	
	@When("^user navigates to Zip Code page from vpp plans$")
	public void user_navigates_to_zipcode_page_fromvpp_pdp() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.DCEtoPRE();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
	}
	
	@And("^user validte zip info in location page$")
	public void user_validates_zipcodepage(DataTable inputdata) {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		readfeaturedata(inputdata);
		planSelectorhomepage.zipcodeInfoValidation(inputValues);
	}
	
	@And("^user verifies Start Over doctors session in Doctors page$")
   	public void verify_StartOver_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyDoctorsSession(multiDoctor);
   	}
	
	@Then("^user adds Providers in Doctors page$")
	public void add_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.addProvidersPRE(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
	}
	
	@And("^user verifies doctors session in VPP page$")
   	public void verify_doctors_session_vpp_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.verifyProviderPREVPP();
   	}
	
	@Then("^user edits Doctors in Doctors page$")
	public void edit_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.editProvider(inputValues.get("Doctors Search Text1"), inputValues.get("Multi Doctor1"),
				inputValues.get("Doctors Search Text2"), inputValues.get("Multi Doctor2"));
	}
	
	@Then("^user navigates to VPP Summary Page$")
   	public void startNow_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		planSelectorResultspage.countyandViewPlan(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate zipcode and County in location page using StartNow$")
   	public void zipcode_location_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPre();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user navigate to PRE and validate zipcode using Start Over$")
   	public void zipcode_Doc_Drug_pre(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPreStartOver();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate recommendation rankings in results page$")
   	public void verify_rankings_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String recom = inputValues.get("Recommendation");
		String plansorder = inputValues.get("Ranking plans Order");
		planSelectorResultspage.validateRankingPlans(recom,plansorder);
   	}
	
	@Then("^verify continue function on \"([^\"]*)\" page$")
    public void proceed_next_page(String page) {
     PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     commonutli.continueNextpage(page.trim().toUpperCase(),false);
    }
	
	@And("^user verifies existing PRE provider session using startnow$")
   	public void verify_exisitng_pre_doctors_session_doctors_startnow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.verifyExisitngPREDoclist(multiDoctor);
		planSelectorDoctorspage.nextPageNameValidationDoctor();
   	}
	
	@And("^user verifies exisitng PRE drug session using startnow$")
   	public void verify_exisitng_pre_drugs_session_drug_startnow_page() {
		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDrugspage.verifyExisitngPREDruglist();
		planSelectorDrugspage.continueNextpageNameDrug();
   	}
	
	@When("^user validate email plan list from vpp$")
	public void user_sendPlanEmail_fromvpp_pdp(DataTable givenAttributes) {
		checkpopup();
		readfeaturedata(givenAttributes);
		String recom = inputValues.get("Recommendation");
		String email = inputValues.get("EmailID");
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.sendEmail(recom,email);
	}
	
	@Then("^user selects Doctors in Doctors page and validate next page name$")
	public void select_doctors_next_page_name() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@Then("^user validate UI and API recommendation rankings in results page$")
   	public void verify_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	@Then("^user verifies \"([^\"]*)\" page$")
	public void verify_vpp_summary_page_mobile(String VPP) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (VPP.toUpperCase().contains("PRE"))
			planSelectorResultspage.checkVPP(true);
		else
			planSelectorResultspage.checkVPP(false);
	}
	
	@Then("^user validate MA Plan Names in VPP Summary VS Details in results page$")
   	public void verify_MA_Plan_names_results_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate PDP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_PDP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_SNP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan in Enroll page$")
   	public void verify_SNP_Plan_names() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanName();
	}
	
	@Then("^user adds Drugs in vpp summary page$")
   	public void add_drugs_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.useraddDrugsVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user navigate from VPP to DCE tool$")
   	public void vpp_pre() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.userPreDCE();
   	}
	
	@Then("^user validate future vs current UI and API recommendation rankings in results page$")
   	public void verify_Future_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.checkPlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
		planSelectorResultspage.changePlanyear("current");
		// Toggling back and validating as future year only have values stored in storage
		planSelectorResultspage.changePlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	public void checkpopup() {
		if(if_offline_prod && !popup_clicked) {
			PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			popup_clicked = planSelectorhomepage.close_Popup();
		}
	}
	
	@Then("^user validate saved values in edit response page$")
   	public void check_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.editResponsepage(inputValues);
   	}
	
	@Then("^user return to vpp page using \"([^\"]*)\" from edit response page$")
   	public void check_saved_value_editResponse_page(String button) {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.returnVPP(button);
   	}
	
	@Then("^user edits values in edit response page$")
   	public void edit_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.editUserResponse(inputValues);
   	}
	
	@Then("^user adds doctor in edit response page$")
   	public void add_doctor_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDoctorEditResponse(inputValues);
   	}
	
	@Then("^user navigates to edit response page$")
   	public void navigate_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateEditResponsePage(inputValues.get("Plan Type"));
   	}

	@Then("^user edits coverage value in edit response page$")
   	public void edit_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.changeCoverage(inputValues);
   	}
	
	@Then("^user validates coverage value in edit response page$")
   	public void validate_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.checkCoveragevalue(inputValues);
   	}
	
	@Then("^user adds SNP options and Location in edit response page$")
   	public void add_snp_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addSNPEditResponse(inputValues);
		preEditpage.addLocationEditResponse(inputValues);
   	}
	
	@Then("^user selects add drug option in drug page from edit response page$")
   	public void add_drug_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDrugs(inputValues);
   	}
	
	@Then("^user save plans in vpp summary and Validate in Visitor profile page$")
	public void user_verify_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateCombineSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user save 2 MA plans in vpp summary and Validate in Visitor profile page$")
	public void user_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user Validate Drug and Provider details in Visitor profile page$")
	public void user_verify_drug_provider() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateDrugProvider();
	}
	
	@Given("^the user is on external acquisition site landing page$")
	public void the_user_on_external_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE");
		aquisitionhomepage.openExternalLinkPRE(inputValues.get("Site Name"));
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
	@When("^user navigate to Plan Recommendation Engine Tool$")
	public void the_user_external_PRE(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.navigatePRE(inputValues);
	}
	
	@Then("^user selects priority in priorities page$")
	public void user_selects_priorities(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesFunctional(inputValues.get("Priority Option"),inputValues.get("Priorities"));
		priorities.continuePriority();
	}

	@Then("^user validate elements in priorities page$")
	public void user_validate_prioritiesElements() {
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesElements();
	}
	
	@Then("^user validate PDP Plan Names in VPP Details and Click Enroll button in Plan Details page$")
   	public void verify_Plan_names_Enroll_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesAndEnroll();
	}
	
	@When("^user navigate to Drug Cost Estimator page$")
	public void navigate_DCE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToDrugCostEstimatorViaShopTools();
	}
	
	@And("^user validate druglist in Drug Cost Estimator page$")
	public void Druglist_DCE() {
		ACQDrugCostEstimatorPage dceDrugs =  new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dceDrugs.getDruglist();
	}
	
	@Then("^user adds Drugs in Drug Cost Estimator page$")
   	public void add_drugs_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dce.useraddDrugsDCEWithoutVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user validate navigate to Get a Plan Recomendation page$")
	public void navigate_PRE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngine();
	}
	
	@Then("^user save recommendation results and validate in VP$")
   	public void save_results() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.validateSaveResults();
	}
	
	@Then("^user navigate to visitor profile and open PRE Widget$")
    public void pre_Widget_open(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithoutMSPlan(inputValues.get("User Type"));
    }
	
	@And("^user Click on Getstarted in PRE Home Page and Continue till Covergae page$")
    public void I_click_questionnaire_first() {
        PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorhomepage.getStartedContinueZipcode();
    }
	
	@Then("^user select plans in VPP Summary and navigate to Plan Compare page$")
   	public void verify_Plans_compare_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesPlanCompare();
	}
	
	@And("^user validate buttons in SaveResult Model and PRE Widget in VP$")
	public void btn_SaveResult_Widget(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateSaveResultsPage();
		preEditpage.PRESaveResultModelBtn();
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user creates a \"([^\"]*)\" tab from PRE$")
   	public void create_tab(String tabtype) {
		PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		commonutli.creatingTab(tabtype.toUpperCase());
   	}
	
	@Then("^user validate recommendation section in PRE Widget on VP$")
    public void pre_Widget_recom() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.recomPREWidget();
    }
	
	@Then("^user validate a \"([^\"]*)\" buttons from PRE$")
   	public void btn_tab(String tabtype) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.validateLinks(tabtype);
   	}
	
	@Then("^user navigate to visitor profile with saving MS plan$")
    public void Guest_Profile_MSPlan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.SavingMsplan();
		preEditpage.shoppingcartNavigation(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithMSPlan();
    }
	
	@When("^user Sigin visitor profile from PRE$")
	public void sign_vp(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.SignIn(inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user do browser back from current page$")
   	public void browser_back() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.browserBack();
   	}
	
	/////////////////////////////////////////////////////// New Results Page //////////////////////////////
	
	@Then("^user validate elements in PRE results page$")
   	public void elements_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorNewResultspage.preResultsUI(inputValues.get("Zip Code"),inputValues.get("CountyDropDown"));
   	}
	
	@Then("^user validate pagination in PRE results page$")
   	public void pagination_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validatePagination();
		//planSelectorNewResultspage.findPlan();
   	}
	
	@Then("^user validate drugDetails in PRE results page$")
   	public void drugDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"tile");
   	}
	
	@Then("^user validate doctors info in PRE results page$")
   	public void doctorDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"tile");
   	}
	
	@And("^user selects empty doctors in doctors page$")
    public void zeroDoctor_doctor_page(DataTable givenAttributes) throws Throwable {
        readfeaturedata(givenAttributes);
        PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorDoctorspage.addZeroProviders(inputValues.get("Doctors Search Text"));
     }
	
	@Then("^user validate snp info in PRE results page$")
   	public void snpDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateSNPInfo(inputValues.get("SNPInfo"));
   	}
	
	@Then("^user views plan details from results page$")
   	public void viewDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.viewPlanInfo(inputValues.get("planInfo"));
   	}
	
	@Then("^user views learn more from results page$")
   	public void learnMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.learnMore(inputValues.get("Learn More"));
   	}

	@Then("^user validate drugCostModal in PRE results page$")
   	public void drugDetailsModel_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"model");
   	}
	
	@Then("^user validate showmoreDrug in PRE results page$")
   	public void drugShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"show");
   	}
	
	@Then("^user validate showmoreDoctor in PRE results page$")
   	public void doctorShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"show");
   	}
	
	@Then("^the user do poc$")
   	public void poc_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.poc();
   	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:54:32.902
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.902
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.902
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:54:32.907
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1221)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:135)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:32.908
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 14:54:34.675
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.data.CommonConstants;
import acceptancetests.util.CommonUtility;
import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;
import pages.acquisition.commonpages.VPPPlanSummaryPage;

public class PlanRecommendationEngineResultsPage extends GlobalWebElements {

	public PlanRecommendationEngineResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}
	
	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsInVPP;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	ArrayList<String> werallyResults = new ArrayList<String>();
	ArrayList<String> vppResults = new ArrayList<String>();		
	ArrayList<String> vppProviderResults = new ArrayList<String>();
	ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationResults1 = new ArrayList<String>();
	ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
	PlanRecommendationEngineEditResponsePage editRes = new PlanRecommendationEngineEditResponsePage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

//Result Page Elements
	String Browsername = MRScenario.browsername;
	
	@FindBy(css = "a[dtmname*='Shop For a Plan']")
	private WebElement headerNavigationBarShopForaPlanTab;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='drug-cost-estimator']")
    private WebElement headerDrugcostLink;
	
	@FindBy(linkText = "Provider Search")
    private WebElement headerProvidersearchLink;
	
	@FindBy(css = "#uhc-footer div[class*='d-none d-lg-block'] a[href*='plan-recommendation-engine']")
    private WebElement headerGetaPlanRecommendationLink;
	
	@FindBy(css = "#selectCounty p>a")
    private List<WebElement> selectMultiZip;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-plan-compare-box']")
    private List<WebElement> MAPlansCompareBox;
   
    @FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div[class*='new-compare-box-msg'] button")
    private List<WebElement> MAPlansCompareButton;
   
    @FindBy(css = "#compare-table div[class*='flex'][class*='scope']>div[class*='flex']>div")
    private List<WebElement> planNamesOnlyComparepage;
	
	@FindBy(css = ".plan-overview-wrapper>div[class='overview-main'] h2")
	private WebElement planZipInfo;
	
	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;
	
	@FindBy(css = "span.title small")
	private WebElement planname;

	@FindBy(css = ".plan-overview-wrapper div.plan-recommendation-summary")
	private WebElement planBasedInfo;

	@FindBy(css = "div[data-rel='#plan-list-1']")
	private WebElement MAPlanInfo;
	
	@FindBy(css = "a#change-location")
	private WebElement changeZIPVPP;

	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-drug")
	private WebElement enterDrugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .edit-drugs a")
	private WebElement drugSummarylinkMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> MAPlansId;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a.add-provider")
	private WebElement enterProvidersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='drug-list-title']")
	private WebElement drugsInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='DrugName']")
	private List<WebElement> drugsListMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) a[id*='provider-title']")
	private WebElement providersInfoMA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) div[id*='ProviderName'] span:nth-child(1)")
	private List<WebElement> providersListMA1stPlan;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MA1stPlan;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3")
	private List<WebElement> MAPlansName;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview")
	private List<WebElement> MAPlansNames;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement MA1stPlanName;

	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement MA1stPlanEnroll;
	
	@FindBy(css = "div[data-rel='#plan-list-2']")
	private WebElement MSPlanInfo;
	
	@FindBy(css = "div[data-rel='#plan-list-2'] span.ng-binding")
	private WebElement MSPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-2'] a")
	private WebElement MSViewPlansLink;

	@FindBy(css = "#msVppDOB")
	private WebElement MSPlanDOB;

	@FindBy(xpath = "//form/div/div[@class='inputcomponent section'][3]//label[contains(text(),'Female')]")
	private WebElement MSPlanGender;

	@FindBy(css = "#mpaed-month")
	private WebElement MSPlanPartAMonth;

	@FindBy(css = "#mpaed-year")
	private WebElement MSPlanPartAYear;

	@FindBy(css = "#mpbed-month")
	private WebElement MSPlanPartBMonth;

	@FindBy(css = "#mpbed-year")
	private WebElement MSPlanPartBYear;

	@FindBy(css = "#msVppdpsd")
	private WebElement MSPlanStartMonth;

	@FindBy(css = "button[class*='viewPlans']")
	private WebElement MSViewPlanButton;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement MS1stPlan;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(1) h2")
	private WebElement MS1stPlanName;

	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) .swiper-content .apply-button")
	private WebElement MS1stPlanEnroll;
	
	@FindBy(css = "#mainBody .swiper-container .module-plan-overview:nth-of-type(2) #responsiveplan .status-bar img.unliked")
	private WebElement MS1stPlanSaveImg;
	
	@FindBy(css = "div[data-rel='#plan-list-3']")
	private WebElement PDPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-3'] span.ng-binding")
	private WebElement PDPPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "#plan-list-3 a.emailsummary")
	private WebElement pdpemailList;
	
	@FindBy(css = "#plan-list-1 a.emailsummary")
	private WebElement maemailList;

	@FindBy(css = "#plan-list-4 a.emailsummary")
	private WebElement snpemailList;
	
	@FindBy(css = "#emailPlanSummaryPopUp #email")
	private WebElement emailText;
	
	@FindBy(css = "#emailPlanSummaryPopUp button[type='submit']")
	private WebElement emailSendButton;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp p")
	private WebElement emailSuccess;
	
	@FindBy(css = "#emailPlanSummarySuccessPopUp button[class*='close-popup']")
	private WebElement emailCloseButton;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement PDP1stPlan;

	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement PDP1stPlanName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansId;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview:nth-of-type(1) .enrollment>div>a")
	private WebElement PDP1stPlanEnroll;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview h3")
	private List<WebElement> PDPPlansName;
	
	@FindBy(css = "#plan-list-3 .swiper-container .module-plan-overview")
	private List<WebElement> PDPPlansNames;
	
	@FindBy(css = "div[data-rel='#plan-list-4']")
	private WebElement SNPPlanInfo;

	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1)")
	private WebElement SNP1stPlan;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) h3")
	private WebElement SNP1stPlanName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview h3")
	private List<WebElement> SNPPlansName;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview")
	private List<WebElement> SNPPlansNames;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview div.plan-name-div")
	private List<WebElement> SNPPlansId;

	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview:nth-of-type(1) .enroll-details>a:nth-of-type(2)")
	private WebElement SNP1stPlanEnroll;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h2[contains(text(),'Need Help?')]")
	private WebElement needhelptxt;
	
	@FindBy(xpath = "//div[@class='uhc-container']//h4[contains(text(),'Need Help?')]")
	private WebElement needhelptxtMS;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)")
	private WebElement ViewPlanDetailsButton;
	
	@FindBy(css = ".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)")
	private WebElement EnrollPlanButton;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview h3>a")
	private List<WebElement> MAPlanNames;
	
	@FindBy(css = "#plan-list-1 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> MAPlansSaveIcon;
	
	@FindBy(css = "#plan-list-3 .swiper-wrapper .module-plan-overview a[class*='favorite-plan']:nth-child(1) span[class*='unliked']")
	private List<WebElement> PDPPlansSaveIcon;
	
	@FindBy(css = "#plan-list-4 .swiper-container .module-plan-overview a[id*='savePlan']")
	private List<WebElement> SNPPlansSaveIcon;
	
	@FindBy(css = "#pop-btn-1 span")
	//	@FindBy(css = ".modal-footer #popupClose")
	private WebElement keepshoppingPlansBtn;
	
	@FindBy(css = "#pop-btn-2 span")
	private WebElement ViewSavedBtn;
	
	@FindBy(css = ".flyout-heart-icon")
	private WebElement heartIcon;
	
	@FindBy(css = "#guest-saved-items-button a ")
	private WebElement viewSavedItemsBtn;
	
// Provider and Drug Details in Plan Type
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview")
	private  List<WebElement> MA1stPlanList;
	
	@FindBy(css = "#plan-list-1 div.module-plan-overview:nth-child(1) .drugs-list div[class*='drug-info-container']")
	private  List<WebElement> DrugsNames;
	
	@FindBy(css = "a#selector")
	private  WebElement StartNowButton;

// Start Over Popup
	
	@FindBy(css = "#plan-list-1 .plan-list-content #editMyAnswers")
	private  WebElement StartOverButton;
	
	@FindBy(css = "#startoverdetails")
	private  WebElement StartOverDetails;
	
	@FindBy(css = "#startOverContent")
	private  WebElement StartOverContent;
	
	@FindBy(css = "#closestartoverpopup")
	private  WebElement closeButton;
	
	@FindBy(css = "#startoverPopUp button[class*='cta-button sendbtn']")
	private  WebElement startOverButtoninPopup;
	
	@FindBy(xpath = "//*[contains(@class,'get-started-banner')]//button[contains(text(),'Get Started')]")
	private WebElement getStartedBtn;
	
	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;
	
	@FindBy(css = "input#zipcodemeded-0")
	private WebElement homePageZiptxt;
	
	@FindBy(css = "#ghn_lnk_1>span")
	private WebElement headerNavigationBarHomeTab;
	
	@FindBy(css = "button[class*='uhc-zip-button']")
	private WebElement homePageFindPlans;
	
//Zipcode Page
	
	@FindBy(xpath = "//*[@id='zip-code']")
	private WebElement zipCode;
	
	@FindBy(css = "#selectCounty")
	private WebElement multiCountyDialog;
	
	@FindBy(css = "#selectCounty p a")
	private  List<WebElement> multiCounty;
	
	@FindBy(id = "zipInfo")
	private WebElement countyInfo;
	
	@FindBy(id = "MultipleCounty")
	private WebElement multiCountyInfo;
	
// VPP Details page
	
	@FindBy(css = ".uhc-container div.content h2")
	private WebElement planNameVPPDetailsPage;
	
	@FindBy(id = "backToPlanSummaryTop")
	private WebElement backtoPlanSummary;
	
	@FindBy(css = ".uhc-container a[class*='back-to-plans']")
	private List<WebElement> backtoProfile;
	
	@FindBy(css = ".segment h2")
	private WebElement planNameEnrollPage;
	
	@FindBy(css = "label[for='currentYear']")
	private WebElement currentPlanYear;
	
	@FindBy(css = "label[for='futureYear']")
	private WebElement futurePlanYear;
	
	@FindBy(css = "input#futureYear[class*='selected']")
	private WebElement futurePlanYearSelected;
	
	@FindBy(css = "input#currentYear[class*='selected']")
	private WebElement currentPlanYearSelected;
	
	@FindBy(css = "#highlights a[class*='cta-button']:nth-child(1)")
	private List<WebElement> enrollBtnPlanDetails;
	
	@FindBy(css = "button#enrollment-next-button")
	private WebElement nxtBtnOLEPage;
	
	// Visitor profile elements

		@FindBy(css = "div h3[class*='plan-name']")
		private List<WebElement> planNamesVisitorPrf;

		@FindBy(css = ".planTileSection .visitingProfileContainer h3")
		private WebElement MSPlanSection;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan")
		private List<WebElement> MSPlansCount;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title h2")
		private List<WebElement> MSPlanName;

		@FindBy(css = ".planTileSection .userProfileMedSuppPlan .saved-plancard-title button.remove-icon")
		private List<WebElement> MSPlanRemoveIcon;

		@FindBy(css = "#navLinks a:nth-child(1)")
		private WebElement BacktoPlansLink;

		@FindBy(css = "#saved-drugs")
		private WebElement DrugCount;

		@FindBy(css = "#saved-doctors h3")
		private WebElement ProviderCount;

		@FindBy(css = ".drugs-list li")
		private List<WebElement> Druglist;

		@FindBy(css = "button[aria-describedby*='removeDrugName']")
		private WebElement DrugRemove;

		@FindBy(css = ".doctors-list li")
		private List<WebElement> Providerlist;

		@FindBy(css = ".callout-find-plans button[class*='uhc-button--secondary']>span")
		private WebElement Addplans;

		@FindBy(css = ".uhc-profile-header-nav li:nth-child(4) span:nth-of-type(2)")
		private WebElement PRESection;

		@FindBy(css = "#saved-plan-recommendations h2")
		private WebElement SavedRecomTitle;

		@FindBy(css = "#saved-plan-recommendations h3")
		private WebElement PRETitleinVP;

		@FindBy(css = "#saved-plan-recommendations button")
		private WebElement GetStartedButton;

		@FindBy(css = "#saved-plan-recommendations img")
		private WebElement PREImage;

		@FindBy(css = ".subheading-text a")
		private WebElement EditMyResponsesLink;

		@FindBy(css = "div.uhc-pre-card")
		private List<WebElement> RecommendationSection;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) p#planType")
		private WebElement FirstRecommendationSectionPlanType;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card .uhc-pre-card__label")
		private WebElement FirstRecommendationSectionTag;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card h3")
		private WebElement FirstRecommendationSectionPlanName;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) a[class*='plan-details-link']")
		private WebElement FirstRecommendationSectionViewPlanDetails;
		
		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(1) .uhc-pre-card button")
		private WebElement FirstRecommendationSectionEnrollToPlanButton;

		@FindBy(css = "div[class*='row-collapse']:nth-child(4) div:nth-child(2) a.pre-action-link")
		private WebElement ViewRankedListOfPlanLinks;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(1)")
		private WebElement PREWidgetParaTalktoExpert;

		@FindBy(css = "#saved-plan-recommendations p:nth-child(3) span")
		private WebElement PREWidgetCallNum;
		
		@FindBy(css = ".segment h2")
		private WebElement planNameinOLE;
		
		@FindBy(css = ".planNameMinHeight h2")
		private WebElement planNameinPlanDetailsPage;
	
// External page elements
	
	@FindBy(css = ".c-card__footer a[class*='primary']")
	private WebElement GetHelpFindingaPlanBtn;
	
	@FindBy(css = ".c-card__footer a[class*='naked']")
	private WebElement HelpMeChooseBtn;
	
	@FindBy(css = ".c-banner__cta>a")
	private WebElement startNowBtn;
	
	
	// New Results Page
		@FindBy(css = "uhc-plan-info a")
		private List<WebElement> allPlansID;
		
//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation, 30);
		validate(loadingImage, 30);
	}
	
//Results Page Element Verification Method	
	
	public void resultsUI(String zip,String county,String R1,String R2, boolean tie) {
		System.out.println("Validating Results UI Page: ");
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		String recom = "Recommended";
		String recom1 = "#1 Recommendation";
		String recom2 = "#2 Recommendation";
		if (tie == false) {
			Assert.assertTrue(planBasedInfo.getText().toUpperCase().contains("BASED"),"Text box is not availabe");
			checkRecommendationCount(R1, recom1, R2, recom2);
			validateRecommendations(R1, recom1, R2, recom2);
			validateRecommendationPlan(R1);
		} else {
			if (R1.isEmpty()) {
				checkTieRecommendationCount("", recom1, "");
			} else if (R2.isEmpty()) {
				checkTieRecommendationCount(R1, recom1, "");
				validateRecommendations(R1, recom1, "", "");
			} else {
				 checkTieRecommendationCount(R1, recom, R2);
				 validateRecommendations(R1, recom, R2, recom);
			 }
		}
	}
	
	public void recomPREWidget() {
		System.out.println("Validating Recommendation on UI Page: ");
		pageloadcomplete();
		String R1 = "";
		String R1PlanType = editRes.planType;
		String R1PlanName = editRes.firstRecomPlanName;
		if(R1PlanType.contains("Prescription Drug Plans")) 
			R1 = "PDP";
		else if(R1PlanType.contains("Advantage Plans"))
			R1 = "MA";
		else if(R1PlanType.contains("Special Needs Plans"))
			R1 = "SNP";
		else
			R1 = "MS";
		waitForPageLoadSafari();
		String recom1 = "#1 Recommendation";
			validateRecommVP(R1, recom1, R1PlanName);

	}

	public void validateRecommVP(String R1, String rcom1, String R1PlanName) {
		System.out.println("Validating Recommendations in Visitor Profile Page");
		
		// Verify 1st Recommendation in PRE Widget
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"MA Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MA PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"PDP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "PDP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "SNP PlanName Invalid");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(FirstRecommendationSectionTag.getText().trim().equalsIgnoreCase(rcom1),
					"SNP Invalid Recommendations");
			Assert.assertTrue(FirstRecommendationSectionPlanName.getText().trim()
					.equalsIgnoreCase(R1PlanName), "MS PlanName Invalid");
		}
	}
		
		
	
	
	public void validateRecommendations(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Validating Recommendations in Results Page");
		if (R1.equalsIgnoreCase("MA")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Advantage"));
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom1), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("MS")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Supplement"));
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom1), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Prescription Drug"));
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom1), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");
		}
		if (R1.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(planBasedInfo.getText().contains("Medicare Special Needs"));
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom1), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
		// Verify 2nd Recommendation
		if (R2.equalsIgnoreCase("MA")) {
			Assert.assertTrue(MAPlanInfo.getText().contains(rcom2), "MA Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MAPlanCount.getText()) > 0, "MA Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("MS")) {
			Assert.assertTrue(MSPlanInfo.getText().contains(rcom2), "MS Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(MSPlanCount.getText()) > 0, "MS Plan count is less than 1");
		}
		if (R2.equalsIgnoreCase("PDP")) {
			Assert.assertTrue(PDPPlanInfo.getText().contains(rcom2), "PDP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(PDPPlanCount.getText()) > 0, "PDP Plan count is less than 1");	
		}
		if (R2.equalsIgnoreCase("SNP")) {
			Assert.assertTrue(SNPPlanInfo.getText().contains(rcom2), "SNP Invalid Recommendations");
			Assert.assertTrue(Integer.parseInt(SNPPlanCount.getText()) > 0, "SNP Plan count is less than 1");
		}
	}
	
	public void checkRecommendationCount(String R1, String rcom1, String R2, String rcom2) {
		System.out.println("Verifying Recommendation counts");
		int R1Count = 0, R2Count = 0;
		if (MAPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MSPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(PDPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(SNPPlanInfo.getText().contains(rcom1))
			R1Count++;
		if(MAPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(MSPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(PDPPlanInfo.getText().contains(rcom2))
			R2Count++;
		if(SNPPlanInfo.getText().contains(rcom2))
			R2Count++;
		Assert.assertTrue(R1Count == 1, "#1Recommendation presents more than once");
		if (R2.isEmpty() || R2 == "")
			Assert.assertTrue(R2Count == 0, "#2Recommendation presents");
		else
			Assert.assertTrue(R2Count == 1, "#2Recommendation presents more than once or not available");
	}

	public void validateRecommendationPlan(String R1) {
		String currentPageUrl = driver.getCurrentUrl();
		boolean isDSNP=true;
		if (R1.equalsIgnoreCase("MA")) {
//			MAViewPlansLink.click();
			validate(MA1stPlanName, 60);
//			Assertion.assertTrue(MA1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()), "MA Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MA1stPlanEnroll);
//			clickEnrolldesktop(MA1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("MS")) {
//			MSViewPlansLink.click();
			submitMSform();
			validate(MS1stPlanName, 60);
//			Assertion.assertTrue(MS1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"MS Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(MS1stPlanEnroll);
			clickEnrolldesktop(MS1stPlanEnroll,needhelptxtMS);
		}
		if (R1.equalsIgnoreCase("PDP")) {
//			PDPViewPlansLink.click();
			validate(PDP1stPlanName, 60);
//			Assertion.assertTrue(PDP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"PDP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(PDP1stPlanEnroll);
//			clickEnrolldesktop(PDP1stPlanEnroll);
		}
		if (R1.equalsIgnoreCase("SNP")) {
//			SNPViewPlansLink.click();
			validate(SNP1stPlanName, 60);
//			Assertion.assertTrue(SNP1stPlanName.getText().toUpperCase().contains(plan.toUpperCase()),"SNP Invalid Plan Ranking");
			//mobileUtils.mobileLocateElementClick(SNP1stPlanEnroll);
			if(SNP1stPlanName.getText().toUpperCase().contains("D-SNP")) 
				clickEnrolldesktop(SNP1stPlanEnroll,needhelptxt);
			else
				isDSNP=false;
		}
		threadsleep(5000);
		pageloadcomplete();
		if(isDSNP)
			Assert.assertTrue(currentPageUrl != driver.getCurrentUrl(), "Enroll Plan URL is not working");
	}
	
// Filling MS form with default value
		public void submitMSform() {
			//Zip value is pre-populated by default
			MSPlanDOB.sendKeys("01/06/1940");
			jsClickNew(MSPlanGender);
			threadsleep(8000);
			jsClickNew(MSPlanGender);
			threadsleep(3000);							//E2E: Added for the overlay to disappear after selecting a option
			Select temp = new Select(MSPlanPartAMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartAYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBMonth);
			temp.selectByVisibleText("January 1");
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanPartBYear);
			temp.selectByVisibleText(nxtYear);
			threadsleep(2000);							//E2E: Added for the overlay to disappear after selecting a option
			temp = new Select(MSPlanStartMonth);
			temp.selectByVisibleText("January 1, " + nxtYear);
			jsClickNew(MSViewPlanButton);
		}
		
		int Year = Integer.parseInt(getCurrentYear()) +1;
		String nxtYear = Integer.toString(Year);
		public String getCurrentYear() {
			DateFormat dateFormat = new SimpleDateFormat("mm/dd/yyyy");
			Date date = new Date();
			String curDate = dateFormat.format(date);
			return curDate.split("/")[2];
		}

		public void clickEnrolldesktop(WebElement enrollButton,WebElement needhelp) {
			boolean click = false;
			for (int i = 0; i < 5; i++) {
				try {
					validate(enrollButton, 5);
					jsClickNew(enrollButton);
					click = true;
					break;
				} catch (Exception e) {
					System.out.println("Unable to enroll");
				}
			}
			Assert.assertTrue(click, "Unable to click the Enroll button");
		}
		
		public void checkTieRecommendationCount(String R1, String rcom, String R2) {
			int RCount = 0;
			if (MAPlanInfo.getText().contains(rcom))
				RCount++;
			if (MSPlanInfo.getText().contains(rcom))
				RCount++;
			if (PDPPlanInfo.getText().contains(rcom))
				RCount++;
			if (SNPPlanInfo.getText().contains(rcom))
				RCount++;
			if(R1=="")
				Assert.assertTrue(RCount == 0, "Recommendation Count is not equal to Zero");
			else if(R2=="")
				Assert.assertTrue(RCount == 1, "Recommendation Count is not equal to One");
			else
				Assert.assertTrue(RCount == 2, "Recommendation is not equals to Two");
		}
		
		public void navigateVPP(HashMap<String, String> inputdata) {
            validate(headerNavigationBarHomeTab,20);
            jsClickNew(headerNavigationBarHomeTab);
            String zipcode =inputdata.get("Zip Code");
            validate(homePageZiptxt,60);
            homePageZiptxt.sendKeys(zipcode);
            jsClickNew(homePageFindPlans);
            if (inputdata.get("Is Multi County").equalsIgnoreCase("yes")) {
                if (selectMultiZip.get(0).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(0).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(0));
                else if (selectMultiZip.get(1).getText().toUpperCase().contains(inputdata.get("CountyDropDown").toUpperCase()))
                    selectMultiZip.get(1).click();
                // mobileUtils.mobileLocateElementClick(selectMultiZip.get(1));
            }
            validate(planZipInfo, 60);
            waitforElementInvisibilityInTime(planLoaderscreen,60);
            threadsleep(5000);// Plan loader
            Assert.assertTrue(planZipInfo.getText().contains(inputdata.get("Zip Code")),"Invalid Zip");       
            jsClickNew(MAViewPlansLink);
            pageloadcomplete();
            waitForPageLoadSafari();
        }
		
		public void drugsDetailsPREtoVPP() {
			System.out.println("Validating PRE Drugs Details in VPP Page Plan Type: ");
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			verifyConfirmationmodalResults(count,DrugsInPRE,DrugsList);
			validate(drugSummarylinkMA1stPlan, 60);
			jsClickNew(drugSummarylinkMA1stPlan);
		}
		
		public void removedDrugsDetailsVPPtoPRE() {
			System.out.println("Validating removed Drugs Details from VPP to PRE Drug Page: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
			boolean remove = true;
			int count =DrugsInPRE.size();
			drugsCoveredInVPP(count);
			removeDrugs(count);
			vppToPre();
			validateDrugPage(flow, true);
		}
		
		public void startnowtilldrugs() {
			System.out.println("Navigating to PRE Using StartNow: ");
			flow = CommonConstants.PRE_FLOW.get(String.valueOf(Thread.currentThread().getId()));//PlanRecommendationEngineStepDefinition.PREflow;
			vppToPre();
			validateDrugPage(flow, false);
		}
		
		public void DrugsDetailsVPPtoPRE() {
			System.out.println("Validating Drugs Details from DCE to VPP Drug Page: ");
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			if(validate(MAViewPlansLink, 60))
				jsClickNew(MAViewPlansLink);
			int count = Integer.parseInt(MA1stPlanList.get(0).findElement(By.cssSelector("a[id*='drug-list-title']")).getText().trim().split(" drugs")[0].split("of ")[1]);
					//Druglist.size();
			DrugsInVPP = drugsCoveredInVPP(count);
//			DrugsInDCE = dce.getDrugNamesDCE();
			DCEtoPRE();
		}
		
		public void DrugsDetailsVPPtoDCE(String drugsList) {
			ArrayList<String> drugsName = new ArrayList<String>();
			ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
			System.out.println("Navigating to DCE Page: ");
			vppToDCE();
			dce.clickDCEAddDrugBtn();
			System.out.println("Validating Drugs Details from VPP to DCE Page: ");
			DrugsInDCE = dce.getDrugNamesDCE();
			int count =DrugsInDCE.size();
			String[] strSplit = drugsList.split(":");
			for(String drug:strSplit)
				drugsName.add(drug.toUpperCase());
			Collections.sort(drugsName);
			System.out.println("DrugList in DCE: "+drugsName);
			verifyConfirmationmodalResults(count,DrugsInDCE,drugsName);
		}
		
	
		public void removeDrugs(int count) {
			// By default removing 2nd drug
    		int beforeRemove = DrugsList.size();
    		threadsleep(5000);
    		drugcoveredsession();
//    		DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")).click();
    		jsClickNew(DrugsNames.get(count-1).findElement(By.cssSelector("button[class*='remove-icon']")));
    		threadsleep(8000);
//    		drugcoveredsession();
    		pageloadcomplete();
    		drugcoveredsession();
    		drugsCoveredInVPP(count-1);
    		int afterRemove = DrugsList.size();
    		if(beforeRemove!=afterRemove) {
    			System.out.println("Remove Results Count mismatch");
    			
    		}else {
    			System.out.println("Remove Results Count matching and Remove is not removed");
    			Assert.assertTrue(false);
    		}
		}
		
		public ArrayList<String> drugsCoveredInVPP(int count) {
			System.out.println("Clicking on Drugs Details in Plan Type: "+count);
			DrugsList = new ArrayList<String>();
			validate(MAPlanCount,60);			
			WebElement drugImageVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle'] img"));
			validate(drugImageVPP,20);
			threadsleep(5000);
			drugcoveredsession();
			for (int i = count-1; i >= 0; i--) {
				threadsleep(1000);
				DrugsList.add(DrugsNames.get(i).findElement(By.cssSelector("div[class*='flex-col drug-info'] span:nth-child(1)")).getText().trim().toUpperCase() );
				WebElement RemoveIcon = DrugsNames.get(i).findElement(By.cssSelector("button[class*='remove-icon']"));
				WebElement coveredIcon = MA1stPlanList.get(i).findElement(By.cssSelector(".drugs-list div[id*='Covered']"));
				validate(RemoveIcon,20);
				validate(coveredIcon,20);
			}
			Collections.sort(DrugsList);
			jsClickNew(drugCoveredeVPP);
			System.out.println("DrugsList Size is : "+DrugsList.size());
			System.out.println("DrugList Content is : "+DrugsList);
			return DrugsList;
		}
		
		public void drugcoveredsession() {
			drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='drug-list-toggle']"));
			jsClickNew(drugCoveredeVPP);
		}
		
		public void verifyConfirmationmodalResults(int count,ArrayList<String> drug,ArrayList<String> drugListVPP) {
    		if(drug.size()==drugListVPP.size() && count==drug.size()) {
    			String druglist =drug.toString().toUpperCase();
    			String vppdruglist =drugListVPP.toString();
    			if(druglist.contains(vppdruglist)) {
    				System.out.println("Drug and Modal Result's Content matched");
    			}
    			else {
    				System.out.println("Drug and Modal Result's Content mismatch");
    				Assert.assertTrue(false);
    			}
    		}
    		else {
    			System.out.println("Drug and Modal Results Count mismatch");
    			Assert.assertTrue(false);
    		}
    	}
		
		public void vppToDCE() {
			System.out.println("Validating VPP to DCE Page");
			scrollToView(headerDrugcostLink);
			headerDrugcostLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("drug-cost-estimator"), "Page is not navigated to DCE");		
		}
		
		public void DCEtoPRE() {
			System.out.println("Navigating to PRE Page");
			scrollToView(headerGetaPlanRecommendationLink);
			headerGetaPlanRecommendationLink.click();
			pageloadcomplete();
			Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/get-started"), "Page is not navigated to PRE");		
		}
		
	public void vppToPre() {
		System.out.println("Validating VPP to PRE Page");
		validate(StartNowButton,20);
		jsClickNew(StartNowButton);
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	

	public void validateDrugPage(String plan,boolean removedrug) {
		System.out.println("Validating Drugs in Drug Page");
//		getStartedBtn.click();
		jsClickNew(getStartedBtn);
		threadsleep(2000);
		int MAPD = 6;
		int PDP = 3;
		int None = 6;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
				waitForPageLoadSafari();
			}
		}
		if(removedrug==true) {
			DrugsList = DrugsList;	
		}else {
			DrugsList = drug.drugNames;
		}
		ModelDrugsList = drug.drugnamesList();
		System.out.println("DrugsList Size is : "+DrugsList.size());
		System.out.println("ModelDrugsList Size is : "+ModelDrugsList.size());
		verifyConfirmationmodalResults(DrugsList.size(), DrugsList,ModelDrugsList);
	}
	
	public void startNowFullFlow(String plan) {
		System.out.println("Validating Start Now Full flow in PRE");
		int MAPD = 1;
		int PDP = 2;
		int None = 1;
		if(plan.equalsIgnoreCase("MAPD")) {
			for(int i=0;i<MAPD;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("None")) {
			for(int i=0;i<None;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}else if(plan.equalsIgnoreCase("PDP")) {
			for(int i=0;i<PDP;i++) {
//				continueBtn.click();
				jsClickNew(continueBtn);
				threadsleep(2000);
				pageloadcomplete();
			}
		}
	}
	
	PlanRecommendationEngineDoctorsPage docdesktop = new PlanRecommendationEngineDoctorsPage(driver);
	int count = 1;
	int locationCount = 1;
	
	public void addProviderVPP(String name,String multi) {
//		MAViewPlansLink.click();
		String curdriverhandle = driver.getWindowHandle();
//		enterProvidersInfoMA1stPlan.click();
		jsClickNew(enterProvidersInfoMA1stPlan);
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else if(multi.equalsIgnoreCase("Multi"))
			locationCount = 5;	
		werallyResults=docdesktop.validateLinksanotherWindow(curdriverhandle, "Doctors", name, count, locationCount);	
		ArrayList<String> vppResults = getProvidersVPP();
		Assert.assertTrue(vppResults.size()==count*locationCount,"Providers count mismatch in VPP");
	}
	
	public ArrayList<String> getProvidersVPP() {
		threadsleep(5000);
		pageloadcomplete();
//		providersInfoMA1stPlan.click();
		scrollToView(providersInfoMA1stPlan);
		jsClickNew(providersInfoMA1stPlan);
		vppProviderResults = new ArrayList<String>();
		for(WebElement e:providersListMA1stPlan) {
			vppProviderResults.add(e.getText().trim());
		}	
		return vppProviderResults;
	}
	
	public void verifyProviderVPP() {
		containsname(werallyResults,vppProviderResults);
	}
	
	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result,"Providers name mismatch");
		return result;
	}
	
	public void getProvidersPRE(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		confirmationResults1=docdesktop.getConfimationPopupResults(count);
		System.out.println("confirmationResults1 Size is : "+confirmationResults1.size());
	}
	
	public void verifyProvidersSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		docdesktop.verifyConfirmationmodalResults(count, werallyResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void verifyDoctorsSession(String multi) {
		if(multi.equalsIgnoreCase("Yes"))
			count = 3;
		else
			count =1;
		confirmationResults = docdesktop.confirmationResults;
		System.out.println("confirmationResults Size is : "+confirmationResults.size());
		verifyConfirmationmodalResults(confirmationResults1.size(), confirmationResults, confirmationResults1);
		docdesktop.nextPageValidationDoctor();
	}
	
	public void navigatePRE() {
//		StartNowButton.click();
		jsClickNew(StartNowButton);
		pageloadcomplete();
		Assert.assertTrue(driver.getCurrentUrl().contains("plan-recommendation-engine.html"));
		//driver.navigate().refresh();
		//pageloadcomplete();
	}

	public void verifyProviderPREVPP() {
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
		getProvidersVPP();
		containsname(PlanRecommendationEngineDoctorsPage.confirmationProviderResults,vppProviderResults);
	}
	
	public void countyandViewPlan(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode in Results UI Page: ");
		validate(headerNavigationBarHomeTab,20);
		jsClickNew(headerNavigationBarHomeTab);
		validate(homePageZiptxt,60);
		homePageZiptxt.sendKeys(zip);
		jsClickNew(homePageFindPlans);
		pageloadcomplete();
		if(isMultiCounty.equalsIgnoreCase("YES")) {
			validate(multiCountyDialog);
			selectFromDropDown(multiCounty, county);
		}
		validate(planZipInfo,60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		Assert.assertTrue(planZipInfo.getText().contains(zip),"Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[2])>0,"Total Plan count is less than 1");
		jsClickNew(MAViewPlansLink);
		pageloadcomplete();
	}
	
	public void validateZipcodePage(String zip,String county, String isMultiCounty) {
		System.out.println("Validating Zipcode and County in location Page");
		jsClickNew(getStartedBtn);
		pageloadcomplete();
		Assert.assertTrue(zipCode.getAttribute("ng-reflect-model").contains(zip),"Invalid Zip");
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			validate(countyInfo,20);
			Assert.assertTrue(countyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");}
		else {
			validate(multiCountyInfo,20);
			Assert.assertTrue(multiCountyInfo.getText().toUpperCase().contains(county.toUpperCase()),"Invalid County");
		}
		jsClickNew(continueBtn);
		
	}
	
	public void vppToPreStartOver() {
		System.out.println("Validating VPP to PRE Page Clicking on Start Over Button");
		validate(StartOverButton,20);
		jsClickNew(StartOverButton);
		startOverPopup();
		pageloadcomplete();
		waitForPageLoadSafari();
	}
	
	public void startOverPopup() {
		System.out.println("Validating Start Over Popup elements");
		validate(StartOverDetails,20);
		validate(StartOverContent,20);
		validate(closeButton,20);
		validate(startOverButtoninPopup,20);
		jsClickNew(startOverButtoninPopup);
	}
	
	public void validateRankingPlans(String Recom,String plans) {
		System.out.println("Validating Plans Ranking : ");
		plansLoader();
		if (Recom.equalsIgnoreCase("MA")) {
			validate(MA1stPlanName, 60);
			verifyRankings(MAPlansName,plans);
		}
		if (Recom.equalsIgnoreCase("MS")) {
			submitMSform();
			validate(MS1stPlanName, 60);
			Assert.assertTrue(false,"MS Plans ranking is not Implemented");
		}
		if (Recom.equalsIgnoreCase("PDP")) {
			validate(PDP1stPlanName, 60);
			verifyRankings(PDPPlansName,plans);
			}
		if (Recom.equalsIgnoreCase("SNP")) {
			validate(SNP1stPlanName, 60);
		}
	}
	
	public void plansLoader() {
		pageloadcomplete();
		validate(planLoaderscreen, 60);
		waitforElementInvisibilityInTime(planLoaderscreen,60);
		threadsleep(5000);// Plan loader
	}
	
public void verifyRankings(List<WebElement> plansName, String plansOrder) {
		
		String givenPlans[] = plansOrder.split(":");
		// List<String> userPlans = Arrays.asList(givenPlans);
		List<String> vppPlans = new ArrayList<String>();
		// System.out.println(userPlans);
		// System.out.println(userPlans.size());
		System.out.println(plansName.size());
		for (WebElement e : plansName)
			vppPlans.add(getplanName(e));
		for (int i = 0; i < givenPlans.length; i++) {
			Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(givenPlans[i].toUpperCase()),
					"Invalid Plan Ranking/Recommendation type : " + vppPlans.get(i) + "<-> " + givenPlans[i]);
		}
		System.out.println("Plan Ranking Successful");
	}

public String getplanName(WebElement plan) {
	String planName = "";
	int i = 0;
	while (i < 5) {
		planName = plan.getText().trim();
		System.out.println(planName);
		if (planName.isEmpty()) {
			mobileswipeHorizantal("80%", 1, false);
			i++;
		} else
			break;
	}
	Assert.assertTrue(planName.length()>1, "--- Unable to get the Plan name ---");
	return planName;
}

public void sendEmail(String plan, String email) {
	System.out.println("Email Plan list from VPP : ");
//	plansLoader();
	if (plan.equalsIgnoreCase("PDP")) {
		jsClickNew(pdpemailList);
	} else if (plan.equalsIgnoreCase("MA")) {
		jsClickNew(maemailList);

	} else if (plan.equalsIgnoreCase("SNP")) {
		jsClickNew(snpemailList);

	} else {
		Assert.assertTrue(false, "Print Email is not configured for the given Plan :" + plan);
	}
	emailText.sendKeys(email);
	jsClickNew(emailSendButton);
	validate(emailSuccess,15);
	jsClickNew(emailCloseButton);
}

public void validateUIAPIRecommendations() {
	System.out.println("Validating UI vs API Plans Recommendation : ");
//	plansLoader();

	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationResults");
	String MAPriority = getAPIPlansRecommendation(rankingJSON, "MA");
	String MSPriority = getAPIPlansRecommendation(rankingJSON, "MS");
	String PDPPriority = getAPIPlansRecommendation(rankingJSON, "PDP");
	String SNPPriority = getAPIPlansRecommendation(rankingJSON, "SNP");
	String R1 = "", R2 = "";
	int totalcount = 0;
	if (MAPriority.length() == 1) {
		totalcount++;
		if (MAPriority.equals("1"))
			R1 = "MA";
		else
			R2 = "MA";
	}
	if (MSPriority.length() == 1) {
		totalcount++;
		if (MSPriority.equals("1"))
			R1 = "MS";
		else
			R2 = "MS";
	}
	if (PDPPriority.length() == 1) {
		totalcount++;
		R1 = "PDP";
	}
	if (SNPPriority.length() == 1) {
		totalcount++;
		R1 = "SNP";
	}

	if (totalcount > 2)
		Assert.assertTrue(false, "Recommendation Count should not exceeds 2");

	String recom = "Recommended";
	String recom1 = "#1 Recommendation";
	String recom2 = "#2 Recommendation";
	if (R1.equals("1") && R2.equals("2"))
		validateRecommendations(R1, recom1, R2, recom2);
	if (R1.length() == 1 && R2.length() == 0)
		validateRecommendations(R1, recom1, "", "");
	if (R1.equals(R2) && R1.length() == 1)
		validateRecommendations(R1, recom, R2, recom);
	System.out.println("API vs UI Plan Recommendation Successful");
}	

public void validateUIAPIRankingPlans() {
	System.out.println("Validating UI vs API Plans Ranking on PRE results page: ");
	waitforResultsPage();
	String rankingJSON = returnDriverStorageJS("Session Storage", "ucp_planRecommendationObj");
	List<String> APIRankings = getAPIPlansRanking(rankingJSON);
	if (APIRankings.size() > 0) {
		verifyAPIRankings(allPlansID, APIRankings);
	}
}

public void waitforResultsPage() {
	pageloadcomplete();
	waitForPageLoadSafari();
	validate(planZipInfo, 60);
	threadsleep(3000);
}

public List<String> getAPIPlansRanking(String rankingJSON) {
	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	JSONObject jsonObject = null;
	try {
		//jarray = (JSONArray) parser.parse(rankingJSON);
		jsonObject = (JSONObject) parser.parse(rankingJSON);;
		jarray = (JSONArray) jsonObject.get("plans");
		System.out.println("API Plans Count "+jarray.size());
		for (int i = 0; i < jarray.size(); i++) {
			// System.out.println(jarray.get(i));
			for(int j=0;j< jarray.size();j++)
			{
			JSONObject jsonObj = (JSONObject) jarray.get(j);
			// String playtype = (String) jsonObj.get("planType");
			// System.out.println("playtype : " + playtype);
			// String apiRank = (String) jsonObj.get("rank");
			// System.out.println("Rank : " + apiRank);
			// String planID = (String) jsonObj.get("planId");
			// System.out.println(planID);
			if(((String)jsonObj.get("rank")).equalsIgnoreCase(String.valueOf(i+1))) {
				rankingOrder.add((String) jsonObj.get("planId"));
				break;
			}
			}
		}
	} catch (ParseException e) {
		e.printStackTrace();
	}
	System.out.println(rankingOrder);
	Assert.assertTrue(rankingOrder.size() == jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public List<String> getAPIPlansRanking(String rankingJSON, String givenPlanType) {

	List<String> rankingOrder = new ArrayList<String>();
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();;
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);

	for (int i = 0; i < jarray.size(); i++) {
		// System.out.println(jarray.get(i));
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		// System.out.println("playtype : " + playtype);

		if (playtype.equalsIgnoreCase(givenPlanType)) {
			String priority = (String) jsonObj.get("priority");
			System.out.println("priority : " + priority);
			jarray = (JSONArray) jsonObj.get("planResponses");
			System.out.println("Total Plans : " + jarray.size());
			if (jarray.size() == 0)
				break;
			for (int j = 0; j < jarray.size(); j++) {
				System.out.println(jarray.get(j));
				jsonObj = (JSONObject) jarray.get(j);
				String apiRank = (String) jsonObj.get("rank");
				System.out.println("Rank : " + apiRank);

				if (Integer.parseInt(apiRank) == j + 1) {
					String planID = (String) jsonObj.get("planId");
					System.out.println(planID);
					rankingOrder.add((String) jsonObj.get("planId"));
				}
				else {
					System.out.println("JSON Ranking Order changed finding accurate Rank...");
					for (int k = 0; k < jarray.size(); k++) {
						//System.out.println(jarray.get(k));
						jsonObj = (JSONObject) jarray.get(k);
						apiRank = (String) jsonObj.get("rank");
						//System.out.println("Rank : " + apiRank);
						if (Integer.parseInt(apiRank) == j + 1) {
							String planID = (String) jsonObj.get("planId");
							System.out.println(planID);
							rankingOrder.add((String) jsonObj.get("planId"));
							break;
						}
					}
				}
			}
			break;
		}
	}
	Assert.assertTrue(rankingOrder.size()==jarray.size(), "API ranking count is not in sync with plans count");
	return rankingOrder;
}


public String getAPIPlansRecommendation(String rankingJSON, String givenPlanType) {
	JSONParser parser = new JSONParser();
	JSONArray jarray = new JSONArray();
	try {
		jarray = (JSONArray) parser.parse(rankingJSON);
	} catch (ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	JSONObject jsonObj = new JSONObject();
	String recom = "";
	//System.out.println(jarray.size());
	System.out.println("GivenPlanType : " + givenPlanType);
	for (int i = 0; i < jarray.size(); i++) {
		jsonObj = (JSONObject) jarray.get(i);
		String playtype = (String) jsonObj.get("planType");
		if (playtype.equalsIgnoreCase(givenPlanType)) {
			recom = (String) jsonObj.get("priority");
			System.out.println("priority : " + recom);
			break;
		}
	}
	return recom.trim();
}

public void verifyAPIRankings(List<WebElement> plansId, List<String> APIRankings) {
	
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansId.size());
	for (WebElement e : plansId)
		vppPlans.add(getplanId(e));
	for (int i = 0; i < APIRankings.size(); i++) {
		Assert.assertTrue(vppPlans.get(i).toUpperCase().contains(APIRankings.get(i).toUpperCase()),
				"Invalid Plan Ranking between API and UI : " + vppPlans.get(i) + "<-> " + APIRankings.get(i));
	}
	System.out.println("API vs UI Plan Ranking Successful");
}

public String getplanId(WebElement plan) {
	String planName = "";
	String planId="";
	planName = plan.getText().trim();
	planId = plan.getAttribute("href").split("planId=")[1].split("&")[0].trim();
	//System.out.println("UI Plan Name : "+planName);
	Assert.assertTrue(planId.length()>1, "--- Unable to get the Plan Id ---");
	System.out.println("UI Plan ID : "+planId);
	return planId;
}

public void checkVPP(boolean isPREVPP) {
	if (isPREVPP) {
		try {
			validate(changeZIPVPP, 20);
			System.out.println(changeZIPVPP.getText());
			Assert.assertTrue(false, "Not an Expected PRE->VPP page");
		} catch (Exception e) {
			System.out.println("PRE VPP page displayed");
		}
	} else {
		try {
			System.out.println(planBasedInfo.getText().toUpperCase().contains("BASED"));
			Assert.assertTrue(false, "Not an Expected VPP page");
		} catch (Exception e1) {
			validate(changeZIPVPP, 30);
			System.out.println(changeZIPVPP.getText());
		}
	}
}

public void validateMAPlanNamesSummaryAndDetails() {
	System.out.println("Validating MA Plan Names in result pages : ");
	plansLoader();
	int maPlanCount = Integer.parseInt(MAPlanCount.getText());
	System.out.println(maPlanCount);
	validate(MA1stPlanName, 60);
	verifyPlanNames(MAPlansName, maPlanCount);
	verifyviewplanDetails(MAPlansName, maPlanCount);
	verifyEnrollDetails(MAPlansName, maPlanCount);	
	}

public void validatePDPPlanNamesSummaryAndDetails() {
	System.out.println("Validating PDP Plan Names in result pages : ");
	plansLoader();
	PDPViewPlansLink.click();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	verifyviewplanDetails(PDPPlansName, pdpPlanCount);
	verifyEnrollDetails(PDPPlansName, pdpPlanCount);
	plansLoader();
}

public void validateSNPPlanNamesSummaryAndDetails() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	SNPViewPlansLink.click();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyPlanNames(SNPPlansName, snpPlanCount);
	verifyviewplanDetails(SNPPlansName, snpPlanCount);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}

public void validateSNPPlanName() {
	System.out.println("Validating SNP Plan Names in result pages : ");
	plansLoader();
	int snpPlanCount = Integer.parseInt(SNPPlanCount.getText());
	System.out.println(snpPlanCount);
	validate(SNP1stPlanName, 60);
	verifyEnrollDetails(SNPPlansName, snpPlanCount);
}


public void verifyPlanNames(List<WebElement> plansName, int maPlanCount) {
	List<String> vppPlans = new ArrayList<String>();
	System.out.println(plansName.size());
	for(int i=0;i<maPlanCount;i++) {
			vppPlans.add(verifygetplanName(plansName.get(i)));
	}		
	System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

public String verifygetplanName(WebElement plan) {
	String actualplanName = "";
	scrollToView(plan);
	String exceptedplanName = plan.getText().trim();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	plan.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	return actualplanName;
}

public String verifyviewplanDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
	scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("#viewmoredetlinkpdp"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(1)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.contains(actualplanName), "--- Plan name are not matches---");
	backtoPlanSummary.click();
	pageloadcomplete();
	}
	System.out.println("Plan Name compared Successful Clicks on View Plan Details");
	return actualplanName;
}

public String verifyEnrollDetails(List<WebElement> plansName, int PlanCount) {
	WebElement planViewdetailsBut = null;
	String actualplanName = "";
	String exceptedplanName = "";
	for(int i=0;i<PlanCount;i++) {
		
		if(i>=1) {
			if(actualplanName.contains("PDP"))
				PDPViewPlansLink.click();
			else if ((actualplanName.contains("SNP")) || (actualplanName.contains("Medicare Advantage")))
				break;
		}
		scrollToView(plansName.get(i));
    exceptedplanName = plansName.get(i).getText().trim();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    if(exceptedplanName.contains("SNP"))
    	planViewdetailsBut = SNPPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
    else if(exceptedplanName.contains("PDP"))
    	planViewdetailsBut = PDPPlansNames.get(i).findElement(By.cssSelector("div.enrollment span"));
    else
    	planViewdetailsBut = MAPlansNames.get(i).findElement(By.cssSelector(".enroll-details a[dtmid='cta_acq_plans_landing']:nth-of-type(2)"));
	planViewdetailsBut.click();
	pageloadcomplete();
	actualplanName = planNameEnrollPage.getText().trim(); 
	System.out.println("Plan Name in Plan Enroll Page: "+actualplanName);
	Assert.assertTrue(actualplanName.contains(exceptedplanName), "--- Plan name are not matches---");
//	backtoPlanSummary.click();
	browserBack();
	threadsleep(10000);
	try {
        WebDriverWait wait = new WebDriverWait(driver, 2);
        if(wait.until(ExpectedConditions.alertIsPresent())==null) 
        	System.out.println("alert was not present");
        else {
        	Alert alert = driver.switchTo().alert();
	        alert.accept();
	        System.out.println("alert was present and accepted");
        }
        
    } catch (Exception e) {
        //exception handling
    }
	}
	System.out.println("Plan Name compared Successful Clicks on Enroll Plan");
	return actualplanName;
}

public void browserBack() {

	driver.navigate().back();
	plansLoader();
}

public void useraddDrugsVPP(String drugDetails) {
	threadsleep(10000);
	userPreDCE();
	ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage(driver);
	dce.drugsHandlerWithdetails(drugDetails);
	dce.getDrugsDCE();
	dce.choosePharmacyandBacktoPlans();
}

public void userPreDCE() {
	if(validate(MAViewPlansLink,15) ) {
		MAViewPlansLink.click();
	}
	threadsleep(10000);
	drugCoveredeVPP = MA1stPlanList.get(0).findElement(By.cssSelector("a[class*='add-drug']"));
	jsClickNew(drugCoveredeVPP);
}

public boolean changePlanyear(String year) {
	threadsleep(5000);
	jsClickNew(MAViewPlansLink);
	// Checking and Changing to Current Year
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			jsClickNew(currentPlanYear);
			Assert.assertTrue(currentPlanYearSelected.getAttribute("id").length()>0,"Current Plan Year is not Selected");
			threadsleep(10000);
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			jsClickNew(futurePlanYear);
			Assert.assertTrue(futurePlanYearSelected.getAttribute("id").length()>0,"Future Plan Year is not Selected");
			threadsleep(5000);
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public boolean checkPlanyear(String year) {
	// Checking Current year selection
	try {
		//MAViewPlansLink.click();
		jsClickNew(MAViewPlansLink);
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15) && currentPlanYearSelected.getAttribute("id").length()>0) {
			return true;
		}
	}
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15) && futurePlanYearSelected.getAttribute("id").length()>0) {
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is not available / not selected");
		}
	}
	}catch(Exception e) {
		System.out.println("Exception Occcured Plan year toggle");
	}
	return false;
}


@FindBy(xpath = "//div[@class='switch-field ng-scope']//label[@class='ng-binding'][contains(text(),'2020 plans')]")
private WebElement  CurrentYearPlansBtn;

public VPPPlanSummaryPage handlePlanYearSelectionPRE(String planYear) {

	CommonUtility.checkPageIsReadyNew(driver);			
		if(planYear.equalsIgnoreCase("current")) {				// if the scenario is for current year
			if(validate(CurrentYearPlansBtn, 20)) {
				System.out.println("*****CLICKING ON Current Year button*****: "+CurrentYearPlansBtn.getText());
				jsClickNew(CurrentYearPlansBtn);
				CommonUtility.checkPageIsReadyNew(driver);
			}
		}
		return null;
		
}
public void validateSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	saveplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	validate(ViewSavedBtn);
	ViewSavedBtn.click();
	verifySavePlans(year, vppPlans);
}

ArrayList<String> comboPlanNames = new ArrayList<String>();
public void validateCombineSavePlan(String year) {
	System.out.println("Validate PRE Save Plans functionality : ");
	int saveplans = 2;
	threadsleep(5000);
	validate(PDPViewPlansLink);
	PDPViewPlansLink.click();
	savecomboplans(PDPPlansName,saveplans, year, PDPPlansSaveIcon);
	validate(keepshoppingPlansBtn);
	keepshoppingPlansBtn.click();
	threadsleep(3000);
	scrollToView(MAViewPlansLink);
	threadsleep(2000);
	MAViewPlansLink.click();
	savecomboplans(MAPlanNames,saveplans, year, MAPlansSaveIcon);
	threadsleep(3000);
	scrollToView(SNPViewPlansLink);
	threadsleep(2000);
	SNPViewPlansLink.click();
	savecomboplans(SNPPlansName,1, year, SNPPlansSaveIcon);
	Collections.sort(comboPlanNames);
	System.out.println(comboPlanNames);
	scrollToView(heartIcon);
	validate(heartIcon);
	heartIcon.click();
	validate(viewSavedItemsBtn);
	viewSavedItemsBtn.click();
	verifySavePlans(year, comboPlanNames);
	verifyPlansVPandPDP(planNamesVisitorPrf);
}

public void viewplanLink(List<WebElement> plansName) {
	if(plansName.get(0).getText().equalsIgnoreCase("Medicare Advantage")) {
		threadsleep(3000);
		scrollToView(MAViewPlansLink);
		validate(MAViewPlansLink);
		MAViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("MedicareRx")) {
		threadsleep(3000);
		scrollToView(PDPViewPlansLink);
		validate(PDPViewPlansLink);
		PDPViewPlansLink.click();
	}else if(plansName.get(0).getText().equalsIgnoreCase("UnitedHealthcare")) {
		threadsleep(3000);
		scrollToView(SNPViewPlansLink);
		validate(SNPViewPlansLink);
		SNPViewPlansLink.click();
	}
}
ArrayList<String> vppPlans = new ArrayList<String>();
public ArrayList<String> saveplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		vppPlans.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	Collections.sort(vppPlans);
	System.out.println(vppPlans);
	threadsleep(3000);
	return vppPlans;
}
public ArrayList<String> savecomboplans(List<WebElement> plansName, int saveplans,	String year, List<WebElement> savePlan) {
	System.out.println("Plans Count :" +plansName.size());
	threadsleep(3000);
	for (int plan = 0; plan < saveplans; plan++) {
		comboPlanNames.add(savingplans(plansName.get(plan), savePlan.get(plan)));
	}
	threadsleep(3000);
	return comboPlanNames;
}

public void verifySavePlans(String year, ArrayList<String> vppPlans) {
	threadsleep(3000);
	changePlanyearVisitorProfile(year);
	visitorprofile(planNamesVisitorPrf, vppPlans);
	System.out.println("Plan Name compared Successful Clicks on Save Plan");
}

public void verifyPlansVPandPDP(List<WebElement> plansName) {
	System.out.println("Plan Name in VP Page: " + plansName);
	String actualplanName = "";
	String exceptedplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		exceptedplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		plansName.get(i).click();
		threadsleep(30000);
		actualplanName = planNameVPPDetailsPage.getText().split("\n")[0];
		System.out.println("Plan Name in VPP Details Page: "+actualplanName);
		Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
		backtoProfile.get(0).click();
		pageloadcomplete();
	}
	System.out.println("Plan Names successfully validated Visitor Profile VS VPP Details Page ");
}

public String savingplans(WebElement plan, WebElement saveplan) {
	scrollToView(plan);
	String exceptedplanName = plan.getText();
	System.out.println("Plan Name in VPP Summary Page: " + exceptedplanName);
	String save = saveplan.getText().trim();
	if (save.equalsIgnoreCase("Save") || save.equalsIgnoreCase("Save Plan")) { 
		threadsleep(3000);
		saveplan.click();
//		jsClickNew(saveplan);
	}
	threadsleep(5000);
	return exceptedplanName;
}

public boolean changePlanyearVisitorProfile(String year) {
	// Checking Current year selection
	if (year.equalsIgnoreCase("current")) {
		if (validate(currentPlanYear, 15)) {
			currentPlanYear.click();
			Assert.assertTrue(currentPlanYear.getAttribute("class").length() > 0,
					"Current Plan Year is not Selected");
			return true;
		}
	}

	// Checking and Changing Future Year
	if (year.equalsIgnoreCase("future")) {
		if (validate(futurePlanYear, 15)) {
			futurePlanYear.click();
			Assert.assertTrue(futurePlanYear.getAttribute("class").length() > 0,
					"Future Plan Year is not Selected");
			return true;
		} else {
			Assert.assertTrue(false, "Future Plan Year Toggle is Needed");
		}
	}
	return false;
}

public void visitorprofile(List<WebElement> plansName, List<String> vppPlans) {
	System.out.println("Plan Name in VPP Page: " + vppPlans);
	String actualplanName = "";
	pageloadcomplete();
	System.out.println(plansName.size());
	for (int i = 0; i < plansName.size(); i++) {
		actualplanName = plansName.get(i).getText().trim();
		System.out.println("Plan Name in Visitor Profile Page: " + actualplanName);
		Assert.assertTrue(vppPlans.contains(actualplanName), "--- Plan name are not matches---");
	}
}

public void validateDrugProvider() {
	System.out.println("Validate Drug and provider details in VP ");
	ArrayList<String> vpdrugs = new ArrayList<String>();
	ArrayList<String> vpProviders = new ArrayList<String>();
	DrugsInPRE = PlanRecommendationEngineDrugsPage.drugNames;
	DocInPRE = PlanRecommendationEngineDoctorsPage.confirmationResults;
	scrollToView(DrugCount);
	int drgcount =  Integer.parseInt(DrugCount.getText().trim().replace(")", "").replace("(", "").split("&")[0].split("Drugs")[1].trim());
	for(int i=0; i<drgcount;i++) {
		vpdrugs.add(Druglist.get(i).findElement(By.cssSelector("div[id*='DrugName-noplan']")).getText().trim()
				.toUpperCase() + " "
				+ Druglist.get(i).findElement(By.cssSelector("div[id*='DrugQuantityFrequency-noplan']")).getText().trim().replace("per ", "").replace(", refill", "").toUpperCase());
	}
	Collections.sort(vpdrugs);
	System.out.println(vpdrugs);
	verifyConfirmationmodalResults(drgcount,DrugsInPRE,vpdrugs);
//	Assertion.assertTrue(vpdrugs.contains(drugs.toUpperCase()), "--- Drug name are not matches---");
	threadsleep(3000);
	
	int prdcount =  Integer.parseInt(ProviderCount.getText().trim().replace(")", "").replace("(", "").split("Providers")[1].trim());
	for(int i=0; i<prdcount;i++) {
		vpProviders.add(Providerlist.get(i).findElement(By.cssSelector("div[id*='ProviderName-noplan']")).getText().toUpperCase());
	}
	Collections.sort(vpProviders);
	System.out.println(vpProviders);
	verifyConfirmationmodalResults(prdcount,DocInPRE,vpProviders);
//	Assertion.assertTrue(vpProviders.contains(doctors.toUpperCase()), "--- Doctors name are not matches---");
	threadsleep(3000);
	System.out.println("Drug and provider details successfully validated in VP ");
	System.out.println("Validate Pharamacy details in VP ");
	Pharmacytype();
	scrollToView(Addplans);
	jsClickNew(Addplans);
	threadsleep(8000);
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-summary"), "--- VPP Summary not loaded---");
}

public void Pharmacytype() {
	threadsleep(5000);
	int count = Druglist.size();
	Assert.assertTrue(Druglist.get(count-1).findElement(By.cssSelector("span")).getText().trim().contains("OptumRx Mail Service Pharmacy"), "Pharmacy is not default online");    			
}

public void navigatePRE(HashMap<String, String> inputdata) {
	System.out.println("Validate Drug and provider details in VP ");
	String curWindow = driver.getWindowHandle();
	String site = inputdata.get("Site Name");
	System.out.println(curWindow);
	if (site.equalsIgnoreCase("Myuhcplans")) {
		validate(GetHelpFindingaPlanBtn);
		GetHelpFindingaPlanBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcandwellmedsa")) {
		validate(HelpMeChooseBtn);
		HelpMeChooseBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("mauhcmedicaresolutions") || site.equalsIgnoreCase("maaarpmedicareplans")) {
		validate(startNowBtn);
		startNowBtn.click();
		PREStage(curWindow, site);
	}
	if (site.equalsIgnoreCase("uhcmedicaresolutions") || site.equalsIgnoreCase("aarpmedicareplans")) {
		navigateVPP(inputdata);
		vppToPre();
		PREStage(curWindow, site);
	}
}

public void PREStage(String primaryWindow, String aarp) {
	ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
	System.out.println(windows);
	if (windows.size() == 2) {
		for (String window : windows) {
			System.out.println(window.replace("CDwindow-", ""));
			if (!window.equals(primaryWindow)) {
				driver.switchTo().window(window);
				System.out.println(driver.getCurrentUrl());
				Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html"), "PRE is not loading");
			}
			if(aarp.contains("aarpmedicareplans")) {
				driver.navigate().to("https://www.stage-aarpmedicareplans.uhc.com/plan-recommendation-engine.html");
			}
			else
				driver.navigate().to("https://www.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
				driver.navigate().to("https://steelcase.stage-uhcmedicaresolutions.uhc.com/plan-recommendation-engine.html");
			}
	}
	threadsleep(5000);
//	driver.switchTo().window(primaryWindow);
}

public void validatePDPPlanNamesAndEnroll() {
	System.out.println("Validating PDP Plan Names in Details pages : ");
	plansLoader();
	int pdpPlanCount = Integer.parseInt(PDPPlanCount.getText());
	System.out.println(pdpPlanCount);
	validate(PDP1stPlanName, 60);
	String exceptedplanName = PDPPlansName.get(0).getText().split("\n")[0].trim().toUpperCase();
	System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
	WebElement planViewdetailsBut = PDPPlansNames.get(0).findElement(By.cssSelector("#viewmoredetlinkpdp"));
	planViewdetailsBut.click();
	pageloadcomplete();
	String actualplanName = planNameVPPDetailsPage.getText().split("\n")[0].toUpperCase();
	System.out.println("Plan Name in VPP Details Page: "+actualplanName);
	Assert.assertTrue(exceptedplanName.equalsIgnoreCase(actualplanName), "--- Plan name are not matches---");
	enrollBtnPlanDetails.get(0).click();
	pageloadcomplete();
	String planNameinOLE = planNameEnrollPage.getText().trim().toUpperCase(); 
	System.out.println("Plan Name in Plan Enroll Page: "+planNameinOLE);
	Assert.assertTrue(planNameinOLE.contains(exceptedplanName), "--- Plan name are not matches---");	
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "OLE page not loaded");
	nxtBtnOLEPage.click();
	System.out.println(driver.getCurrentUrl());
	Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/steps"), "OLE page not loaded");
}

public void validateMAPlanNamesPlanCompare() {
    System.out.println("Validating MA Plan Names in plan compare pages : ");
    plansLoader();
    int maPlanCount = 2;
    System.out.println(maPlanCount);
    validate(MA1stPlanName, 60);
    verifyPlanNamesComparePage(MAPlansName, maPlanCount,MAPlansCompareBox);
    }

 

public void verifyPlanNamesComparePage(List<WebElement> plansName, int maPlanCount,List<WebElement> plansNameCompare) {
    List<String> vppPlans = new ArrayList<String>();
    List<String> comparepagePlans = new ArrayList<String>();
    System.out.println(plansName.size());
    for(int i=0;i<maPlanCount;i++) {
            vppPlans.add(verifyplanNameCompare(plansName.get(i), plansNameCompare.get(i)));
    }
    MAPlansCompareButton.get(0).click();
    pageloadcomplete();
    Assert.assertTrue(driver.getCurrentUrl().contains("plan-compare"),"Page is not navigated to Plan Compare page");
    JavascriptExecutor js = (JavascriptExecutor) driver;
    for (WebElement elem : planNamesOnlyComparepage) {
        String planName = (String) js.executeScript("return arguments[0].innerText;", elem);
        String val = planName.trim().toUpperCase();
        comparepagePlans.add(val);
    }
    System.out.println("Original Plan Orders" + comparepagePlans);
    vppPlans.equals(comparepagePlans);
    System.out.println("Plan Name compared Successful Clicks on Plan Name");
}

 

public String verifyplanNameCompare(WebElement plan,WebElement planCompare) {
    scrollToView(plan);
    String exceptedplanName = plan.getText().trim().toUpperCase();
    System.out.println("Plan Name in VPP Summary Page: "+exceptedplanName);
    planCompare.click();
    pageloadcomplete();
    return exceptedplanName;
}

public void ValidatePREWithoutMSPlan(String userType) {
	System.out.println("Checking PRE widget in VP without MS Plan saving...");
	validate(PRESection, 30);
	PRESection.click();
	if (userType.equalsIgnoreCase("Guest")) {
		validate(SavedRecomTitle, 30);
		validate(PRETitleinVP, 30);
		validate(GetStartedButton, 30);
		validate(PREImage, 30);
	} else {
		validate(SavedRecomTitle, 30);
		validate(PREImage, 30);
		validate(EditMyResponsesLink, 30);
	}
}

public void ValidatePREWithMSPlan() {
	System.out.println("Checking PRE widget in VP with MS Plan saving...");
	if (!validate(PRESection, 30) || !validate(SavedRecomTitle, 30)) {
		System.out.println("PRE widget is not displaying in VP...");
		removeMSplaninVP();
	} else
		System.out.println("PRE widget is displaying in VP. Since its not having MS Plan...");

}

public void removeMSplaninVP() {
	System.out.println("Deleting MS Plan in VP");
	threadsleep(3000);
	if (validate(MSPlanSection, 20)) {
		scrollToView(MSPlanSection);
		int MScount = MSPlansCount.size();
		for (int i = 0; i < MScount; i++) {
			MSPlanName.get(i).getText();
			MSPlanRemoveIcon.get(i).click();
			threadsleep(2000);
		}
	} else
		System.out.println("MS Plan not found in VP");
}

public void SavingMsplan() {
	System.out.println("Saving MS plan in PRE...");
	if (validate(MSViewPlansLink)) {
		MSViewPlansLink.click();
		threadsleep(5000);
	}
	submitMSform();
	threadsleep(2000);
	validate(MS1stPlanSaveImg, 20);
	MS1stPlanSaveImg.click();
}

public boolean click_ViewPlanLink(WebElement plantype) {
	boolean viewlink_presents = false;
	System.out.println("Checking viewlink Status...");
	if(validate(plantype, 20)) {
		threadsleep(1000);
		jsClickNew(plantype);
		threadsleep(1000);
		viewlink_presents = true;
	}
	return viewlink_presents;
}

public void validateLinks(String function) {
	if(function.equalsIgnoreCase("EditMyResponse button")) {
	validate(EditMyResponsesLink, 10);
	EditMyResponsesLink.click();
	Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html/editMyPreferences"), "***Edit My Response Page Not Opened***");
	}else if(function.equalsIgnoreCase("Enroll In Plan")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionEnrollToPlanButton, 10);
		FirstRecommendationSectionEnrollToPlanButton.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("online-application.html/welcome"), "***OLE Page Not Opened***");
		Assert.assertTrue(planNameinOLE.getText().trim().contains(planName), "PlanName Invalid in OLE");
	}else if(function.equalsIgnoreCase("View Plan Details")) {
		String planName = FirstRecommendationSectionPlanName.getText().trim();
		validate(FirstRecommendationSectionViewPlanDetails, 10);
		FirstRecommendationSectionViewPlanDetails.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/details"), "***Plan Details Page Not Opened***");
		Assert.assertTrue(planNameinPlanDetailsPage.getText().trim().contains(planName), "PlanName Invalid in PlanDetailsPage");
	}else if(function.equalsIgnoreCase("View ranked list of plans")) {
		validate(ViewRankedListOfPlanLinks, 10);
		ViewRankedListOfPlanLinks.click();
		Assert.assertTrue(driver.getCurrentUrl().contains("/plan-recommendation-engine.html#/result"), "***PRE-Result Page Not Opened***");
	}
}


}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:54:34.678
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:34.678
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:34.679
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:54:34.681
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:34.681
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 14:54:39.416
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.html5.SessionStorage;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.util.CommonUtility;
import atdd.framework.UhcDriver;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.VPPPlanSummaryPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.mobile.acquisition.planrecommendationengine.DoctorsMobilePage;
import pages.mobile.acquisition.planrecommendationengine.DrugMobilePage;

public class PlanRecommendationEngineNewResultsPage extends UhcDriver {

	public PlanRecommendationEngineNewResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	/*
	 * // Doctors FLow
	 * 
	 * Access to doctors participating in the UnitedHealthcare Medicare Network -
	 * True only
	 * 
	 * Access to in-network costs when you see doctors participating in the
	 * UnitedHealthcare Medicare Network - True only
	 * 
	 * Medicare
	 * 
	 * UnitedHealthcare local or National Network required - True and false
	 * 
	 * See any provider nationwide that accepts Medicare Patients and access to
	 * in-network costs when you see doctors participating in the UnitedHealthcare
	 * Medicare Network
	 * 
	 * See any provider1 nationwide that accepts Medicare Patients and access to
	 * in-network costs when you see doctors participating in the UnitedHealthcare
	 * Medicare national Network
	 * 
	 * No: You haven't added any doctors yet. If you would like to add your doctors,
	 * please use the "Edit Your Responses" button at the top of the page
	 */

	@Override
	public void openAndValidate() {
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

	// Result Page Elements

	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;

	@FindBy(css = "div[class*='resultsPre'] h1")
	private WebElement planZipInfo;

	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;

	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;

	@FindBy(css = ".view-ms-plans a")
	private WebElement viewMSPlans;

	@FindBy(css = "label[for*='recommendSort']")
	private WebElement sortByLabel;

	@FindBy(css = "#recommendSort option")
	private List<WebElement> sortByOptions;

	// Pagination

	@FindBy(css = ".returnSection button.buttonLink")
	private WebElement returnToBeginning;

	@FindBy(css = ".returnSection span#viewMorePlans")
	private WebElement pagenoLabel;

	@FindBy(css = ".paginationSection button[class*='view-plans-next']")
	private WebElement pageNextButton;

	@FindBy(css = ".paginationSection button[class*='view-plans-next disabled']")
	private WebElement pageNextButtonDisabled;

	@FindBy(css = ".paginationSection button[class*='view-plans-prev']")
	private WebElement pagePreviousButton;

	@FindBy(css = ".paginationSection button[class*='view-plans-prev disabled']")
	private WebElement pagePreviousButtonDisabled;

	// Plan Tile Elements

	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;

	@FindBy(css = "#modal")
	private WebElement drugModel;

	@FindBy(css = "#modal button")
	private WebElement drugModelClose;

	// Bottom Result page Elements

	@FindBy(css = "div[class*='resourcesSection'] h2")
	private WebElement resourcesTitle;

	@FindBy(css = ".moreAboutPlansSection h2")
	private WebElement moreAboutPlanTypesTitle;

	@FindBy(css = ".moreAboutPlansSection p")
	private WebElement moreAboutPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] .accordion-title h3")
	private WebElement mapdPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] span[class*='accordion-arrow'] svg")
	private WebElement mapdPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] p")
	private WebElement mapdPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] a")
	private WebElement mapdPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] .accordion-title h3")
	private WebElement madsupPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] span[class*='accordion-arrow'] svg")
	private WebElement madsupPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] p")
	private WebElement madsupPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] a")
	private WebElement madsupPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] .accordion-title h3")
	private WebElement pdpPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] span[class*='accordion-arrow'] svg")
	private WebElement pdpPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] p")
	private WebElement pdpPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] a")
	private WebElement pdpPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] .accordion-title h3")
	private WebElement dsnpPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] span[class*='accordion-arrow'] svg")
	private WebElement dsnpPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] p")
	private WebElement dsnpPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] a")
	private WebElement dsnpPlanTypesLearnmoreLink;

	// Plan details page

	@FindBy(css = "div.content h2")
	private WebElement planNameDetailsPage;

//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation);
		validate(loadingImage);
	}

//Results Page Element Verification Method	

	public void waitforResultsPage() {
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo, 60);
		threadsleep(1000);
	}

	public void preResultsUI(String zip, String county) {
		System.out.println("Validating PRE Results UI Page: ");
		waitforResultsPage();
		Assert.assertTrue(planZipInfo.getText().contains(zip), "Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()), "Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[4]) > 0, "Total Plan count is less than 1");
		Assert.assertTrue(validate(editYourResponse, 60), " Issue in Edit Your Response button");
		Assert.assertTrue(validate(saveYourResults, 60), " Issue in Save Your Results button");
		Assert.assertTrue(validate(viewMSPlans, 60), " Issue in View MS Plans button");
		// Assert.assertTrue(sortByLabel.getText().contains("Sort By :"), "Invalid Sort
		// Text");
		// Assert.assertTrue(resourcesTitle.getText().contains("Resources"), "Invalid
		// Resources Text");
		Assert.assertTrue(moreAboutPlanTypesTitle.getText().contains("More About Plan Types"),
				"Invalid More About Plan Types Text");
		// scrollToView(moreAboutPlanTypesTitle);
		validate(moreAboutPlanTypesPara, 60);
		Assert.assertTrue(mapdPlanTypesTitle.getText().contains("Medicare Advantage Plans (Part C)"),
				"Invalid MAPD Text. Returned value " + mapdPlanTypesTitle.getText());
		validate(mapdPlanTypesPara, 60);
		Assert.assertTrue(mapdPlanTypesLearnmoreLink.getText().contains("Learn More About"),
				"Learn More About link not displayed");
		// Assert.assertTrue(madsupPlanTypesTitle.getText().contains("Medicare
		// Supplement Insurance Plans (Medigap)"),
		// "Invalid MADSUP Text");
		// validate(madsupPlanTypesPara, 60);
		Assert.assertFalse(validate(madsupPlanTypesPara, 10), "Medsub section should not display for July release");
		// Assert.assertTrue(madsupPlanTypesLearnmoreLink.getText().contains("Learn More
		// About"),
		// "Learn More About link not displayed");
		Assert.assertTrue(pdpPlanTypesTitle.getText().contains("Medicare Prescription Drug Plans (Part D)"),
				"Invalid PDP Text");
		validate(pdpPlanTypesPara, 60);
		Assert.assertTrue(pdpPlanTypesLearnmoreLink.getText().contains("Learn More About"),
				"Learn More About link not displayed");
		Assert.assertTrue(validate(dsnpPlanTypesTitle, 60), " Issue in DSNP Title");
		Assert.assertTrue(validate(dsnpPlanTypesPara, 60), " Issue in DSNP Text Area");
		Assert.assertTrue(validate(dsnpPlanTypesLearnmoreLink, 60), " Issue in DSNP Learnmore linke");
		threadsleep(3000);
		mapdPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(mapdPlanTypesLearnmoreLink);
		threadsleep(3000);
		// madsupPlanTypesFlipArrow.click();
		// validateNonPresenceOfElement(madsupPlanTypesLearnmoreLink);
		// threadsleep(3000);
		pdpPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(pdpPlanTypesLearnmoreLink);
		threadsleep(3000);
		dsnpPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(dsnpPlanTypesFlipArrow);
	}

	public void validatePagination() {
		System.out.println("Validating Pagination Functionality");
		waitforResultsPage();
		Assert.assertTrue(validate(pagenoLabel, 20), " Page count is not available");
		String pageCount1 = pagenoLabel.getText().trim();
		Assert.assertTrue(validate(pagePreviousButtonDisabled, 60), " Previous button Enabled in pagination");
//		Assert.assertFalse(validate(returnToBeginning, 3), " Return to Beginning is displayed");
		Assert.assertTrue(validate(pageNextButton, 60), "Next button is not available in pagination");
		pageNextButton.click();
		threadsleep(2000);
		Assert.assertFalse(validate(pagePreviousButtonDisabled, 60), " Previous button Disabled in pagination");
//		Assert.assertTrue(returnToBeginning.getText().contains("Return to beginning"), "Invalid Return to beginning Text");
		pagePreviousButton.click();
		threadsleep(2000);
		Assert.assertTrue(validate(pagePreviousButtonDisabled, 60), " Previous button Enabled in pagination");
//		Assert.assertFalse(validate(returnToBeginning, 3), " Return to Beginning is displayed");
		String pageCount2 = pagenoLabel.getText().trim();
		Assert.assertEquals(pageCount1, pageCount2, "Page count in not matching");
		int totalPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[1]);

		for (int i = 1; i <= totalPage; i++) {
			pageCount1 = pagenoLabel.getText().trim();
			int currentPage = Integer
					.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[0].replace("page", ""));
			Assert.assertEquals(i, currentPage, "Page count is mismatch after pagenation");
			if (i == totalPage) {
				Assert.assertTrue(validate(pageNextButtonDisabled, 60), " Next button Enabled in pagination");
//				Assert.assertTrue(returnToBeginning.getText().contains("Return to beginning"),"Invalid Return to beginning Text");
			} else {
				pageNextButton.click();
				threadsleep(2000);
			}
		}
	}

	public int findPlan(String uniqueName) {
		System.out.println("Finding a Plan...");
		waitforResultsPage();
		String pageCount1 = pagenoLabel.getText().trim();
		int currentPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[0].replace("page", ""));
		if(currentPage != 1) {
			for(int c = 1; c < currentPage; c++) {
				pagePreviousButton.click();
				threadsleep(2000);
			}
		}
		boolean planAvailable = false;
		// String uniqueName = "Plan 1 (Regional PPO)";
		// int totalPlans = plantiles.size();
//		String pageCount1 = pagenoLabel.getText().trim();
		int totalPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[1]);
		int i = 1, planIndex = 0;
		do {
			// 3 plans per page
			for (int k = 0; k < 3; k++) {
				String planName = plantiles.get(planIndex).findElement(By.cssSelector("h2>a")).getText().trim();
				if (planName.contains(uniqueName.trim())) {
					planAvailable = true;
					break;
				}
				planIndex++;
			}
			if (i == totalPage || planAvailable) {
				break;
			}
			pageNextButton.click();
			threadsleep(2000);
			i++;
		} while (i <= totalPage);
		System.out.println("planAvailable - " + planAvailable);
		if (!planAvailable)
			planIndex = -1;
		return planIndex;
	}

	public void validateDrugInfo(String drugsInfo, String location) {
		System.out.println("Validating Drug Info...");
		String planName = "", drugName = "", drugStatus = "";
		String[] drugslist = drugsInfo.split(":");
		for (int i = 0; i < drugslist.length; i++) {
			String drugInfo = drugslist[i];
			if (drugInfo.trim().length() > 0) {
				String[] drugDetails = drugInfo.split(",");
				planName = drugDetails[0];
				drugName = drugDetails[1];
				drugStatus = drugDetails[2];
				if (location.toLowerCase().contains("tile"))
					verifyDrugdata(planName, drugName, drugStatus);
				if (location.toLowerCase().contains("model"))
					verifyDrugdataModel(planName, drugName, drugStatus);
				if (location.toLowerCase().contains("show"))
					verifyDrugShowMore(planName, drugName);
			}
		}
	}

	public void verifyDrugdata(String planName, String drugName, String drugStatus) {
		int planIndex = findPlan(planName);
		String drugText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='displayDrugsUI']")).getText()
				.trim();
		// String drugText =
		// plantiles.get(planIndex).findElement(drugInfo).getText().trim();
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in plan - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='displayDrugsUI'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='displayDrugsUI'] span[class^='non-covered']")).size();
		System.out.println("Validating Drug Coverage...");
		if (drugStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else if (drugStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero drugs");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero drugs");
		}

	}

	public void validateDoctorInfo(String doctorsInfo, String location) {
		System.out.println("Validating Doctor Info...");
		String planName = "", doctorName = "", doctorStatus = "";
		String[] doctorslist = doctorsInfo.split(":");
		for (int i = 0; i < doctorslist.length; i++) {
			String doctorInfo = doctorslist[i];
			if (doctorInfo.trim().length() > 0) {
				String[] doctorDetails = doctorInfo.split(",");
				planName = doctorDetails[0];
				doctorName = doctorDetails[1];
				doctorStatus = doctorDetails[2];
				if(location.toLowerCase().contains("tile"))
					verifyDoctordata(planName, doctorName, doctorStatus);
				else
					verifyDoctorShowMore(planName, doctorName);
			}
		}
	}

	public void verifyDoctordata(String planName, String doctorName, String doctorStatus) {
		int planIndex = findPlan(planName);
		String doctorText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='providerSection']"))
				.getText().trim();
		Assert.assertTrue(doctorText.contains(doctorName), "Doctor details not found in plan - " + planName);
		// Either all True or all False Doctors for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='providerSection'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='providerSection'] span[class^='non-covered']")).size();
		System.out.println("Validating Doctor Coverage...");
		if (doctorStatus.toLowerCase().contains("true")) {
			// Below is the Text to be validated
			if (doctorName.toLowerCase().contains("Access to doctors".toLowerCase())
					|| doctorName.toLowerCase().contains("Access to in-network".toLowerCase())
					|| doctorName.toLowerCase().contains("local or National".toLowerCase())
					|| doctorName.toLowerCase().contains("any provider".toLowerCase())) {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").contains(doctorName.toLowerCase().replace(" ", "")),
						"Doctor Description is Invalid in plan - " + planName);
			} else {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").replace("\n", "")
								.contains(doctorName.toLowerCase().replace(" ", "") + "In-Network".toLowerCase()),
						"Doctor details Invalid in plan - " + planName);
			}
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all Doctors covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all Doctors not covered for a plan");
		} else if (doctorStatus.toLowerCase().contains("false")) {

			if (doctorName.toLowerCase().contains("Access to doctors".toLowerCase())
					|| doctorName.toLowerCase().contains("Access to in-network".toLowerCase())
					|| doctorName.toLowerCase().contains("local or National".toLowerCase())
					|| doctorName.toLowerCase().contains("any provider".toLowerCase())
					|| doctorName.toLowerCase().contains("do not provide".toLowerCase())) {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").contains(doctorName.toLowerCase().replace(" ", "")),
						"Doctor Description is Invalid in plan - " + planName);
			} else {

				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").replace("\n", "")
								.contains(doctorName.toLowerCase().replace(" ", "") + "Out-Of-Network".toLowerCase()),
						"Doctor details Invalid in plan - " + planName);
			}
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all Doctors covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all Doctors not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero Doctors");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero Doctors");
		}
	}

	public void validateSNPInfo(String snpsInfo) {
		System.out.println("Validating SNP Info...");
		String planName = "", snpName = "", snpStatus = "";
		String[] snpslist = snpsInfo.split(":");
		for (int i = 0; i < snpslist.length; i++) {
			String drugInfo = snpslist[i];
			if (drugInfo.trim().length() > 0) {
				String[] drugDetails = drugInfo.split(",");
				planName = drugDetails[0];
				snpName = drugDetails[1];
				snpStatus = drugDetails[2];
				verifySNPdata(planName, snpName, snpStatus);
			}
		}
	}

	public void verifySNPdata(String planName, String snpName, String snpStatus) {
		int planIndex = findPlan(planName);
		String snpText = plantiles.get(planIndex).findElement(By.cssSelector("*[class*='special-needs-ul']")).getText()
				.trim();
		Assert.assertTrue(snpText.contains(snpName), "SNP details not found in plan - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("*[class*='special-needs-ul'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("*[class*='special-needs-ul'] span[class^='non-covered']")).size();
		System.out.println("Validating SNP Coverage...");
		if (snpStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered.");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered");
		} else if (snpStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered.");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered.");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be No coverage icon");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be No coverage icon");
		}
	}

	public void viewPlanInfo(String planInfo) {
		System.out.println("Navigating Plans Info...");
		String planName = "", planAction = "";
		String[] planDetails = planInfo.split(",");
		planName = planDetails[0];
		planAction = planDetails[1];
		int planIndex = findPlan(planName);

		if (planAction.toLowerCase().contains("link")) {
			String planFullName = plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).getText().trim();
			plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).click();
			validate(planNameDetailsPage, 60);
			Assert.assertTrue(planNameDetailsPage.getText().toLowerCase().contains(planFullName.toLowerCase()),
					"Not navigated to Plan details page");
		}
		if (planAction.toLowerCase().contains("viewbutton")) {
			String planFullName = plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).getText().trim();
			plantiles.get(planIndex).findElement(By.cssSelector(".enrollSection>.sub-content button")).click();
			validate(planNameDetailsPage, 60);
			Assert.assertTrue(planNameDetailsPage.getText().toLowerCase().contains(planFullName.toLowerCase()),
					"Not navigated to Plan details page");
		}
	}

	public void learnMore(String learnMore) {
		waitforResultsPage();
		String curURL = driver.getCurrentUrl();

		if (learnMore.contains("Advantage"))
			mapdPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Supplement"))
			madsupPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Drug"))
			pdpPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Special"))
			dsnpPlanTypesLearnmoreLink.click();

		threadsleep(5000);
		String newURL = driver.getCurrentUrl();
		Assert.assertFalse(curURL.contains(newURL), "Invalid Navigation");

	}

	public void verifyDrugdataModel(String planName, String drugName, String drugStatus) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector(".buttonLinkSection button")).click();
		String drugText = drugModel.getText().trim();
		Assert.assertTrue(drugText.contains(planName), "Plan Name not found in drug model - " + planName);
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in drug model - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = drugModel.findElements(By.cssSelector("span[class^='covered']")).size();
		nonCovered = drugModel.findElements(By.cssSelector("span[class^='non-covered']")).size();
		System.out.println("Validating Drug Coverage in Model...");
		if (drugStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else if (drugStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero drugs");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero drugs");
		}
		drugModelClose.click();
		threadsleep(2000);
	}
	
	public void verifyDrugShowMore(String planName, String drugName) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showAllDrugsId']")).click();
		String drugText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='displayDrugsUI']")).getText()
				.trim();
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in plan - " + planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showLessDrugsId']")).click();
	}
	
	public void verifyDoctorShowMore(String planName, String doctorName) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showAllDoctorsId']")).click();
		String doctorText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='providerSection']"))
				.getText().trim();
		Assert.assertTrue(doctorText.contains(doctorName), "Doctor details not found in plan - " + planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showLessDoctorsId']")).click();
	}
	
	String sampleJson = "{\"preferences\":[{\"questionId\":\"planType\",\"answers\":[{\"id\":\"co_ma\"}]},{\"questionId\":\"snpType\",\"answers\":[{\"id\":\"snp_none\"}]},{\"questionId\":\"doctorPref\",\"answers\":[{\"id\":\"doctor_accepts_medicare\"}]},{\"questionId\":\"additional-dental\",\"answers\":[{\"id\":\"as_dental_no\"}]},{\"questionId\":\"additional-hearing\",\"answers\":[{\"id\":\"as_hearing_no\"}]},{\"questionId\":\"additional-vision\",\"answers\":[{\"id\":\"as_vision_no\"}]},{\"questionId\":\"additional-fitness membership\",\"answers\":[{\"id\":\"as_fitness_no\"}]},{\"questionId\":\"healthCarePref\",\"answers\":[{\"id\":\"cs_low\"}]}],\"planYear\":2021,\"location\":{\"zipcode\":\"10001\",\"selectedCounty\":{\"fipsCountyCode\":\"061\",\"fipsCountyName\":\"New York County\",\"fipsStateCode\":\"36\",\"stateCode\":\"NY\",\"cmsCountyCodes\":[\"420\"]}}}";
	
	public void poc() {
		System.out.println("Doing POC.....");
		String StorageKey = "ucp_planRecommendationObj",value = sampleJson;
		JavascriptExecutor js = ((JavascriptExecutor) driver);
		threadsleep(5000);
		try {
		js.executeScript(String.format("window.sessionStorage.setItem('%s','%s');", StorageKey,value));
		}
		catch(Exception e1) {
			System.out.println("data");
		}
		
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:54:39.418
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:39.418
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:39.418
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:54:39.421
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 14:54:39.421
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:54:39.434
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:54:39.436
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:49.100
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:49.103
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:49.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:49.683
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:50.644
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:50.647
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:51.507
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:51.510
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:53.166
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:53.170
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:56:55.100
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:56:55.102
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:07.057
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:07.059
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:11.806
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:11.809
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:14.527
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:14.529
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:17.261
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:17.263
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:20.131
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:20.134
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:21.509
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:21.511
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:22.260
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:22.262
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:24.650
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:24.652
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:28.478
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:28.480
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:29.626
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:29.629
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:30.901
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:30.903
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:32.074
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:32.076
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:33.044
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:33.047
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:35.294
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:35.296
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:35.372
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:35.375
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:36.262
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:36.264
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 14:57:37.354
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 14:57:37.356
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:05:24.471
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:05:24.474
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:05:25.196
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:05:25.199
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:05:26.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:05:26.025
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:05:29.016
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:05:29.018
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:35.950
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:35.958
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:36.946
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:36.948
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:39.359
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:39.362
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:40.440
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:40.443
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:40.971
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:40.973
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:43.518
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:43.521
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:55.924
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:55.926
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:56.131
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:56.133
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:57.992
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:57.995
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:23:58.470
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:23:58.473
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:00.346
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:00.348
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:00.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:00.386
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:06.039
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:06.041
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:07.877
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:07.880
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:09.677
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:09.679
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:16.038
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:16.040
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:17.715
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:17.717
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:17.728
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:17.731
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:26.424
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:26.426
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:26.434
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:26.435
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:24:30.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:24:30.385
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:16.517
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:16.520
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:17.358
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:17.360
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:19.581
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:19.583
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:19.609
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:19.611
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:20.501
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:20.503
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:21.185
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:21.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:21.377
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:21.379
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:23.378
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:23.380
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:24.109
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:24.111
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:25.311
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:25.313
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:27.251
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:27.253
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:27.904
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:27.907
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:32:34.870
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import atdd.framework.MRScenario;
import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineDoctorsPage extends GlobalWebElements {

	public PlanRecommendationEngineDoctorsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String page = "Doctor";

	PlanRecommendationEngineWerallyPage werally = new PlanRecommendationEngineWerallyPage(driver);
	ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	ArrayList<String> confirmationSpecialtyResults = new ArrayList<String>();

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

// Doctors page Elements

	@FindBy(css = "#progress-bar-title")
	private WebElement planSelectorPageTilte;

	@FindBy(xpath = "//*[@class='progress-bar-info']/h2")
	private WebElement pageStepsNumberName;

	@FindBy(xpath = "//*[@class='progress-bar-info']/p")
	private WebElement pageProgressPercentage;

	@FindBy(css = "div.row.pb-1>div>uhc-radio-group>fieldset>legend.primary-question-tex")
	private WebElement doctorsTitle;

	@FindBy(xpath = "//label[@class='radio-label']/input[contains(text(),'network')]")
	private WebElement SelectDoctors;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(xpath = "//button[contains(text(),'Previous')]")
	private WebElement previousBtn;

	// --- Common elements Ends above ---

	@FindBy(css = "p.all-fields-marked-wi")
	private WebElement pageRequiredInfo;

	@FindBy(css = "#custom-radio-group>fieldset>uhc-radio:nth-child(2)>label>span.radio-label-content")
	private WebElement innetwork;

	@FindBy(css = "#custom-radio-group>fieldset>uhc-radio:nth-child(3)>label")
	private WebElement outnetwork;

	@FindBy(css = "#custom-radio-group>fieldset>uhc-radio:nth-child(4)>label")
	private WebElement mydoctors;

	@FindBy(css = "#errorMessage>div:nth-child(2)")
	private WebElement errorMessage;

	@FindBy(xpath = "//*[contains(@class,'radio-checked')]")
	private WebElement radioselect;

// Doctors Page Modal popup

	@FindBy(css = "#modal div>button[class*='primary button']")
	private WebElement modalFinddoctors;

	@FindBy(xpath = "//button[contains(text(),'Cancel')]")
	private WebElement modalCancel;

	@FindBy(css = "#modal #modal-label")
	private WebElement modalTitle;

	@FindBy(css = "#modal .modal-content")
	private WebElement modalDescription;

//Doctors Page Confirmation Modal popup

	@FindBy(css = "#modal div>button[class*='primary button']")
	private WebElement modalContinuedoctors;

	@FindBy(css = "#modal .modal-content .row:nth-of-type(1) p")
	private WebElement modalDoctorsCount;

	@FindBy(css = "#modal .modal-content .row:nth-of-type(2) uhc-list-item")
	private List<WebElement> modalDoctorsList;

	// #modal .modal-content .row:nth-of-type(2) uhc-list-item
	// button[class*='secondary']
	// Find doctor element and lookup remove button
	@FindBy(css = "button[class*='secondary']")
	private List<WebElement> modalDoctorsRemovebutton;

	@FindBy(css = "#custom-radio-group>fieldset>uhc-radio:nth-child(4)>label")
	private WebElement doctorLookupOption;

	@FindBy(css = "#modal div[class*='edit']>button")
	private WebElement modalEditdoctors;

//Doctors Page Element Verification Method 

	public void doctorspageElements() {
		System.out.println("Validating Doctors Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(planSelectorPageTilte);
//                                                Assertion.assertTrue(planSelectorPageTilte.getText().contains("Get help finding a plan"));
		validate(pageStepsNumberName, 30);
		validate(pageProgressPercentage, 30);
		desktopCommonUtils.currentPageValidation(page.toUpperCase());
		validate(pageRequiredInfo);
//                                                Assertion.assertTrue(pageRequiredInfo.getText().contains("All fields marked with "), " are required");
		validate(doctorsTitle);
//                                                Assertion.assertTrue(doctorsTitle.getText().contains("doctors"));
		validate(innetwork, 30);
//                                                Assertion.assertTrue(innetwork.getText().contains("network"));
		validate(outnetwork, 30);
//                                              Assertion.assertTrue(outnetwork.getText().contains("patients"));
		validate(mydoctors, 30);
//                                                Assertion.assertTrue(mydoctors.getText().contains("current doctors"));
		previousBtn.click();
		System.out.println("Validating " + page + " page Previous button functionality");
		desktopCommonUtils.previousPageValidation(page.toUpperCase());
	}

// Selecting doctor options in Doctor Page

	public void doctorspageOptions(String doctor) {
		System.out.println("Doctor Page Functional Operations");
		if (doctor.equalsIgnoreCase("UHGNetwork")) {
			validate(innetwork);
			jsClickNew(innetwork);
			System.out.println("Doctors Type " + doctor + " Clicked");
		} else if (doctor.equalsIgnoreCase("AcceptsMedicare")) {
			validate(outnetwork);
			jsClickNew(outnetwork);
			System.out.println("Doctors Type " + doctor + " Clicked");
		} else if (doctor.equalsIgnoreCase("Lookup")) {
			validate(mydoctors);
			jsClickNew(mydoctors);
			System.out.println("Doctors Type " + doctor + " Clicked");
		}
	}

//Doctors Page Function Verification                      

	public void doctorspageFunctional(String doctor, String doctorsName, String multiDoctor, String status) {
		System.out.println("Doctor Page Functional Operations");
		if (status.toUpperCase().contains("POSITIVE")) {
			doctorspageOptions(doctor);
			jsClickNew(continueBtn);
			if (doctor.equalsIgnoreCase("Lookup")) {
				if (multiDoctor.equalsIgnoreCase("YES"))
					doctorModellookup(doctorsName, 3);
				else
					doctorModellookup(doctorsName, 1);
			}
			System.out.println("Validating " + page + " page Continue button functionality");
			if (!status.toUpperCase().contains("NEXTPAGENAME"))
				desktopCommonUtils.nextPageValidation(page.toUpperCase());
			else
				desktopCommonUtils.nextPageNameValidation(page.toUpperCase());
		} else {
			if (doctor.isEmpty()) {
				jsClickNew(continueBtn);
				desktopCommonUtils.desktopErrorValidation(page);
			}
		}
	}

//Doctors page - Select Doctor Type and click on Previous Button              

	public void doctorspagePreviousButton(String doctor) {
		System.out.println("Doctor Page Functional Operations");
		doctorspageOptions(doctor);
		if (radioselect.isDisplayed()) {
			validate(pageProgressPercentage, 30);
			Assert.assertTrue(pageProgressPercentage.getText().contains("33% Complete"));
		} else {
			System.out.println("Doctor Type not selected in Doctors Page");
		}
		previousBtn.click();
		System.out.println("Validating " + page + " page Previous button functionality");
		desktopCommonUtils.previousPageValidation(page.toUpperCase());
	}

//Doctors Page Function Verification                                      
	public void doctorspageerror() {
		System.out.println("Doctor type not selected - Error Scenario in Doctors Page");
		continueBtn.click();
		desktopCommonUtils.desktopErrorValidation(page);
	}

//Doctors Model Popup Window Verification        
	int locationCount = 1;

	public void doctorModellookup(String search, int count) {
		String curWindow = driver.getWindowHandle();
		System.out.println(curWindow);
//		modalFinddoctors.click();
		jsClickNew(modalFinddoctors);
		validateLinksanotherWindow(curWindow, "Doctors", search, count, locationCount);
		threadsleep(5000);
		// Changing the count for multiple doc with : separated
		if (search.contains(":")) {
			count = search.split(":").length;
		}
		confirmationProviderResults = getConfimationPopupResults(count);
		verifyConfirmationmodalResults(count, werallyResults, confirmationResults);
		if (count > 2 && !search.contains(":")) {
			removeDoctors();
			count = count - 1;
			confirmationProviderResults = getConfimationPopupResults(count);
		}
//		modalContinuedoctors.click();
		jsClickNew(modalContinuedoctors);
	}

	public void doctorModellookupElements() {
		validate(modalDescription);
//                        			Assertion.assertTrue(modalDescription.getText().contains("Save"));
		validate(modalTitle);
		Assert.assertTrue(modalTitle.getText().contains("browser"));
		validate(modalCancel);
		Assert.assertTrue(modalCancel.getText().contains("Cancel"));
		validate(modalFinddoctors);
//                        			Assertion.assertTrue(modalFinddoctors.getText().contains("Find Doctors"));
	}

//Doctors Confirmation Model Popup Window Verification                                

	public void doctorConfirmationModellookup() {
		validate(modalTitle);
//                        			Assertion.assertTrue(modalTitle.getText().contains("Your Doctors"));
		validate(modalDoctorsCount);
//                        			Assertion.assertTrue(modalDoctorsCount.getText().contains("doctor(s)"));
		validate(modalCancel);
		Assert.assertTrue(modalCancel.getText().contains("Cancel"));
		validate(modalContinuedoctors);
		Assert.assertTrue(modalContinuedoctors.getText().contains("Continue"));
	}

//Switch to Werally Window Page


	public ArrayList<String> validateLinksanotherWindow(String primaryWindow, String type, String search, int count, int locationCount) {
		String browser = MRScenario.browserName;				//E2E: the browser name is stored in browserName variable in getWebDriverNew method of MRScenario 

		String env = MRScenario.environment;
		threadsleep(2000);
		ArrayList<String> windows = new ArrayList<String>(driver.getWindowHandles());
		System.out.println(windows);
		if (windows.size() == 2) {
			for (String window : windows) {
				System.out.println(window.replace("page-", ""));
				/*
				 * String a =
				 * "window.open('https://connect.int.werally.in/welcome-to-check-provider-coverage');";
				 * ((JavascriptExecutor)driver).executeScript(a);
				 */
				if (!window.equals(primaryWindow)) {
					/*
					 * try { Thread.sleep(5000); } catch (InterruptedException e) { // TODO
					 * Auto-generated catch block e.printStackTrace(); }
					 */
					driver.switchTo().window(window);
					if (browser.equalsIgnoreCase("firefox") || browser.equalsIgnoreCase("edge")
							|| browser.equalsIgnoreCase("IE"))
						driver.manage().window().maximize();
					System.out.println(driver.getCurrentUrl());
					if (env.equalsIgnoreCase("prod") || env.equalsIgnoreCase("offline") || env.contains("digital-uatv2") )
						Assert.assertTrue(driver.getCurrentUrl().contains("werally.com"),
								"Prod Connected to Incorrect Rally");
					else
						Assert.assertTrue(driver.getCurrentUrl().contains("werally.in"),
								"Non Prod Connected to Incorrect Rally");
					werallyResults = werally.werallySearch(type, search, count, locationCount);
					System.out.println("werallyResults Size is : " + werallyResults.size());
					System.out.println("werallyResults Content is : " + werallyResults);
				}
				threadsleep(5000);
				driver.switchTo().window(primaryWindow);
			}
			System.out.println(driver.getCurrentUrl());
			threadsleep(1000);
		} else {
			System.out.println("Unexpected windows opened");
			driver.switchTo().window(primaryWindow);
			threadsleep(1000);
			Assert.assertTrue(false);
		}
		return werallyResults;
	}

	public ArrayList<String> getConfimationPopupResults(int count) {
		int confirmationSize = Integer.parseInt(modalDoctorsCount.getText().trim().split(" ")[2]);
		if (count == modalDoctorsList.size() && count == confirmationSize) {
			confirmationResults = new ArrayList<String>();
			confirmationSpecialtyResults = new ArrayList<String>();
			for (int i = 0; i < count; i++) {
				confirmationResults
						.add(modalDoctorsList.get(i).findElement(By.cssSelector(".list-item-content p:nth-child(1)"))
								.getText().replace("\n", " ").trim());
				confirmationSpecialtyResults
						.add(modalDoctorsList.get(i).findElement(By.cssSelector(".list-item-content p:nth-child(2)"))
								.getText().replace("\n", " ").trim());
			}
			Collections.sort(confirmationResults);
			Collections.sort(confirmationSpecialtyResults);
			System.out.println("confirmationResults Size is : " + confirmationResults.size());
			System.out.println("confirmationResults Content is : " + confirmationResults);
			System.out.println("confirmationSpecialtyResults Size is : " + confirmationSpecialtyResults.size());
			System.out.println("confirmationSpecialtyResults Content is : " + confirmationSpecialtyResults);

		} else {
			System.out.println("Modal Results Count mismatch");
			Assert.assertTrue(false);
		}
		return confirmationResults;
	}
	
	public void getcontinue(String multi) {
		int count = 0;
		threadsleep(3000);
		int confirmationSize = Integer.parseInt(modalDoctorsCount.getText().trim().split(" ")[2]);
		System.out.println("confirmationResults Size is : " + confirmationSize);
		if(multi.equalsIgnoreCase("Multi"))
			count = 5;
		if(confirmationSize==count)
			System.out.println("Doctors Size is : " + count);
			jsClickNew(modalContinuedoctors);
			threadsleep(3000);
		}

	public void verifyConfirmationmodalResults(int count, ArrayList<String> werally, ArrayList<String> confirm) {

		if (werally.size() == confirm.size() && count == werally.size()) {
			if (containsname(werally, confirm)) {
				System.out.println("Werally and Modal Result's Content matched");
			} else {
				System.out.println("Werally and Modal Result's Content mismatch");
				Assert.assertTrue(false);
			}
		} else {
			System.out.println("Werally and Modal Results Count mismatch");
			Assert.assertTrue(false);
		}
	}

	public boolean equalsname(ArrayList<String> werally, ArrayList<String> doctorsmodal) {
		boolean result = true;
		for (int i = 0; i < werally.size(); i++) {
			String wname[] = werally.get(i).toUpperCase().replace(",", "").replace(".", "").split(" ");
			Arrays.sort(wname);
			for (int j = 0; j < doctorsmodal.size(); j++) {
				String dname[] = doctorsmodal.get(j).toUpperCase().replace(",", "").replace(".", "").split(" ");
				Arrays.sort(dname);
				System.out.println(Arrays.equals(wname, dname));
				if (Arrays.equals(wname, dname)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		return result;
	}

	public boolean containsname(ArrayList<String> werallypreproviders, ArrayList<String> vppprovider) {
		boolean result = true;
		for (int i = 0; i < werallypreproviders.size(); i++) {
			String wname[] = werallypreproviders.get(i).replace(",", "").replace(".", "").split(" ");
			List<String> wnam = Arrays.asList(wname);
			for (int j = 0; j < vppprovider.size(); j++) {
				String dname[] = vppprovider.get(j).replace(",", "").replace(".", "").replace("\n", " ").split(" ");
				List<String> dnam = Arrays.asList(dname);
				if (wnam.containsAll(dnam) || dnam.containsAll(wnam)) {
					result = true;
					break;
				} else {
					result = false;
				}
			}
		}
		System.out.println("Doctors Name validation Result " + result);
		Assert.assertTrue(result, "Providers name mismatch");
		return result;
	}

	public void removeDoctors() {
		// By default removing 2nd doctor
		int beforeRemove = modalDoctorsList.size();
//		modalDoctorsList.get(1).findElement(By.cssSelector("button[class*='secondary']")).click();
		jsClickNew(modalDoctorsList.get(1).findElement(By.cssSelector("button[class*='secondary']")));
		int afterRemove = modalDoctorsList.size();
		if (beforeRemove != afterRemove) {
			System.out.println("Remove Results Count mismatch");
			getConfimationPopupResults(afterRemove);
		} else {
			System.out.println("Remove Results Count matching and Remove is not removed");
			Assert.assertTrue(false);
		}
	}

	public void browserBack() {

		driver.navigate().back();
	}

	public void nextPageValidationDoctor() {
		jsClickNew(modalContinuedoctors);
		System.out.println("Validating " + page + " page Continue button functionality");
		desktopCommonUtils.nextPageValidation(page.toUpperCase());
	}

	public void doctorspageCancel(String doctorsName, String multiDoctor) {
//		doctorLookupOption.click();
		jsClickNew(doctorLookupOption);
		System.out.println("Plan Type Lookup Clicked");
//		continueBtn.click();
		jsClickNew(continueBtn);
		if (multiDoctor.equalsIgnoreCase("YES")) {
			String curdriverhandle = driver.getWindowHandle();
//			modalFinddoctors.click();
			jsClickNew(modalFinddoctors);
			validateLinksanotherWindow(curdriverhandle, "Doctors", doctorsName, 2, locationCount);
			doctorConfirmationModellookup();
//			modalCancel.click();
			jsClickNew(modalCancel);
			if (validate(modalCancel, 10) == true) {
				System.out.println("Modal Popup is not closed");
				Assert.assertTrue(false);
			}
		} else {
			doctorModellookupElements();
//			modalCancel.click();
			jsClickNew(modalCancel);
			if (validate(modalCancel, 10) == true) {
				System.out.println("Confirmation Modal Popup is not closed");
				Assert.assertTrue(false);
			}
		}
		System.out.println("Validating " + page + " page modal cancel button functionality");
		pageStepsNumberName.getText().toUpperCase().contains(page.toUpperCase());
	}

	public void navigateDoctorsmodalsession() {
//		doctorLookupOption.click();
		jsClickNew(doctorLookupOption);
		System.out.println("Doctor Lookup Type Clicked");
//		continueBtn.click();
		jsClickNew(continueBtn);
	}

	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();

	public void addProvidersPRE(String doctorsName, String multiDoctor) {
		jsClickNew(doctorLookupOption);
		System.out.println("Lookup Type Clicked");
		jsClickNew(continueBtn);
		if (multiDoctor.equalsIgnoreCase("YES"))
			providerlookup(doctorsName, 3);
		else
			providerlookup(doctorsName, 1);
		System.out.println("Validating " + page + " page Continue button functionality");
		jsClickNew(modalContinuedoctors);
		desktopCommonUtils.nextPageValidation(page.toUpperCase());

	}

	public void providerlookup(String search, int count) {
		String curdriverhandle = driver.getWindowHandle();
		jsClickNew(modalFinddoctors);
		validateLinksanotherWindow(curdriverhandle, "Doctors", search, count, locationCount);
		confirmationProviderResults = getConfimationPopupResults(count);
		verifyConfirmationmodalResults(count, werallyResults, confirmationProviderResults);
	}

	public void editProvider(String doctorName1, String multiDoctor1, String doctorName2, String muliDoctor2) {
		jsClickNew(doctorLookupOption);
		System.out.println("Lookup Type Clicked");
		jsClickNew(continueBtn);
		if (multiDoctor1.equalsIgnoreCase("YES"))
			providerlookup(doctorName1, 3);
		else
			providerlookup(doctorName1, 1);
		int confirmationSize = Integer.parseInt(modalDoctorsCount.getText().trim().split(" ")[2]);
		String curdriverhandle = driver.getWindowHandle();
		threadsleep(5000);
		jsClickNew(modalEditdoctors);
		jsClickNew(modalFinddoctors);
		if (muliDoctor2.equalsIgnoreCase("YES"))
			validateLinksanotherWindow(curdriverhandle, "Doctors", doctorName2, 3, locationCount);
		else
			validateLinksanotherWindow(curdriverhandle, "Doctors", doctorName2, 1, locationCount);
		Assert.assertTrue(modalDoctorsList.size() > confirmationSize, "Error in adding another Provider through Edit");
		nextPageValidationDoctor();
	}

	public void verifyExisitngPREDoclist(String multi) {
		int count = 1;
		if (multi.equalsIgnoreCase("Yes"))
			count = 3 - 1;// -1 Because one provider should have been removed in first run
		// confirmationProviderResults - Static variable which already has the value of
		// doc at 1st run
		verifyConfirmationmodalResults(count, getConfimationPopupResults(count), confirmationProviderResults);
	}

	public void nextPageNameValidationDoctor() {
		jsClickNew(modalContinuedoctors);
		System.out.println("Validating " + page + " page Continue button functionality");
		desktopCommonUtils.nextPageNameValidation(page.toUpperCase());
	}

	public void edit_doctor(String doctor, String doctorsName, String multiDoctor) {
		doctorspageOptions(doctor);
		jsClickNew(continueBtn);
		if(validate(modalEditdoctors)) {
			jsClickNew(modalEditdoctors);
		}
		String curWindow = driver.getWindowHandle();
		System.out.println(curWindow);
		jsClickNew(modalFinddoctors);
		threadsleep(5000);
		if (doctor.equalsIgnoreCase("Lookup")) {
			if (multiDoctor.equalsIgnoreCase("YES"))
				validateLinksanotherWindow(curWindow, "Doctors", doctorsName, 3, locationCount);
			else
				validateLinksanotherWindow(curWindow, "Doctors", doctorsName, 1, locationCount);
		}
		jsClickNew(modalContinuedoctors);
	}
	
	public void addProviderEdit(String search) {
		String curWindow = driver.getWindowHandle();
		System.out.println(curWindow);
		validateLinksanotherWindow(curWindow, "Doctors", search, 1, locationCount);
		threadsleep(5000);
	}
	
	public void addZeroProviders(String doctorsName) {
		jsClickNew(doctorLookupOption);
		System.out.println("Lookup Type Clicked");
		jsClickNew(continueBtn);
		providerlookup(doctorsName, 1);
		System.out.println("Validating " + page + " page Continue button functionality");
		jsClickNew(modalDoctorsList.get(0).findElement(By.cssSelector("button[class*='secondary']")));
		threadsleep(2000);
		jsClickNew(modalContinuedoctors);
		//desktopCommonUtils.nextPageValidation(page.toUpperCase());
	}

}


----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:34.893
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:32:34.894
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:32:34.894
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:34.917
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:32:34.918
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:34.977
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:34.980
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.core.jobs 4 2 2021-07-16 15:32:35.259
!MESSAGE An internal error occurred during: "Compute launch button tooltip".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:35.817
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:35.819
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.core.jobs 4 2 2021-07-16 15:32:39.265
!MESSAGE An internal error occurred during: "Compute launch button tooltip".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:43.251
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:43.254
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:44.093
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:44.097
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:46.086
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:46.087
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:47.789
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:47.793
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:48.399
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:48.402
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:50.287
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:50.290
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:53.810
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:53.813
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:55.184
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:55.186
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:32:57.126
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:32:57.128
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:14.558
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:14.564
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:15.608
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:15.611
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:17.256
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:17.259
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:18.475
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:18.478
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:19.876
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:19.878
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:21.186
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:21.188
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:27.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:27.658
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:27.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:27.752
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:29.153
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:29.156
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:54.085
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:54.088
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:54.831
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:54.833
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:57.503
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:57.505
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:33:59.829
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:33:59.832
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:34:00.938
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:34:00.940
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:34:05.459
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:34:05.461
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:34:06.742
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package acceptancetests.acquisition.planRecommendationEngine;

import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.JSONException;
import org.openqa.selenium.WebDriver;
import org.springframework.beans.factory.annotation.Autowired;

import acceptancetests.acquisition.vpp.VPPCommonConstants;
import acceptancetests.data.CommonConstants;
import acceptancetests.data.PageConstants;
import atdd.framework.Assertion;
import atdd.framework.DataTableParser;
import atdd.framework.MRScenario;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.PlanSelectorNewPage;
import pages.acquisition.planRecommendationEngine.ACQDrugCostEstimatorPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineAdditionalServicesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCommonutility;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCostPreferencesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineCoverageOptionPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineEditResponsePage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineHeaderAndFooter;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineLandingAndZipcodePages;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineNewResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePharmacyPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEnginePrioritiesPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineResultsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineSpecialNeedsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineTravelPage;

public class PlanRecommendationEngineStepDefinition {

	@Autowired
	
	MRScenario loginScenario;

	public MRScenario getLoginScenario() {
		return loginScenario;
	}
//	WebDriver wd;
//	List<DataTableRow> inputRow;
	HashMap<String, String> inputValues;
	public String PREflow="";
	
	public void readfeaturedata(DataTable data) {
		inputValues = new HashMap<String, String>();
		inputValues = DataTableParser.readDataTableAsMaps(data);
		String temp = inputValues.get("Plan Type");
		if (temp != null && PREflow != temp) {
			PREflow = temp;
			//System.out.println("\n\n\n\n\n\n");
			String curID = String.valueOf(Thread.currentThread().getId());
			System.out.println("Current Thread ID is - "+curID+" for the flow "+PREflow);
			//CommonConstants.PRE_FLOW = new LinkedHashMap<String,String>();
			CommonConstants.PRE_FLOW.put(curID, PREflow);
		}
	}
	
	boolean if_offline_prod = false, popup_clicked = false;
	@Given("^the user is on UHC medicare acquisition site PRE landing page$")
	public void the_user_on_uhc_medicaresolutions_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE"); //changed on 3/3/21 as part of AARP/UHC cleanup
		if_offline_prod = aquisitionhomepage.openPRE(inputValues.get("Site"));
//		aquisitionhomepage.fixPrivateConnection();
		
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
		@And("^clicks on get started button and runs questionnaire$")
	public void clicks_on_get_started_button_and_directly_skip_to_results(DataTable givenAttributes) throws Throwable {
			readfeaturedata(givenAttributes);
			String zipcode = inputValues.get("Zip Code");
			System.out.println("Zipcode is:"+zipcode);
			String county = inputValues.get("CountyDropDown");
			System.out.println("Email is:"+county);
			String isMultiCounty = inputValues.get("Is Multi County");
			System.out.println("Entered Search Key is:"+isMultiCounty);
			checkpopup();
			
			getLoginScenario().saveBean(VPPCommonConstants.ZIPCODE, zipcode);
			getLoginScenario().saveBean(VPPCommonConstants.COUNTY, county);
			getLoginScenario().saveBean(VPPCommonConstants.IS_MULTICOUNTY, isMultiCounty);
			
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.quizStartAndRunQuestionnaire(zipcode);
		} else {
			planSelectorhomepage.quizStartAndRunQuestionnaireWithCounty(zipcode, county);
		}
	}
	
	@When("^user navigate to Plan Recommendation Engine and Checking Breadcrumbs$")
	public void user_navigate_PRE_Breadcrumbs() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}
	
	@Then("^user validate elements on landing page of Plan Recommendation Engine$")
	public void user_check_landing_page_Plan_Selector_tool() throws InterruptedException {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.landingpage();
	}

	
	@When("^user navigate Plan Recommendation Engine Using Shop From Home in Find Your Plan$")
	public void navigate_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaShopTools();
//		headerAndFooter.breadCrumbs();
}
	
	@When("^user navigate Plan Recommendation Engine Using Get Started From Medicare Articles$")
	public void navigate_PRE_tool_MedicareArticles() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareArticles();
}
	
	@When("^user navigate to Medicare Education and validate Plan Recommendation Engine Widget$")
	public void navigate_MedicareEducation() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngineViaMedicareEducation();
}
	
	@Then("^user validate Header elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_Plan_Selector_tool() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.headerElements();
		headerAndFooter.headerLinkvalidation();
	}
	@Then("^user validate Footer elements and Link Validation of Plan Recommendation Engine$")
	public void user_check_header_footer_Plan_Selector_tool() throws Exception {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.footerElements();
		headerAndFooter.footerLinkvalidation();
	}
	@Then("^user validate Header and Footer Functionality of Plan Recommendation Engine$")
	public void user_check_header_footer_Actions_Plan_Selector_tool(DataTable givenAttributes) throws Throwable{
		WebDriver wd = (WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER);
		String actualpageurl = wd.getCurrentUrl();
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		System.out.println("Zipcode is:"+zipcode);
		String email = inputValues.get("EMail");
		System.out.println("Email is:"+email);
		String searchKey = inputValues.get("Search Key");
		System.out.println("Entered Search Key is:"+searchKey);
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.zipcodeFunctionInShopforaplan(zipcode);
		Thread.sleep(5000);
		headerAndFooter.emailFunctionInShopforaplan(email);
		Thread.sleep(5000);
		if(actualpageurl.contains("uhcmedicaresolutions")){
			headerAndFooter.enterSearchFunction(searchKey);
			Thread.sleep(5000);	
		}
	}
	
	@And("^clicks on get started button and check error scenarios$")
	public void clicks_on_get_started_button_and_check_error_scenarios(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		String zipcode = inputValues.get("Zip Code");
		String county = inputValues.get("CountyDropDown");
		String isMultiCounty = inputValues.get("Is Multi County");
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		if (isMultiCounty.equalsIgnoreCase("NO")) {
			planSelectorhomepage.getStartedAndRunInvalidzipcode(zipcode);
		} else {
			planSelectorhomepage.getStartedAndRunzipcodeWithCounty(zipcode, county);
		}
			
	}
	
	@And("^user validate elements in coverage options page$")
	public void elements_coverage_page() {
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		headerAndFooter.breadCrumbs();
		planSelectorCoverageepage.coverageOptionpage();
		
	}
	
	@And("^user selects plan type in coverage options page$")
	public void select_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (!(plantype.isEmpty())) {
			planSelectorCoverageepage.coverageOptionpageFunctional(plantype);
		}
	}
	
	@And("^user not selects plan type in coverage options page$")
	public void notselect_plan_type_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String plantype = inputValues.get("Plan Type");
		if (plantype.isEmpty()) {
			planSelectorCoverageepage.coverageOptionpageerror();
		}
	}
	
	@And("^user select planType and continous the page back to previous page$")
	public void previous_coverage_page(DataTable givenAttributes) throws Throwable {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpageFunctional(inputValues.get("Plan Type"));
	}
	
	@And("^user select planType and Click previous button to check previous page$")
	public void previous_zipcode_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCoverageOptionPage planSelectorCoverageepage =  new PlanRecommendationEngineCoverageOptionPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorCoverageepage.coverageOptionpagePreviousButton(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate elements in Special Needs page$")
	public void elements_special_page() {
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorSpecialneedspage.specialNeedspage();
	}
	
	@And("^user selects SNP options in Special Needs Page")
	public void select_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Positive";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validating error scenario in Special Needs Page")
	public void error_special_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineSpecialNeedsPage planSelectorSpecialneedspage =  new PlanRecommendationEngineSpecialNeedsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String status = "Negative";
		planSelectorSpecialneedspage.specialneedspage(inputValues.get("SNP Options"),status);	
	}
	
	@And("^user validate elements in doctors page$")
    public void elements_doctor_page() {
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDoctorspage.doctorspageElements();
                    
    }
    
    @And("^user selects doctors in doctors page$")
    public void select_plan_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    String status = "Positive_NextPageName";
                    if (!(doctor.isEmpty())) {
                                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
                    }
    }
    
    @And("^user not selects doctors in doctors page$")
    public void notselect_doctor_type_doctor_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String doctor = inputValues.get("Doctors");
                    if (doctor.isEmpty()) {
                                    planSelectorDoctorspage.doctorspageerror();
                    }
    }
    
    @And("^user select doctors and continous the page back from Doctors to previous page$")
    public void previous_doctors_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    String status = "Positive_NextPageName";
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageFunctional(inputValues.get("Doctors"),inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"),status);
    }
    
    @And("^user select doctors and Click previous button from Doctors to check previous page$")
    public void previous_travel_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspagePreviousButton(inputValues.get("Doctors"));
    }
    
    @And("^user validating error scenario in doctors Page")
    public void error_doctor_page(DataTable givenAttributes) {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    planSelectorDoctorspage.doctorspageerror();             
    }
    
    @And("^user selects Doctors in Doctors page and cancels the selection$")
	public void select_doctors_page_cancelvalidation(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.doctorspageCancel(inputValues.get("Doctors Search Text"), inputValues.get("Multi Doctor"));
	}
    
    @And("^user validate elements in drugs page$")
    public void elements_drugs_page() {
    				PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//                    headerAndFooter.breadCrumbs();
                    planSelectorDrugspage.drugspage();
                    
    }
    
       @And("^user selects skip option in Drug page$")
    public void select_prescription_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    	planSelectorDrugspage.skipDrugs(drug);
                    	
    }
       
       @Then("^user selects add drug option in Drug page$")
   	public void add_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option in Drug page without continue next page$")
      	public void add_drugs_page_WithoutContinue(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.drugsHandlerWithdetails(inputValues.get("Drug Details"));
      		planSelectorDrugspage.drugnamesList();
      	}
       
       @Then("^user selects add drug option and cancels the modals in Drug page$")
   	public void add_drugs_page_cancelvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugspageCancel(inputValues.get("Drug Details"));
   	}
       
       @Then("^user validates errors in Drug page$")
   	public void add_drugs_page_errorvalidation(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugpagesError(inputValues.get("Drug Details"));
   	}
       
       @Then("^user search and choose a drug in Drug page$")
   	public void choose_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugChoose(inputValues.get("Search Text"),inputValues.get("Drug Details"));
   		planSelectorDrugspage.continueNextpage();
   	}
       
       @Then("^user selects add drug option without drugs in Drug page$")
   	public void add_NoDrug_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.continueNextpageZeroDrug();
   	}
       
       @Then("^user selects add drug option and comparing DCE and Drug page$")
      	public void verify_drugs_dce_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugwithDCE();
      	}
      	
      	@Then("^user verify drug list are same in DCE VS Drug page$")
      	public void verify_drugs_dce_vs_drug_page(DataTable givenAttributes) {
      		readfeaturedata(givenAttributes);
      		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
      		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
      		planSelectorDrugspage.comparingDrugsDCEvsPRE();
      	}
       
       @Then("^user selects add drug option and verifying the drugs in Drug page$")
     	public void verify_drugs_page(DataTable givenAttributes) {
     		readfeaturedata(givenAttributes);
     		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
     		planSelectorDrugspage.comparingDrugsStartOver();
     	}
    
       @And("^user not selects prescription options in drug page$")
    public void notselect_prescription_opt_drug_page(DataTable givenAttributes) throws Throwable {
                    readfeaturedata(givenAttributes);
                    PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
                    String drug = inputValues.get("Drug Selection");
                    if (drug.isEmpty()) {
                    	planSelectorDrugspage.drugspageerror();
                    }
    }
       
       @Then("^user search and not found a drug in Drug Page$")
   	public void notfound_drugs_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorDrugspage.drugsInitiate(inputValues.get("Drug Selection"));
   		planSelectorDrugspage.drugNotFound(inputValues.get("Search Text"));
   	}
       
   	@Then("^user validate elements in additional services page$")
   	public void elements_additional_page(DataTable givenAttributes) {
   		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorAdditionalpage.additionalpage(inputValues.get("Drug Selection"));
   	}
   	
	@Then("^user selects additional services option in additional services page$")
   	public void select_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageFunctional(inputValues.get("Additional Option"));
   	}
	
	@Then("^user validates additional services error function in additional services page$")
   	public void noselect_additionalServiceOption_additional_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
   		PlanRecommendationEngineAdditionalServicesPage planSelectorAdditionalpage =  new PlanRecommendationEngineAdditionalServicesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorAdditionalpage.additionalpageerror(inputValues.get("Additional Option"));
   	}

	@Then("^user validate elements in cost preferences page$")
   	public void elements_costpreferences_page() {
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorPreferencespage.costpreferencepage();
   	}
	
	@Then("^user selects cost preferences option in cost preferences page$")
   	public void select_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage =  new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
   		planSelectorPreferencespage.costPreferencepageFunctional(inputValues.get("Preference Option"));
   	}
	
	@Then("^user validates cost preferences error function in cost preferences page$")
	public void noselect_costPreferenceOption_costpreferences_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineCostPreferencesPage planSelectorPreferencespage = new PlanRecommendationEngineCostPreferencesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String preference = inputValues.get("Preference Option");
		if (preference.isEmpty()) {
			planSelectorPreferencespage.costPreferencepageerror();
		}
	}
	
	@Then("^user validate elements in loading results page$")
   	public void elements_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//   		headerAndFooter.breadCrumbs();
   		planSelectorResultspage.resultsloadingpage();
   	}
	
	@Then("^user validate recommendations in results page$")
   	public void view_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,false);
   	}
	
	@Then("^user validate tie recommendations in results page$")
   	public void view_tie_recommendations_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String r1 = inputValues.get("1st Recommendation");
		String r2 = inputValues.get("2nd Recommendation");
		checkpopup();
		planSelectorResultspage.resultsUI(zip,county,r1,r2,true);
   	}
	
	@Then("^user validate drugs details from PRE to VPP page$")
	public void view_drugs_PRE_VPP_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.drugsDetailsPREtoVPP();
	}
	
	@Then("^user validate removed drugs details updated from VPP to PRE page$")
	public void view_removed_drugs_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.removedDrugsDetailsVPPtoPRE();
	}
	
	@Then("^user navigate to PRE using StartNow button and verify drugs details in PRE page$")
	public void startnow_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startnowtilldrugs();
	}
	
	@Then("^user proceed page navigation till VPP page after Start Now button$")
	public void view_VPP_StartNow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.startNowFullFlow(inputValues.get("Plan Type"));
	}
	
	@Then("^user validate drugs details from DCE to PRE page$")
	public void drugs_DCE_VPP_PRE_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoPRE();
	}
	
	@Then("^user validate drugs details from VPP to DCE page$")
	public void drugs_VPP_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.DrugsDetailsVPPtoDCE(inputValues.get("Drugs Name"));
	}
	
	@And("^user navigates to vpp summary page$")
   	public void navigate_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		planSelectorResultspage.navigateVPP(inputValues);
		checkpopup();
   	}
	
	@Then("^user adds Doctors in vpp summary page$")
   	public void add_providers_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.addProviderVPP(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
//		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user navigate to PRE from vpp page$")
   	public void PRE_VPP_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.vppToPre();
   	}
	
	@Then("^user clicks on GetStarted button in PRE page$")
   	public void PRE_GetStarted() {
		checkpopup();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
   	}
	
	@Then("^user navigate Doctors lookup session in Doctors page$")
	public void navigate_doctors_lookup_session() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@And("^user verifies doctors session in Doctors page$")
   	public void verify_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyProvidersSession(multiDoctor);
   	}
	
	@And("^user verifies doctors and continue to next page$")
   	public void verify_doctors_continue_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.getcontinue(multiDoctor);
   	}
	
	
	@When("^user navigates to Zip Code page from vpp plans$")
	public void user_navigates_to_zipcode_page_fromvpp_pdp() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.DCEtoPRE();
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorhomepage.navigatezipcodepage();
	}
	
	@And("^user validte zip info in location page$")
	public void user_validates_zipcodepage(DataTable inputdata) {
		PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		readfeaturedata(inputdata);
		planSelectorhomepage.zipcodeInfoValidation(inputValues);
	}
	
	@And("^user verifies Start Over doctors session in Doctors page$")
   	public void verify_StartOver_doctors_session_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorResultspage.getProvidersPRE(multiDoctor);
		planSelectorResultspage.verifyDoctorsSession(multiDoctor);
   	}
	
	@Then("^user adds Providers in Doctors page$")
	public void add_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.addProvidersPRE(inputValues.get("Doctors Search Text"),inputValues.get("Multi Doctor"));
	}
	
	@And("^user verifies doctors session in VPP page$")
   	public void verify_doctors_session_vpp_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.verifyProviderPREVPP();
   	}
	
	@Then("^user edits Doctors in Doctors page$")
	public void edit_doctors_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.editProvider(inputValues.get("Doctors Search Text1"), inputValues.get("Multi Doctor1"),
				inputValues.get("Doctors Search Text2"), inputValues.get("Multi Doctor2"));
	}
	
	@Then("^user navigates to VPP Summary Page$")
   	public void startNow_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		planSelectorResultspage.countyandViewPlan(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate zipcode and County in location page using StartNow$")
   	public void zipcode_location_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPre();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user navigate to PRE and validate zipcode using Start Over$")
   	public void zipcode_Doc_Drug_pre(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String zip = inputValues.get("Zip Code");
		String county = inputValues.get("County Name");
		String isMultiCounty = inputValues.get("Is Multi County");
		checkpopup();
		planSelectorResultspage.vppToPreStartOver();
		planSelectorResultspage.validateZipcodePage(zip,county,isMultiCounty);
   	}
	
	@Then("^user validate recommendation rankings in results page$")
   	public void verify_rankings_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String recom = inputValues.get("Recommendation");
		String plansorder = inputValues.get("Ranking plans Order");
		planSelectorResultspage.validateRankingPlans(recom,plansorder);
   	}
	
	@Then("^verify continue function on \"([^\"]*)\" page$")
    public void proceed_next_page(String page) {
     PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
     commonutli.continueNextpage(page.trim().toUpperCase(),false);
    }
	
	@And("^user verifies existing PRE provider session using startnow$")
   	public void verify_exisitng_pre_doctors_session_doctors_startnow_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		String multiDoctor = inputValues.get("Multi Doctor");
		planSelectorDoctorspage.verifyExisitngPREDoclist(multiDoctor);
		planSelectorDoctorspage.nextPageNameValidationDoctor();
   	}
	
	@And("^user verifies exisitng PRE drug session using startnow$")
   	public void verify_exisitng_pre_drugs_session_drug_startnow_page() {
		PlanRecommendationEngineDrugsPage planSelectorDrugspage =  new PlanRecommendationEngineDrugsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDrugspage.verifyExisitngPREDruglist();
		planSelectorDrugspage.continueNextpageNameDrug();
   	}
	
	@When("^user validate email plan list from vpp$")
	public void user_sendPlanEmail_fromvpp_pdp(DataTable givenAttributes) {
		checkpopup();
		readfeaturedata(givenAttributes);
		String recom = inputValues.get("Recommendation");
		String email = inputValues.get("EmailID");
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.sendEmail(recom,email);
	}
	
	@Then("^user selects Doctors in Doctors page and validate next page name$")
	public void select_doctors_next_page_name() {
		PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorDoctorspage.navigateDoctorsmodalsession();
	}
	
	@Then("^user validate UI and API recommendation rankings in results page$")
   	public void verify_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	@Then("^user verifies \"([^\"]*)\" page$")
	public void verify_vpp_summary_page_mobile(String VPP) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		if (VPP.toUpperCase().contains("PRE"))
			planSelectorResultspage.checkVPP(true);
		else
			planSelectorResultspage.checkVPP(false);
	}
	
	@Then("^user validate MA Plan Names in VPP Summary VS Details in results page$")
   	public void verify_MA_Plan_names_results_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate PDP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_PDP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan Names in VPP Summary VS Details in results page$")
   	public void verify_SNP_Plan_names_results_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanNamesSummaryAndDetails();
	}
	
	@Then("^user validate SNP Plan in Enroll page$")
   	public void verify_SNP_Plan_names() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validateSNPPlanName();
	}
	
	@Then("^user adds Drugs in vpp summary page$")
   	public void add_drugs_vpp_summary_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.useraddDrugsVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user navigate from VPP to DCE tool$")
   	public void vpp_pre() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.userPreDCE();
   	}
	
	@Then("^user validate future vs current UI and API recommendation rankings in results page$")
   	public void verify_Future_UI_API_rankings_results_page() throws JSONException {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.checkPlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
		planSelectorResultspage.changePlanyear("current");
		// Toggling back and validating as future year only have values stored in storage
		planSelectorResultspage.changePlanyear("future");
		planSelectorResultspage.validateUIAPIRecommendations();
		planSelectorResultspage.validateUIAPIRankingPlans();
   	}
	
	public void checkpopup() {
		if(if_offline_prod && !popup_clicked) {
			PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			popup_clicked = planSelectorhomepage.close_Popup();
		}
	}
	
	@Then("^user validate saved values in edit response page$")
   	public void check_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.editResponsepage(inputValues);
   	}
	
	@Then("^user return to vpp page using \"([^\"]*)\" from edit response page$")
   	public void check_saved_value_editResponse_page(String button) {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.returnVPP(button);
   	}
	
	@Then("^user edits values in edit response page$")
   	public void edit_saved_value_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.editUserResponse(inputValues);
   	}
	
	@Then("^user adds doctor in edit response page$")
   	public void add_doctor_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDoctorEditResponse(inputValues);
   	}
	
	@Then("^user navigates to edit response page$")
   	public void navigate_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateEditResponsePage(inputValues.get("Plan Type"));
   	}

	@Then("^user edits coverage value in edit response page$")
   	public void edit_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.changeCoverage(inputValues);
   	}
	
	@Then("^user validates coverage value in edit response page$")
   	public void validate_coverage_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.checkCoveragevalue(inputValues);
   	}
	
	@Then("^user adds SNP options and Location in edit response page$")
   	public void add_snp_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addSNPEditResponse(inputValues);
		preEditpage.addLocationEditResponse(inputValues);
   	}
	
	@Then("^user selects add drug option in drug page from edit response page$")
   	public void add_drug_editResponse_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.addDrugs(inputValues);
   	}
	
	@Then("^user save plans in vpp summary and Validate in Visitor profile page$")
	public void user_verify_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateCombineSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user save 2 MA plans in vpp summary and Validate in Visitor profile page$")
	public void user_saveplan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.changePlanyear(inputValues.get("Plan Year"));
		planSelectorResultspage.validateSavePlan(inputValues.get("Plan Year"));
	}
	
	@Then("^user Validate Drug and Provider details in Visitor profile page$")
	public void user_verify_drug_provider() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateDrugProvider();
	}
	
	@Given("^the user is on external acquisition site landing page$")
	public void the_user_on_external_Site(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		WebDriver wd = getLoginScenario().getWebDriverNew();
		AcquisitionHomePage aquisitionhomepage = new AcquisitionHomePage(wd,"PRE");
		aquisitionhomepage.openExternalLinkPRE(inputValues.get("Site Name"));
		getLoginScenario().saveBean(CommonConstants.WEBDRIVER, wd);
		getLoginScenario().saveBean(PageConstants.ACQUISITION_HOME_PAGE,
				aquisitionhomepage);
		checkpopup();
	}
	
	@When("^user navigate to Plan Recommendation Engine Tool$")
	public void the_user_external_PRE(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.navigatePRE(inputValues);
	}
	
	@Then("^user selects priority in priorities page$")
	public void user_selects_priorities(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesFunctional(inputValues.get("Priority Option"),inputValues.get("Priorities"));
		priorities.continuePriority();
	}

	@Then("^user validate elements in priorities page$")
	public void user_validate_prioritiesElements() {
		PlanRecommendationEnginePrioritiesPage priorities =  new PlanRecommendationEnginePrioritiesPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		priorities.prioritiesElements();
	}
	
	@Then("^user validate PDP Plan Names in VPP Details and Click Enroll button in Plan Details page$")
   	public void verify_Plan_names_Enroll_page() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.validatePDPPlanNamesAndEnroll();
	}
	
	@When("^user navigate to Drug Cost Estimator page$")
	public void navigate_DCE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToDrugCostEstimatorViaShopTools();
	}
	
	@And("^user validate druglist in Drug Cost Estimator page$")
	public void Druglist_DCE() {
		ACQDrugCostEstimatorPage dceDrugs =  new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dceDrugs.getDruglist();
	}
	
	@Then("^user adds Drugs in Drug Cost Estimator page$")
   	public void add_drugs_DCE_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		ACQDrugCostEstimatorPage dce = new ACQDrugCostEstimatorPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		dce.useraddDrugsDCEWithoutVPP(inputValues.get("Drug Details"));
   	}
	
	@Then("^user validate navigate to Get a Plan Recomendation page$")
	public void navigate_PRE() {
		PlanRecommendationEngineHeaderAndFooter headerAndFooter =  new PlanRecommendationEngineHeaderAndFooter((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		headerAndFooter.navigationToPlanRecommendationEngine();
	}
	
	@Then("^user save recommendation results and validate in VP$")
   	public void save_results() {
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		preEditpage.validateSaveResults();
	}
	
	@Then("^user navigate to visitor profile and open PRE Widget$")
    public void pre_Widget_open(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithoutMSPlan(inputValues.get("User Type"));
    }
	
	@And("^user Click on Getstarted in PRE Home Page and Continue till Covergae page$")
    public void I_click_questionnaire_first() {
        PlanRecommendationEngineLandingAndZipcodePages planSelectorhomepage =  new PlanRecommendationEngineLandingAndZipcodePages((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorhomepage.getStartedContinueZipcode();
    }
	
	@Then("^user select plans in VPP Summary and navigate to Plan Compare page$")
   	public void verify_Plans_compare_page() {
		checkpopup();
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.validateMAPlanNamesPlanCompare();
	}
	
	@And("^user validate buttons in SaveResult Model and PRE Widget in VP$")
	public void btn_SaveResult_Widget(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.navigateSaveResultsPage();
		preEditpage.PRESaveResultModelBtn();
		preEditpage.ValidatePREWidget(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user creates a \"([^\"]*)\" tab from PRE$")
   	public void create_tab(String tabtype) {
		PlanRecommendationEngineCommonutility commonutli =  new PlanRecommendationEngineCommonutility((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
//		commonutli.creatingTab(tabtype.toUpperCase());
   	}
	
	@Then("^user validate recommendation section in PRE Widget on VP$")
    public void pre_Widget_recom() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorResultspage.recomPREWidget();
    }
	
	@Then("^user validate a \"([^\"]*)\" buttons from PRE$")
   	public void btn_tab(String tabtype) {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.validateLinks(tabtype);
   	}
	
	@Then("^user navigate to visitor profile with saving MS plan$")
    public void Guest_Profile_MSPlan(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorResultspage.SavingMsplan();
		preEditpage.shoppingcartNavigation(inputValues.get("User Type"),inputValues.get("Plan Type"), inputValues.get("User Name"),inputValues.get("Password"));
		planSelectorResultspage.ValidatePREWithMSPlan();
    }
	
	@When("^user Sigin visitor profile from PRE$")
	public void sign_vp(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineEditResponsePage preEditpage =  new PlanRecommendationEngineEditResponsePage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		preEditpage.SignIn(inputValues.get("User Name"),inputValues.get("Password"));
	}
	
	@Then("^user do browser back from current page$")
   	public void browser_back() {
		PlanRecommendationEngineResultsPage planSelectorResultspage =  new PlanRecommendationEngineResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
			planSelectorResultspage.browserBack();
   	}
	
	/////////////////////////////////////////////////////// New Results Page //////////////////////////////
	
	@Then("^user validate elements in PRE results page$")
   	public void elements_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		checkpopup();
		planSelectorNewResultspage.preResultsUI(inputValues.get("Zip Code"),inputValues.get("CountyDropDown"));
   	}
	
	@Then("^user validate pagination in PRE results page$")
   	public void pagination_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validatePagination();
		//planSelectorNewResultspage.findPlan();
   	}
	
	@Then("^user validate drugDetails in PRE results page$")
   	public void drugDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"tile");
   	}
	
	@Then("^user validate doctors info in PRE results page$")
   	public void doctorDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		//checkpopup();
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"tile");
   	}
	
	@And("^user selects empty doctors in doctors page$")
    public void zeroDoctor_doctor_page(DataTable givenAttributes) throws Throwable {
        readfeaturedata(givenAttributes);
        PlanRecommendationEngineDoctorsPage planSelectorDoctorspage =  new PlanRecommendationEngineDoctorsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
        planSelectorDoctorspage.addZeroProviders(inputValues.get("Doctors Search Text"));
     }
	
	@Then("^user validate snp info in PRE results page$")
   	public void snpDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateSNPInfo(inputValues.get("SNPInfo"));
   	}
	
	@Then("^user views plan details from results page$")
   	public void viewDetails_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.viewPlanInfo(inputValues.get("planInfo"));
   	}
	
	@Then("^user views learn more from results page$")
   	public void learnMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.learnMore(inputValues.get("Learn More"));
   	}

	@Then("^user validate drugCostModal in PRE results page$")
   	public void drugDetailsModel_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"model");
   	}
	
	@Then("^user validate showmoreDrug in PRE results page$")
   	public void drugShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDrugInfo(inputValues.get("DrugInfo"),"show");
   	}
	
	@Then("^user validate showmoreDoctor in PRE results page$")
   	public void doctorShowMore_new_results_page(DataTable givenAttributes) {
		readfeaturedata(givenAttributes);
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.validateDoctorInfo(inputValues.get("DoctorsInfo"),"show");
   	}
	
	@Then("^the user do poc$")
   	public void poc_new_results_page() {
		PlanRecommendationEngineNewResultsPage planSelectorNewResultspage =  new PlanRecommendationEngineNewResultsPage((WebDriver) getLoginScenario().getBean(CommonConstants.WEBDRIVER));
		planSelectorNewResultspage.poc();
   	}

	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:34:06.745
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:34:06.745
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:34:06.745
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:34:06.747
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:34:06.747
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.ui 4 0 2021-07-16 15:34:10.974
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:34:37.976
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:34:37.978
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:36:22.033
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:36:22.035
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:36:27.956
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.html5.SessionStorage;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import acceptancetests.acquisition.planRecommendationEngine.PlanRecommendationEngineStepDefinition;
import acceptancetests.util.CommonUtility;
import atdd.framework.UhcDriver;
import pages.acquisition.commonpages.AcquisitionHomePage;
import pages.acquisition.commonpages.VPPPlanSummaryPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDoctorsPage;
import pages.acquisition.planRecommendationEngine.PlanRecommendationEngineDrugsPage;
import pages.mobile.acquisition.planrecommendationengine.DoctorsMobilePage;
import pages.mobile.acquisition.planrecommendationengine.DrugMobilePage;

public class PlanRecommendationEngineNewResultsPage extends UhcDriver {

	public PlanRecommendationEngineNewResultsPage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	/*
	 * // Doctors FLow
	 * 
	 * Access to doctors participating in the UnitedHealthcare Medicare Network -
	 * True only
	 * 
	 * Access to in-network costs when you see doctors participating in the
	 * UnitedHealthcare Medicare Network - True only
	 * 
	 * Medicare
	 * 
	 * UnitedHealthcare local or National Network required - True and false
	 * 
	 * See any provider nationwide that accepts Medicare Patients and access to
	 * in-network costs when you see doctors participating in the UnitedHealthcare
	 * Medicare Network
	 * 
	 * See any provider1 nationwide that accepts Medicare Patients and access to
	 * in-network costs when you see doctors participating in the UnitedHealthcare
	 * Medicare national Network
	 * 
	 * No: You haven't added any doctors yet. If you would like to add your doctors,
	 * please use the "Edit Your Responses" button at the top of the page
	 */

	@Override
	public void openAndValidate() {
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DocInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

// Results loading page Elements

	@FindBy(css = "#loadingText")
	private WebElement resultsloadingTitle;

	@FindBy(css = ".loading-container .container>div>div>div:nth-of-type(2)>img")
	private WebElement svgAnimation;

	@FindBy(css = "div>img[alt*='Loading Plan Recommendations']")
	private WebElement loadingImage;

	// Result Page Elements

	@FindBy(css = "body>div#overlay")
	private WebElement planLoaderscreen;

	@FindBy(css = "div[class*='resultsPre'] h1")
	private WebElement planZipInfo;

	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;

	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;

	@FindBy(css = ".view-ms-plans a")
	private WebElement viewMSPlans;

	@FindBy(css = "label[for*='recommendSort']")
	private WebElement sortByLabel;

	@FindBy(css = "#recommendSort option")
	private List<WebElement> sortByOptions;

	// Pagination

	@FindBy(css = ".returnSection button.buttonLink")
	private WebElement returnToBeginning;

	@FindBy(css = ".returnSection span#viewMorePlans")
	private WebElement pagenoLabel;

	@FindBy(css = ".paginationSection button[class*='view-plans-next']")
	private WebElement pageNextButton;

	@FindBy(css = ".paginationSection button[class*='view-plans-next disabled']")
	private WebElement pageNextButtonDisabled;

	@FindBy(css = ".paginationSection button[class*='view-plans-prev']")
	private WebElement pagePreviousButton;

	@FindBy(css = ".paginationSection button[class*='view-plans-prev disabled']")
	private WebElement pagePreviousButtonDisabled;

	// Plan Tile Elements

	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;

	@FindBy(css = "#modal")
	private WebElement drugModel;

	@FindBy(css = "#modal button")
	private WebElement drugModelClose;

	// Bottom Result page Elements

	@FindBy(css = "div[class*='resourcesSection'] h2")
	private WebElement resourcesTitle;

	@FindBy(css = ".moreAboutPlansSection h2")
	private WebElement moreAboutPlanTypesTitle;

	@FindBy(css = ".moreAboutPlansSection p")
	private WebElement moreAboutPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] .accordion-title h3")
	private WebElement mapdPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] span[class*='accordion-arrow'] svg")
	private WebElement mapdPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] p")
	private WebElement mapdPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Advantage Plans'] a")
	private WebElement mapdPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] .accordion-title h3")
	private WebElement madsupPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] span[class*='accordion-arrow'] svg")
	private WebElement madsupPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] p")
	private WebElement madsupPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Supplement Insurance'] a")
	private WebElement madsupPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] .accordion-title h3")
	private WebElement pdpPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] span[class*='accordion-arrow'] svg")
	private WebElement pdpPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] p")
	private WebElement pdpPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Medicare Prescription Drug'] a")
	private WebElement pdpPlanTypesLearnmoreLink;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] .accordion-title h3")
	private WebElement dsnpPlanTypesTitle;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] span[class*='accordion-arrow'] svg")
	private WebElement dsnpPlanTypesFlipArrow;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] p")
	private WebElement dsnpPlanTypesPara;

	@FindBy(css = "uhc-accordion[ng-reflect-title*='Dual Special Needs'] a")
	private WebElement dsnpPlanTypesLearnmoreLink;

	// Plan details page

	@FindBy(css = "div.content h2")
	private WebElement planNameDetailsPage;

//Result Loading Page Element Verification Method 

	public void resultsloadingpage() {
		System.out.println("Validating Results loading Page: ");
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		validate(resultsloadingTitle);
		validate(svgAnimation);
		validate(loadingImage);
	}

//Results Page Element Verification Method	

	public void waitforResultsPage() {
		pageloadcomplete();
		waitForPageLoadSafari();
		validate(planZipInfo, 60);
		threadsleep(1000);
	}

	public void preResultsUI(String zip, String county) {
		System.out.println("Validating PRE Results UI Page: ");
		waitforResultsPage();
		Assert.assertTrue(planZipInfo.getText().contains(zip), "Invalid Zip");
		Assert.assertTrue(planZipInfo.getText().toUpperCase().contains(county.toUpperCase()), "Invalid County");
		Assert.assertTrue(Integer.parseInt(planZipInfo.getText().split(" ")[4]) > 0, "Total Plan count is less than 1");
		Assert.assertTrue(validate(editYourResponse, 60), " Issue in Edit Your Response button");
		Assert.assertTrue(validate(saveYourResults, 60), " Issue in Save Your Results button");
		Assert.assertTrue(validate(viewMSPlans, 60), " Issue in View MS Plans button");
		// Assert.assertTrue(sortByLabel.getText().contains("Sort By :"), "Invalid Sort
		// Text");
		// Assert.assertTrue(resourcesTitle.getText().contains("Resources"), "Invalid
		// Resources Text");
		Assert.assertTrue(moreAboutPlanTypesTitle.getText().contains("More About Plan Types"),
				"Invalid More About Plan Types Text");
		// scrollToView(moreAboutPlanTypesTitle);
		validate(moreAboutPlanTypesPara, 60);
		Assert.assertTrue(mapdPlanTypesTitle.getText().contains("Medicare Advantage Plans (Part C)"),
				"Invalid MAPD Text. Returned value " + mapdPlanTypesTitle.getText());
		validate(mapdPlanTypesPara, 60);
		Assert.assertTrue(mapdPlanTypesLearnmoreLink.getText().contains("Learn More About"),
				"Learn More About link not displayed");
		// Assert.assertTrue(madsupPlanTypesTitle.getText().contains("Medicare
		// Supplement Insurance Plans (Medigap)"),
		// "Invalid MADSUP Text");
		// validate(madsupPlanTypesPara, 60);
		Assert.assertFalse(validate(madsupPlanTypesPara, 10), "Medsub section should not display for July release");
		// Assert.assertTrue(madsupPlanTypesLearnmoreLink.getText().contains("Learn More
		// About"),
		// "Learn More About link not displayed");
		Assert.assertTrue(pdpPlanTypesTitle.getText().contains("Medicare Prescription Drug Plans (Part D)"),
				"Invalid PDP Text");
		validate(pdpPlanTypesPara, 60);
		Assert.assertTrue(pdpPlanTypesLearnmoreLink.getText().contains("Learn More About"),
				"Learn More About link not displayed");
		Assert.assertTrue(validate(dsnpPlanTypesTitle, 60), " Issue in DSNP Title");
		Assert.assertTrue(validate(dsnpPlanTypesPara, 60), " Issue in DSNP Text Area");
		Assert.assertTrue(validate(dsnpPlanTypesLearnmoreLink, 60), " Issue in DSNP Learnmore linke");
		threadsleep(3000);
		mapdPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(mapdPlanTypesLearnmoreLink);
		threadsleep(3000);
		// madsupPlanTypesFlipArrow.click();
		// validateNonPresenceOfElement(madsupPlanTypesLearnmoreLink);
		// threadsleep(3000);
		pdpPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(pdpPlanTypesLearnmoreLink);
		threadsleep(3000);
		dsnpPlanTypesFlipArrow.click();
		validateNonPresenceOfElement(dsnpPlanTypesFlipArrow);
	}

	public void validatePagination() {
		System.out.println("Validating Pagination Functionality");
		waitforResultsPage();
		Assert.assertTrue(validate(pagenoLabel, 20), " Page count is not available");
		String pageCount1 = pagenoLabel.getText().trim();
		Assert.assertTrue(validate(pagePreviousButtonDisabled, 60), " Previous button Enabled in pagination");
//		Assert.assertFalse(validate(returnToBeginning, 3), " Return to Beginning is displayed");
		Assert.assertTrue(validate(pageNextButton, 60), "Next button is not available in pagination");
		pageNextButton.click();
		threadsleep(2000);
		Assert.assertFalse(validate(pagePreviousButtonDisabled, 60), " Previous button Disabled in pagination");
//		Assert.assertTrue(returnToBeginning.getText().contains("Return to beginning"), "Invalid Return to beginning Text");
		pagePreviousButton.click();
		threadsleep(2000);
		Assert.assertTrue(validate(pagePreviousButtonDisabled, 60), " Previous button Enabled in pagination");
//		Assert.assertFalse(validate(returnToBeginning, 3), " Return to Beginning is displayed");
		String pageCount2 = pagenoLabel.getText().trim();
		Assert.assertEquals(pageCount1, pageCount2, "Page count in not matching");
		int totalPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[1]);

		for (int i = 1; i <= totalPage; i++) {
			pageCount1 = pagenoLabel.getText().trim();
			int currentPage = Integer
					.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[0].replace("page", ""));
			Assert.assertEquals(i, currentPage, "Page count is mismatch after pagenation");
			if (i == totalPage) {
				Assert.assertTrue(validate(pageNextButtonDisabled, 60), " Next button Enabled in pagination");
//				Assert.assertTrue(returnToBeginning.getText().contains("Return to beginning"),"Invalid Return to beginning Text");
			} else {
				pageNextButton.click();
				threadsleep(2000);
			}
		}
	}

	public int findPlan(String uniqueName) {
		System.out.println("Finding a Plan...");
		waitforResultsPage();
		String pageCount1 = pagenoLabel.getText().trim();
		int currentPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[0].replace("page", ""));
		if(currentPage != 1) {
			for(int c = 1; c < currentPage; c++) {
				pagePreviousButton.click();
				threadsleep(2000);
			}
		}
		boolean planAvailable = false;
		// String uniqueName = "Plan 1 (Regional PPO)";
		// int totalPlans = plantiles.size();
//		String pageCount1 = pagenoLabel.getText().trim();
		int totalPage = Integer.parseInt(pageCount1.toLowerCase().replace(" ", "").split("of")[1]);
		int i = 1, planIndex = 0;
		do {
			// 3 plans per page
			for (int k = 0; k < 3; k++) {
				String planName = plantiles.get(planIndex).findElement(By.cssSelector("h2>a")).getText().trim();
				if (planName.contains(uniqueName.trim())) {
					planAvailable = true;
					break;
				}
				planIndex++;
			}
			if (i == totalPage || planAvailable) {
				break;
			}
			pageNextButton.click();
			threadsleep(2000);
			i++;
		} while (i <= totalPage);
		System.out.println("planAvailable - " + planAvailable);
		if (!planAvailable)
			planIndex = -1;
		return planIndex;
	}

	public void validateDrugInfo(String drugsInfo, String location) {
		System.out.println("Validating Drug Info...");
		String planName = "", drugName = "", drugStatus = "";
		String[] drugslist = drugsInfo.split(":");
		for (int i = 0; i < drugslist.length; i++) {
			String drugInfo = drugslist[i];
			if (drugInfo.trim().length() > 0) {
				String[] drugDetails = drugInfo.split(",");
				planName = drugDetails[0];
				drugName = drugDetails[1];
				drugStatus = drugDetails[2];
				if (location.toLowerCase().contains("tile"))
					verifyDrugdata(planName, drugName, drugStatus);
				if (location.toLowerCase().contains("model"))
					verifyDrugdataModel(planName, drugName, drugStatus);
				if (location.toLowerCase().contains("show"))
					verifyDrugShowMore(planName, drugName);
			}
		}
	}

	public void verifyDrugdata(String planName, String drugName, String drugStatus) {
		int planIndex = findPlan(planName);
		String drugText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='displayDrugsUI']")).getText()
				.trim();
		// String drugText =
		// plantiles.get(planIndex).findElement(drugInfo).getText().trim();
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in plan - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='displayDrugsUI'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='displayDrugsUI'] span[class^='non-covered']")).size();
		System.out.println("Validating Drug Coverage...");
		if (drugStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else if (drugStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero drugs");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero drugs");
		}

	}

	public void validateDoctorInfo(String doctorsInfo, String location) {
		System.out.println("Validating Doctor Info...");
		String planName = "", doctorName = "", doctorStatus = "";
		String[] doctorslist = doctorsInfo.split(":");
		for (int i = 0; i < doctorslist.length; i++) {
			String doctorInfo = doctorslist[i];
			if (doctorInfo.trim().length() > 0) {
				String[] doctorDetails = doctorInfo.split(",");
				planName = doctorDetails[0];
				doctorName = doctorDetails[1];
				doctorStatus = doctorDetails[2];
				if(location.toLowerCase().contains("tile"))
					verifyDoctordata(planName, doctorName, doctorStatus);
				else
					verifyDoctorShowMore(planName, doctorName);
			}
		}
	}

	public void verifyDoctordata(String planName, String doctorName, String doctorStatus) {
		int planIndex = findPlan(planName);
		String doctorText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='providerSection']"))
				.getText().trim();
		Assert.assertTrue(doctorText.contains(doctorName), "Doctor details not found in plan - " + planName);
		// Either all True or all False Doctors for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='providerSection'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("div[class*='providerSection'] span[class^='non-covered']")).size();
		System.out.println("Validating Doctor Coverage...");
		if (doctorStatus.toLowerCase().contains("true")) {
			// Below is the Text to be validated
			if (doctorName.toLowerCase().contains("Access to doctors".toLowerCase())
					|| doctorName.toLowerCase().contains("Access to in-network".toLowerCase())
					|| doctorName.toLowerCase().contains("local or National".toLowerCase())
					|| doctorName.toLowerCase().contains("any provider".toLowerCase())) {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").contains(doctorName.toLowerCase().replace(" ", "")),
						"Doctor Description is Invalid in plan - " + planName);
			} else {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").replace("\n", "")
								.contains(doctorName.toLowerCase().replace(" ", "") + "In-Network".toLowerCase()),
						"Doctor details Invalid in plan - " + planName);
			}
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all Doctors covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all Doctors not covered for a plan");
		} else if (doctorStatus.toLowerCase().contains("false")) {

			if (doctorName.toLowerCase().contains("Access to doctors".toLowerCase())
					|| doctorName.toLowerCase().contains("Access to in-network".toLowerCase())
					|| doctorName.toLowerCase().contains("local or National".toLowerCase())
					|| doctorName.toLowerCase().contains("any provider".toLowerCase())
					|| doctorName.toLowerCase().contains("do not provide".toLowerCase())) {
				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").contains(doctorName.toLowerCase().replace(" ", "")),
						"Doctor Description is Invalid in plan - " + planName);
			} else {

				Assert.assertTrue(
						doctorText.toLowerCase().replace(" ", "").replace("\n", "")
								.contains(doctorName.toLowerCase().replace(" ", "") + "Out-Of-Network".toLowerCase()),
						"Doctor details Invalid in plan - " + planName);
			}
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all Doctors covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all Doctors not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero Doctors");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero Doctors");
		}
	}

	public void validateSNPInfo(String snpsInfo) {
		System.out.println("Validating SNP Info...");
		String planName = "", snpName = "", snpStatus = "";
		String[] snpslist = snpsInfo.split(":");
		for (int i = 0; i < snpslist.length; i++) {
			String drugInfo = snpslist[i];
			if (drugInfo.trim().length() > 0) {
				String[] drugDetails = drugInfo.split(",");
				planName = drugDetails[0];
				snpName = drugDetails[1];
				snpStatus = drugDetails[2];
				verifySNPdata(planName, snpName, snpStatus);
			}
		}
	}

	public void verifySNPdata(String planName, String snpName, String snpStatus) {
		int planIndex = findPlan(planName);
		String snpText = plantiles.get(planIndex).findElement(By.cssSelector("*[class*='special-needs-ul']")).getText()
				.trim();
		Assert.assertTrue(snpText.contains(snpName), "SNP details not found in plan - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = plantiles.get(planIndex)
				.findElements(By.cssSelector("*[class*='special-needs-ul'] span[class^='covered']")).size();
		nonCovered = plantiles.get(planIndex)
				.findElements(By.cssSelector("*[class*='special-needs-ul'] span[class^='non-covered']")).size();
		System.out.println("Validating SNP Coverage...");
		if (snpStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered.");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered");
		} else if (snpStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered.");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered.");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be No coverage icon");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be No coverage icon");
		}
	}

	public void viewPlanInfo(String planInfo) {
		System.out.println("Navigating Plans Info...");
		String planName = "", planAction = "";
		String[] planDetails = planInfo.split(",");
		planName = planDetails[0];
		planAction = planDetails[1];
		int planIndex = findPlan(planName);

		if (planAction.toLowerCase().contains("link")) {
			String planFullName = plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).getText().trim();
			plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).click();
			validate(planNameDetailsPage, 60);
			Assert.assertTrue(planNameDetailsPage.getText().toLowerCase().contains(planFullName.toLowerCase()),
					"Not navigated to Plan details page");
		}
		if (planAction.toLowerCase().contains("viewbutton")) {
			String planFullName = plantiles.get(planIndex).findElement(By.cssSelector(".planName a")).getText().trim();
			plantiles.get(planIndex).findElement(By.cssSelector(".enrollSection>.sub-content button")).click();
			validate(planNameDetailsPage, 60);
			Assert.assertTrue(planNameDetailsPage.getText().toLowerCase().contains(planFullName.toLowerCase()),
					"Not navigated to Plan details page");
		}
	}

	public void learnMore(String learnMore) {
		waitforResultsPage();
		String curURL = driver.getCurrentUrl();

		if (learnMore.contains("Advantage"))
			mapdPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Supplement"))
			madsupPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Drug"))
			pdpPlanTypesLearnmoreLink.click();
		if (learnMore.contains("Special"))
			dsnpPlanTypesLearnmoreLink.click();

		threadsleep(5000);
		String newURL = driver.getCurrentUrl();
		Assert.assertFalse(curURL.contains(newURL), "Invalid Navigation");

	}

	public void verifyDrugdataModel(String planName, String drugName, String drugStatus) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector(".buttonLinkSection button")).click();
		String drugText = drugModel.getText().trim();
		Assert.assertTrue(drugText.contains(planName), "Plan Name not found in drug model - " + planName);
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in drug model - " + planName);
		// Either all True or all False drugs for a plan
		int covered = 0, nonCovered = 0;
		covered = drugModel.findElements(By.cssSelector("span[class^='covered']")).size();
		nonCovered = drugModel.findElements(By.cssSelector("span[class^='non-covered']")).size();
		System.out.println("Validating Drug Coverage in Model...");
		if (drugStatus.toLowerCase().contains("true")) {
			Assert.assertTrue(covered > 0, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered < 1, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else if (drugStatus.toLowerCase().contains("false")) {
			Assert.assertTrue(covered < 1, "Mismatch in Covered. Make all drugs covered for a plan");
			Assert.assertTrue(nonCovered > 0, "Mismatch in Not Covered. Make all drugs not covered for a plan");
		} else {
			Assert.assertTrue(covered == 0, "Mismatch in Covered. Should be Zero drugs");
			Assert.assertTrue(nonCovered == 0, "Mismatch in Not Covered. Should be Zero drugs");
		}
		drugModelClose.click();
		threadsleep(2000);
	}
	
	public void verifyDrugShowMore(String planName, String drugName) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showAllDrugsId']")).click();
		String drugText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='displayDrugsUI']")).getText()
				.trim();
		Assert.assertTrue(drugText.contains(drugName), "Drug details not found in plan - " + planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showLessDrugsId']")).click();
	}
	
	public void verifyDoctorShowMore(String planName, String doctorName) {
		int planIndex = findPlan(planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showAllDoctorsId']")).click();
		String doctorText = plantiles.get(planIndex).findElement(By.cssSelector("div[class*='providerSection']"))
				.getText().trim();
		Assert.assertTrue(doctorText.contains(doctorName), "Doctor details not found in plan - " + planName);
		plantiles.get(planIndex).findElement(By.cssSelector("button[id*='showLessDoctorsId']")).click();
	}
	
	String sampleJson = "{\"preferences\":[{\"questionId\":\"planType\",\"answers\":[{\"id\":\"co_ma\"}]},{\"questionId\":\"snpType\",\"answers\":[{\"id\":\"snp_none\"}]},{\"questionId\":\"doctorPref\",\"answers\":[{\"id\":\"doctor_accepts_medicare\"}]},{\"questionId\":\"additional-dental\",\"answers\":[{\"id\":\"as_dental_no\"}]},{\"questionId\":\"additional-hearing\",\"answers\":[{\"id\":\"as_hearing_no\"}]},{\"questionId\":\"additional-vision\",\"answers\":[{\"id\":\"as_vision_no\"}]},{\"questionId\":\"additional-fitness membership\",\"answers\":[{\"id\":\"as_fitness_no\"}]},{\"questionId\":\"healthCarePref\",\"answers\":[{\"id\":\"cs_low\"}]}],\"planYear\":2021,\"location\":{\"zipcode\":\"10001\",\"selectedCounty\":{\"fipsCountyCode\":\"061\",\"fipsCountyName\":\"New York County\",\"fipsStateCode\":\"36\",\"stateCode\":\"NY\",\"cmsCountyCodes\":[\"420\"]}}}";
	
	public void poc() {
		System.out.println("Doing POC.....");
		String StorageKey = "ucp_planRecommendationObj",value = sampleJson;
		JavascriptExecutor js = ((JavascriptExecutor) driver);
		threadsleep(5000);
		try {
		js.executeScript(String.format("window.sessionStorage.setItem('%s','%s');", StorageKey,value));
		}
		catch(Exception e1) {
			System.out.println("data");
		}
		
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:36:27.958
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:36:27.959
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:36:27.959
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:36:27.960
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:36:27.960
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:36:27.973
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:36:27.978
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:36:29.377
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:36:29.379
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:34.061
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:34.063
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:35.914
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:35.917
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:37.493
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:37.495
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:39.058
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:39.060
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:37:44.905
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("travel")) {

			UIValue = inputValues.get("Travel Options");
			UIValue = UIValue.replace("withinUS", "within").replace("OutsideUS", "another part").replace("regular",
					"routine");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("travel")) {
			PlanRecommendationEngineTravelPage travel = new PlanRecommendationEngineTravelPage(driver);
			travel.edit_travel(inputValues.get("Travel Options"));
			jsClickNew(saveBtn);
			checkContent("travel");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:44.907
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:37:44.907
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:37:44.907
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:44.909
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:37:44.909
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:44.926
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:44.934
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:46.411
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:46.415
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:47.608
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:47.610
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:49.146
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:49.148
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:50.007
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:50.010
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:50.901
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:50.903
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:51.411
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:51.413
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:51.556
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:51.558
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:52.909
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:52.911
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:55.101
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:55.103
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:56.464
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:56.466
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:37:57.350
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:37:57.352
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:14.965
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:14.967
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:15.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:15.492
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:15.744
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:15.746
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:18.712
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:18.715
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:18.729
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:18.731
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:27.358
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:27.361
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:30.614
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:30.616
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:36.759
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:36.761
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:39.536
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:39.538
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:41.773
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:41.775
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:42.087
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:42.089
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:38:42.981
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		}  else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("travel")) {
			PlanRecommendationEngineTravelPage travel = new PlanRecommendationEngineTravelPage(driver);
			travel.edit_travel(inputValues.get("Travel Options"));
			jsClickNew(saveBtn);
			checkContent("travel");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:43.002
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:43.002
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:43.002
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:43.005
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:43.005
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:43.178
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:43.180
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:38:44.518
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("travel")) {
			PlanRecommendationEngineTravelPage travel = new PlanRecommendationEngineTravelPage(driver);
			travel.edit_travel(inputValues.get("Travel Options"));
			jsClickNew(saveBtn);
			checkContent("travel");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:44.521
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:44.521
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:44.521
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:44.523
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:44.523
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:44.615
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:44.617
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:38:47.039
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("travel")) {
			PlanRecommendationEngineTravelPage travel = new PlanRecommendationEngineTravelPage(driver);
			travel.edit_travel(inputValues.get("Travel Options"));
			jsClickNew(saveBtn);
			checkContent("travel");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:38:47.056
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:47.056
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:47.056
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:38:47.060
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:38:47.060
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:39:32.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:39:32.752
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:39:43.405
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:39:43.408
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:39:45.694
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:39:45.696
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:39:45.808
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:39:45.810
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:39:46.698
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:39:46.701
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:07.604
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:07.606
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:08.596
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:08.598
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:10.476
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:10.478
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:20.541
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:20.543
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:21.538
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:21.540
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:27.489
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:27.491
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:28.107
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:28.109
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:29.885
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:29.887
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:38.334
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
org.eclipse.jdt.internal.compiler.problem.AbortCompilation: 
	at org.eclipse.jdt.internal.core.CancelableProblemFactory.createProblem(CancelableProblemFactory.java:30)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.createProblem(ProblemHandler.java:79)
	at org.eclipse.jdt.internal.compiler.Compiler.handleInternalException(Compiler.java:710)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.handleInternalException(CompilationUnitResolver.java:364)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1237)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1208)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:823)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:546)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:538)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:481)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:38.352
!MESSAGE Error in JDT Core during AST creation
!STACK 0
org.eclipse.jdt.internal.compiler.problem.AbortCompilation: 
	at org.eclipse.jdt.internal.core.CancelableProblemFactory.createProblem(CancelableProblemFactory.java:30)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.createProblem(ProblemHandler.java:79)
	at org.eclipse.jdt.internal.compiler.Compiler.handleInternalException(Compiler.java:710)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.handleInternalException(CompilationUnitResolver.java:364)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1237)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1208)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:823)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:546)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:538)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:481)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:56)

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:38.917
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:38.919
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:43.369
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:43.371
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:51.232
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:51.234
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:52.025
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:52.026
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:54.605
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:54.607
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:56.055
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:56.057
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:57.031
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:57.033
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:40:58.580
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		}  else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:58.583
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:58.584
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:58.584
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:58.585
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:58.585
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:58.597
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:58.599
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:40:59.599
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:59.602
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:59.602
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:59.602
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:59.604
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:40:59.604
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:40:59.619
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:40:59.621
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:41:03.620
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:03.627
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:03.627
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:03.628
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:03.630
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:03.630
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 15:41:08.165
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
/**
* 
 */
package pages.acquisition.planRecommendationEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import pages.acquisition.commonpages.GlobalWebElements;

public class PlanRecommendationEngineEditResponsePage extends GlobalWebElements {

	public PlanRecommendationEngineEditResponsePage(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
	}

	@Override
	public void openAndValidate() {
		checkModelPopup(driver);
		clickIfElementPresentInTime(driver, proactiveChatExitBtn, 30);
		waitTillFrameAvailabeAndSwitch(iframePst, 45);
	}

	String flow;
	ArrayList<String> DrugsInPRE;
	ArrayList<String> DrugsInDCE;
	ArrayList<String> DrugsList = new ArrayList<String>();
	ArrayList<String> ModelDrugsList = new ArrayList<String>();
	static ArrayList<String> werallyResults = new ArrayList<String>();
	static ArrayList<String> vppResults = new ArrayList<String>();
	static ArrayList<String> vppProviderResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults = new ArrayList<String>();
	static ArrayList<String> confirmationResults1 = new ArrayList<String>();
	static ArrayList<String> confirmationProviderResults = new ArrayList<String>();
	public WebElement drugCoveredeVPP;
	PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);

	PlanRecommendationEngineCommonutility desktopCommonUtils = new PlanRecommendationEngineCommonutility(driver);

	@FindBy(id = "planSelectorTool")
	private WebElement iframePst;

	@FindBy(css = "div.progress-bar-info")
	private WebElement progressInfo;

	@FindBy(css = "button[class*='button-secondary']")
	private WebElement cancelButton;

	@FindBy(css = "button[class*='button-primary']")
	private WebElement saveButton;
	
	@FindBy(css = ".editPref button")
	private WebElement editYourResponse;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] a")
	private WebElement MAViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-3'] a")
	private WebElement PDPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] a")
	private WebElement SNPViewPlansLink;
	
	@FindBy(css = "div[data-rel='#plan-list-1'] span.ng-binding")
	private WebElement MAPlanCount;
	
	@FindBy(css = "div[data-rel='#plan-list-4'] span.ng-binding")
	private WebElement SNPPlanCount;

	//Save Results elements
	
	@FindBy(css = ".saveRes button")
	private WebElement saveYourResults;
	
	@FindBy(css = "#saveResultConfirmationTitle")
	private WebElement saveResultsTitle;
	
	@FindBy(css = "#saveResultPopupClose")
	private WebElement saveResultsPopupClose;
	
	@FindBy(xpath = "//button[contains(text(),'Sign In')]")
	private WebElement SignInButton;
	
	@FindBy(css = "#cancelButton")
	private WebElement cancelLink;
	
	@FindBy(css = "button#keepShoppingBtn")
	private WebElement KeepShoppingPlansButton;
	
	@FindBy(css = "button#viewPlanBtn")
	private WebElement ViewProfileButton;
	
	@FindBy(css = "li.planTileGrid")
	private List<WebElement> plantiles;
	
	@FindBy(xpath = "//button[contains(text(),'Create Profile')]")
	private WebElement CreateProfileButton;
	
	//Shopping Cart elements
	
	@FindBy(css = "button[class*='saved-items-button']")
	private WebElement mySavedItems ;
	
	@FindBy(css = "img[alt*='Shopping Cart']")
	private WebElement ShoppingCartImg;
		
	@FindBy(css = "h3#guest-profile")
	private WebElement guestProfileLink;
		
	@FindBy(css = "h3#auth-profile")
	private WebElement AuthProfileLink;
		
	@FindBy(xpath = "(//a[contains(text(),'Sign Out')])[2]")
	private WebElement signOut;
		
	@FindBy(xpath = "div[class*='log-in'] a")
	private WebElement signInLink;

	// Edit Responses page Elements

	@FindBy(css = "#prefrencesTitle")
	private WebElement editResponseTitle;

	@FindBy(css = "#backToPlanRecommendation")
	private WebElement returnToPlanLink;

	@FindBy(css = "uhc-list-item.list-item")
	private List<WebElement> allQuestionSection;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButton;

	@FindBy(css = "div.viewUpdateSection:nth-of-type(1)>button")
	private WebElement viewUpdateButtonBottom;

	@FindBy(xpath = "//button[contains(text(),'Save')]")
	private WebElement saveBtn;

	@FindBy(xpath = "//button[contains(text(),'Continue')]")
	private WebElement continueBtn;

	@FindBy(css = "a#changeMyProviders")
	private WebElement changeDocLink;
	
	@FindBy(css = "#doctors-warning")
	private WebElement WarningDocMsg;

	@FindBy(css = "#modal button[class*='primary']")
	private WebElement locationModalConfirm;

	// Variables

	public HashMap<String, String> inputValues;

	public HashMap<Integer, String> flowNumValue, mapd, ma, pdp, idk;

	public int previousVal = -1;

	public boolean drugEdit = false, docEdit = false;

	public final int coverageNum = 1;

	public void editResponsepage(HashMap<String, String> userInput) {
		System.out.println("Validating Edit Response Page: ");
		inputValues = userInput;
		String currentPageUrl = driver.getCurrentUrl();
		currentPageUrl.contains("/plan-recommendation-engine.html/");
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		checkContent("location");
		checkContent("coverage");
		checkContent("special");
		checkContent("travel");
		checkContent("doctor");
		checkContent("drugs");
		checkContent("additional");
		checkContent("cost");
		checkContent("priorities");
		verifyClickEditButton("location", false);
		verifyClickEditButton("coverage", false);
		verifyClickEditButton("special", false);
		verifyClickEditButton("travel", false);
		verifyClickEditButton("doctor", false);
		verifyClickEditButton("drugs", false);
		verifyClickEditButton("additional", false);
		verifyClickEditButton("cost", false);
		verifyClickEditButton("priorities", false);
		checkDrugDocInfo("drugs", false);
		checkDrugDocInfo("doctor", false);
		editCancel(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Validation Completed ******");
	}

	public void navigateEditResponsePage(String flow) {
		waitForPageLoadSafari();
		validate(editYourResponse, 10);
		editYourResponse.click();
		validate(editResponseTitle);
		validate(returnToPlanLink, 30);
	}
	
	
	public String firstRecomPlanName = "";
	public String planType = "";
	public String navigateSaveResultsPage() {
		firstRecomPlanName = plantiles.get(0).findElement(By.cssSelector("h2>a")).getText().trim();
		planType = plantiles.get(0).findElement(By.cssSelector("p[class*='planNameType']")).getText().trim();
		validate(saveYourResults, 10);
		saveYourResults.click();
		validate(saveResultsTitle);
		validate(saveResultsPopupClose, 30);
		return firstRecomPlanName;
	}
	
	public void ValidatePREWidget(String userType,String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			cancelLink.click();
			shoppingcartNavigation(userType,plantype, username, password);
		}else {
			if(validate(SignInButton)) {
				SignInButton.click();
				signIn(username, password);
			}else
				System.out.println("Authenciated profile already Signed In");
		}
		
		
	}
	
	Actions actions = new Actions(driver);
	public void shoppingcartNavigation(String userType, String plantype, String username, String password) {
		if(userType.equalsIgnoreCase("Guest")){
			scrollToView(ShoppingCartImg);
			actions.clickAndHold(ShoppingCartImg).build().perform();
//			desktopCommonUtils.MouseOver(ShoppingCartImg, Browsername);
			guestProfileLink.click();
			threadsleep(3000);
		}else {
			navigatePlanTypeFromMS(plantype);
			navigateSaveResultsPage();
			validateSaveResultModel(userType);
			SignInButton.click();
			signIn(username, password);
			threadsleep(3000);
		}
	}
	
	public void SignIn(String username, String password) {
		System.out.println("Signin the profile:");
		actions.clickAndHold(mySavedItems).build().perform();
		validate(signInLink,10);
		signInLink.click();
		signIn(username, password);
		threadsleep(3000);
	}
	
	public void navigatePlanTypeFromMS(String flow) {
		if(flow.equalsIgnoreCase("pdp")) 
			PDPViewPlansLink.click();
		else if(flow.equalsIgnoreCase("pdp"))
				MAViewPlansLink.click();
		else
				SNPViewPlansLink.click();
		threadsleep(3000);
	}
	

	
	public void validateSaveResultModel(String usertype) {
		if(usertype.equalsIgnoreCase("Authenticated")) {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(KeepShoppingPlansButton, 30);
			if (validate(ViewProfileButton, 30))
				ViewProfileButton.click();
		}else {
			validate(saveResultsTitle, 30);
			validate(saveResultsPopupClose, 30);
			validate(SignInButton, 30);
			validate(CreateProfileButton, 30);
			validate(cancelLink, 30);
		}
	}
	
	public void PRESaveResultModelBtn() {
		SignInButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/login"), "***Sign In With Your One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		CreateProfileButton.click();
		threadsleep(2000);
		Assert.assertTrue(driver.getCurrentUrl().contains("/registration"),"***Create One Healthcare ID Page Not Opened***");
		browserBack();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
	}
	
	public void browserBack() {
		driver.navigate().back();
		threadsleep(2000);
	}

	public void checkContent(String section) {
		// boolean sectionStaus = false;
		section = section.toLowerCase();
		String formatedUIText = changetoUIdata(section);
		// System.out.println("Formated UI Text : "+formatedUIText);
		String actualExtractedUIText = getUISectionValue(section);
		// System.out.println("actualExtractedUIText : "+actualExtractedUIText);
		for (String val : formatedUIText.split(",")) {
			Assert.assertTrue(actualExtractedUIText.contains(val),
					val + " is not available in " + actualExtractedUIText);
		}
	}

	public String changetoUIdata(String section) {

		// flow = PlanRecommendationEngineStepDefinition.PREflow;
		String UIValue = null;

		if (section.equalsIgnoreCase("location")) {
			UIValue = inputValues.get("Zip Code") + "," + inputValues.get("CountyDropDown");
		} else if (section.equalsIgnoreCase("coverage")) {
			UIValue = inputValues.get("Plan Type");
			if (UIValue.equalsIgnoreCase("mapd"))
				UIValue = "Medical and prescription drug".toLowerCase();
			if (UIValue.equalsIgnoreCase("MA"))
				UIValue = "Medical only".toLowerCase();
			if (UIValue.equalsIgnoreCase("pdp"))
				UIValue = "Prescription drug only".toLowerCase();
			if (UIValue.equalsIgnoreCase("none"))
				UIValue = "not sure".toLowerCase();
		} else if (section.equalsIgnoreCase("special")) {
			UIValue = inputValues.get("SNP Options");
		} else if (section.equalsIgnoreCase("doctor")) {
			UIValue = inputValues.get("Doctors");
			UIValue = UIValue.replace("UHGNetwork", "UnitedHealthcare").replace("AcceptsMedicare", "any doctor")
					.replace("Lookup", "Look up");

		} else if (section.equalsIgnoreCase("drugs")) {
			UIValue = inputValues.get("Drug Selection");
		} else if (section.equalsIgnoreCase("additional")) {
			UIValue = inputValues.get("Additional Option");
			// Works for all Yes or all No
		} else if (section.equalsIgnoreCase("cost")) {
			UIValue = inputValues.get("Preference Option");
		} else if (section.equalsIgnoreCase("priorities")) {
			UIValue = inputValues.get("Priorities");
		}
		return UIValue.toLowerCase();
	}

	public String getUISectionValue(String section) {
		String actualExtractedUIText = null;
		for (WebElement elm : allQuestionSection) {
			actualExtractedUIText = elm.getText().toLowerCase();
			if (actualExtractedUIText.contains(section)) {
				break;
			}
		}
		return actualExtractedUIText;
	}

	public void verifyClickEditButton(String section, boolean click) {
		boolean editButton = false;
		for (WebElement elem : allQuestionSection) {
			String tempTxt = elem.findElement(By.cssSelector("button")).getText().toLowerCase();
			System.out.println("tempTxt : " + tempTxt);
			if (tempTxt.contains(section)) {
				editButton = true;
				if (click) {// Edit button Click
					if (section.equalsIgnoreCase("location")) {
						boolean lookup = validate(changeDocLink, 5);
						elem.findElement(By.cssSelector("button")).click();
						if (lookup)
							locationModalConfirm.click();
					} else {
						elem.findElement(By.cssSelector("button")).click();
					}
				}
				break;
			}
		}
		Assert.assertTrue(editButton, "Edit button is not available for " + section);
	}

	public void returnVPP(String button) {
		if (button.toLowerCase().contains("update"))
			viewUpdateButton.click();
		else
			returnToPlanLink.click();
	}

	public void checkDrugDocInfo(String section, boolean modifiedValue) {
		String UIInfo = getUISectionValue(section);
		String givenInfo = null;
		if (section.contains("drugs")) {
			if (modifiedValue)
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
			else
				givenInfo = inputValues.get("Drug Details").split(",")[2].toLowerCase();
		} else {
			if (modifiedValue)
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
			else
				givenInfo = inputValues.get("Doctors Search Text").toLowerCase();
		}
		Assert.assertTrue(UIInfo.contains(givenInfo), givenInfo + " is not available in " + UIInfo);
	}

	public void setKeyQuestions() {

		mapd = new HashMap<Integer, String>();
		mapd.put(0, "location");
		mapd.put(1, "coverage");
		mapd.put(2, "special");
		mapd.put(3, "travel");
		mapd.put(4, "doctor");
		mapd.put(5, "drugs");
		mapd.put(6, "additional");
		mapd.put(7, "cost");
		mapd.put(8, "priorities");

		ma = new HashMap<Integer, String>();
		ma.put(0, "location");
		ma.put(1, "coverage");
		ma.put(2, "special");
		ma.put(3, "travel");
		ma.put(4, "doctor");
		ma.put(5, "additional");
		ma.put(6, "cost");
		ma.put(7, "priorities");

		pdp = new HashMap<Integer, String>();
		pdp.put(0, "location");
		pdp.put(1, "coverage");
		pdp.put(2, "drugs");

		idk = new HashMap<Integer, String>(mapd);

	}

	public Integer chooseRandomQuesNum(String flow) {
		setKeyQuestions();
		Random rand = new Random();
		int rval; // Exclude Coverage
		do {
			if (flow.equalsIgnoreCase("pdp"))
				rval = rand.nextInt(pdp.size());
			else if (flow.equalsIgnoreCase("ma"))
				rval = rand.nextInt(ma.size());
			else
				rval = rand.nextInt(mapd.size());
		} while (rval == previousVal || rval == coverageNum);
		System.out.println("rval " + rval);
		previousVal = rval;
		return rval;
	}

	public String getSection(String flow, Integer num) {
		String section = null;
		if (flow.equalsIgnoreCase("pdp"))
			section = pdp.get(num);
		else if (flow.equalsIgnoreCase("ma"))
			section = ma.get(num);
		else
			section = mapd.get(num);

		return section;

	}

	public void editCancel(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Cancel action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		cancelButton.click();
		Assert.assertTrue(validate(returnToPlanLink, 10), "Invalid cancel action");
	}

	public void editUserResponse(HashMap<String, String> userInput) {
		System.out.println("Edit User Response: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		Assert.assertTrue(validate(viewUpdateButton, 10), "View Updated Button should be displayed");
		editUpdate(inputValues.get("Plan Type").toLowerCase());
		System.out.println("******  Edit Response Completed ******");
	}

	public void editUpdate(String flow) {
		System.out.println("Flow : " + flow);
		int randomEdit = chooseRandomQuesNum(flow);
		System.out.println("Random Number : " + randomEdit);
		String randomSection = getSection(flow, randomEdit);
		System.out.println("Performing Random Edit action for : " + randomSection);
		verifyClickEditButton(randomSection, true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains(randomSection) && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue(randomSection);
		// cancelButton.click();
		// Assertion.assertTrue(validate(returnToPlanLink,10),"Invalid cancel action");
	}

	public void editValue(String section) {

		if (section.equalsIgnoreCase("location")) {
			String zipcode = inputValues.get("Zip Code");
			String multi = inputValues.get("Is Multi County");
			String county = inputValues.get("CountyDropDown");
			PlanRecommendationEngineLandingAndZipcodePages loc = new PlanRecommendationEngineLandingAndZipcodePages(
					driver);
			loc.edit_location(zipcode, multi, county);
			jsClickNew(saveBtn);
			checkContent("location");
		} else if (section.equalsIgnoreCase("drugs")) {
			String drugSelect = inputValues.get("Drug Selection");
			PlanRecommendationEngineDrugsPage drug = new PlanRecommendationEngineDrugsPage(driver);
			drug.drugpageOptions(drugSelect);
			if (drugSelect.equalsIgnoreCase("Yes")) {
				String drugsDetails = inputValues.get("Drug Details");
				jsClickNew(continueBtn);
				drug.drugsHandlerWithdetails(drugsDetails);
				jsClickNew(saveBtn);
				checkDrugDocInfo("drugs", false);
				drugEdit = true;
			} else {
				jsClickNew(saveBtn);
			}
			checkContent("drugs");
		} else if (section.equalsIgnoreCase("special")) {
			PlanRecommendationEngineSpecialNeedsPage snp = new PlanRecommendationEngineSpecialNeedsPage(driver);
			snp.edit_specialneeds(inputValues.get("SNP Options"));
			jsClickNew(saveBtn);
			checkContent("special");
		} else if (section.equalsIgnoreCase("additional")) {
			PlanRecommendationEngineAdditionalServicesPage add = new PlanRecommendationEngineAdditionalServicesPage(
					driver);
			add.edit_additional(inputValues.get("Additional Option"));
			jsClickNew(saveBtn);
			checkContent("additional");
		} else if (section.equalsIgnoreCase("cost")) {
			PlanRecommendationEngineCostPreferencesPage cost = new PlanRecommendationEngineCostPreferencesPage(driver);
			cost.edit_cost(inputValues.get("Preference Option"));
			jsClickNew(saveBtn);
			checkContent("cost");
		} else if (section.equalsIgnoreCase("doctor")) {
			PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
			doc.edit_doctor(inputValues.get("Doctors"), inputValues.get("Doctors Search Text"),
					inputValues.get("Multi Doctor"));
//			jsClickNew(saveBtn);
			checkContent("doctor");
			if (inputValues.get("Doctors").contains(("look"))) {
				checkDrugDocInfo("doctor", false);
				docEdit = true;
			}
		} else if (section.equalsIgnoreCase("priorities")) {
			PlanRecommendationEnginePrioritiesPage priority = new PlanRecommendationEnginePrioritiesPage(driver);
			priority.prioritiesFunctional(inputValues.get("Priority Option"), inputValues.get("Priorities"));
			jsClickNew(saveBtn);
			checkContent("priorities");
		}
	}

	public void addDoctorEditResponse(HashMap<String, String> userInput) {
		System.out.println("Add Provider: ");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		changeDocLink.click();
		PlanRecommendationEngineDoctorsPage doc = new PlanRecommendationEngineDoctorsPage(driver);
		doc.addProviderEdit(inputValues.get("Doctors Search Text"));
		checkContent("doctor");
		checkDrugDocInfo("doctor", false);
		System.out.println("******  Add Provider Completed ******");
	}

	public void changeCoverage(HashMap<String, String> userInput) {
		System.out.println("Change Coverage Options: ");
		inputValues = userInput;
		verifyClickEditButton("coverage", true);
		validate(progressInfo, 10);
		PlanRecommendationEngineCoverageOptionPage coverage = new PlanRecommendationEngineCoverageOptionPage(driver);
		coverage.chooseCoverageOption(inputValues.get("Plan Type").toUpperCase().replace("PDPTOMAPD", "MAPD"));
		jsClickNew(saveBtn);
	}
	
	public void addSNPEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("special", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("special") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("special");
		System.out.println("******  Add SpecialNeeds Completed ******");
	}
	
	public void addLocationEditResponse(HashMap<String, String> userInput) {
		System.out.println("Change SpecialNeeds Options:");
		inputValues = userInput;
		pageloadcomplete();
//		navigateEditResponsePage(inputValues.get("Plan Type"));
		verifyClickEditButton("location", true);
		validate(progressInfo, 10);
		String progressText = progressInfo.getText().toLowerCase();
		Assert.assertTrue(progressText.contains("location") && progressText.contains("100%"),
				"Progres Bar does not have required Info");
		editValue("location");
		validate(WarningDocMsg, 10);
		Assert.assertTrue(WarningDocMsg.getText().contains("Warning:"), "Doctors Warning message is not displayed");
		System.out.println("******  Add Location Completed ******");
	}

	public void checkCoveragevalue(HashMap<String, String> userInput) {
		inputValues = userInput;
		checkContent("coverage");
	}

	public void addDrugs(HashMap<String, String> userInput) {
		inputValues = userInput;
		editValue("drugs");
	}
	
	public void validateSaveResults() {
		System.out.println("Validating Save Results : ");
		pageloadcomplete();
		waitForPageLoadSafari();
		navigateSaveResultsPage();
		threadsleep(5000);
	}
	
	public void signIn(String username, String password) {
		try {
			Thread.sleep(3000);
			waitForPageLoadSafari();
			driver.findElement(By.xpath("//input[contains(@id,'userNameId_input')]")).sendKeys(username);
			driver.findElement(By.cssSelector("input#passwdId_input")).sendKeys(password);
			jsClickNew(driver.findElement(By.cssSelector("input#SignIn")));
			waitForPageLoadSafari();
			Thread.sleep(3000);
			String Question = driver.findElement(By.cssSelector("span#challengeQuestionLabelId")).getText().trim();
			WebElement securityAnswer = driver.findElement(By.cssSelector("input#UnrecognizedSecAns_input"));
			waitforElement(securityAnswer);
			if (Question.equalsIgnoreCase("What is your best friend's name?")) {
				System.out.println("Question is related to friendname");
				securityAnswer.sendKeys("name1");
			}

			else if (Question.equalsIgnoreCase("What is your favorite color?")) {
				System.out.println("Question is related to color");
				securityAnswer.sendKeys("color1");
			} else {
				System.out.println("Question is related to phone");
				securityAnswer.sendKeys("number1");
			}
			jsClickNew(driver.findElement(By.cssSelector("input#authQuesSubmitButton")));
			waitForPageLoadSafari();
//			CommonUtility.waitForPageLoadNew(driver, signOut, 15);

		} catch (Exception e) {
			Assert.fail("###############Optum Id Sign In failed###############");
		}

	}

}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:08.169
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:08.169
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:08.169
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:08.172
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 15:41:08.172
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:09.399
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:09.402
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:11.185
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:11.188
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:11.480
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:11.483
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:12.733
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:12.735
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:41:40.385
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:41:40.389
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:32.782
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:32.785
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:33.286
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:33.290
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:34.566
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:34.568
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:36.086
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:36.088
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:40.296
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:40.298
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:43.411
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:43.413
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:44.719
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:44.721
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:45.718
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:45.720
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:47.781
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:47.783
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:48.067
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:48.069
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:49.172
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:49.174
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:53.579
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:53.581
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:55.020
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:55.023
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:56.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:56.768
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:58.298
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:58.300
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:58.453
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:58.455
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:44:59.565
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:44:59.567
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:45:01.347
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:45:01.350
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:45:02.728
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:45:02.730
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 15:45:04.353
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 15:45:04.356
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:13:34.323
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:13:34.325
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:10.788
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:10.791
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:11.990
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:11.993
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:14.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:14.025
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:16.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:16.711
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:20.185
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:20.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:21.997
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:21.999
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:24.199
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:24.201
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:27.713
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:27.715
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:29.079
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:29.081
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:40.073
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:40.076
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:40.605
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:40.607
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:41.304
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:41.306
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:43.058
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:43.060
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:44.264
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:44.266
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:14:44.766
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:14:44.768
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.core.jobs 4 2 2021-07-16 16:15:03.337
!MESSAGE An internal error occurred during: "Compute launch button tooltip".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:04.139
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:04.141
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:04.569
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:04.571
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:07.885
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:07.887
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:10.338
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:10.340
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:10.454
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:10.456
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:13.052
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:13.054
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:13.511
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:13.514
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:15.404
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:15.406
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:16.450
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:16.452
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:22.832
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:22.837
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:22.838
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:22.838
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:22.841
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.initialReconcile(JavaReconcilingStrategy.java:185)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.initialReconcile(CompositeReconcilingStrategy.java:119)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.initialReconcile(JavaCompositeReconcilingStrategy.java:136)
	at org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess(MonoReconciler.java:95)
	at org.eclipse.jdt.internal.ui.text.JavaReconciler.initialProcess(JavaReconciler.java:420)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:174)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:22.841
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:22.855
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:22.857
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:23.038
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:23.040
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:25.033
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:25.035
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:27.832
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:27.834
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:29.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:29.416
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:30.578
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:30.580
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:33.142
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:33.144
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:34.379
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:34.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:34.384
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:34.384
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:34.385
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:34.385
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:34.394
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:34.396
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:35.402
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	public String firstRecomPlanName = "";
	public String planType = "";
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:35.406
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:35.406
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:35.406
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:35.408
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:35.408
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:35.441
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:35.444
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:36.794
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:36.796
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:37.236
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:37.240
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:40.468
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	public Static String firstRecomPlanName = "";
	public String planType = "";
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:40.473
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:40.473
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:40.473
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:40.476
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:40.476
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:40.511
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:40.513
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:42.152
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:42.154
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:43.601
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:43.603
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:45.013
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	public Static String firstRecomPlanName = "";
	public Static String planType = "";
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:45.017
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:45.017
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:45.017
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:45.022
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:583)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1091)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:45.023
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:45.041
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:45.043
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:45.924
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:45.926
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:49.074
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	public Static String firstRecomPlanName = "";
	public Static String planType = "";
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 2 2021-07-16 16:15:49.078
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:49.079
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:49.079
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.ui 4 0 2021-07-16 16:15:49.082
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.ArrayIndexOutOfBoundsException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:254)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:276)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1260)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.ArrayIndexOutOfBoundsException
Caused by: java.lang.ArrayIndexOutOfBoundsException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2021-07-16 16:15:49.082
!MESSAGE java.lang.ArrayIndexOutOfBoundsException
!STACK 0
java.lang.ArrayIndexOutOfBoundsException

!ENTRY org.eclipse.jdt.core 4 4 2021-07-16 16:15:51.807
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------

package acceptancetests.data;

import java.util.LinkedHashMap;

/**
 * @author pjaising
 *
 */
public class CommonConstants {
	
//	public static String SELECTED_STATE = null;

	public static final String FLOW_NAME = "registration/planconfirmation";

	public static final String REG_FAILURE_FLOW_NAME = "registration/registrationfailure";

	public static final String LOGIN_ASSISTANCE_FAILURE_FLOW_NAME = "loginassistance/loginassistancefailure";

	public static final String PROPERTY_FILE_FOLDER = "/config";

	public static final String PROPERTY_FILE_NAME = "config.properties";

	public static final String DEFAULT_ENVIRONMENT_CI = "ci";
	
	public static final String USER_PASSWORD = "userPassword";
	
	public static final String BUSINESS_CATEGORY = "businessCategory";
	
	public static final String ATTRIB_FIRST_NAME = "givenName";

	public static final String ATTRIB_LAST_NAME = "sn";
	
	public static final String ATTRIB_COMMON_NAME = "cn";
	
	public static final String ATTRIB_OBJECT_CLASS = "objectClass";

	public static final String UID = "uid";

	public static final String DB_URL = "DBUrl";

	public static final String DB_USERNAME = "DBUsername";

	public static final String DB_PASSWORD = "DBPassword";
	

	public static final String DB_SCHEMA = "DBSchema";

	public static final String LDAP_BASE = "ldapBase";

	public static final String LDAP_USER = "ldapBindUser";

	public static final String LDAP_PASSWORD = "ldapBindPassword";

	public static final String LDAP_URL = "ldapUrl";

	public static final String WEBDRIVER = "webDriver";

	public static final String DEVICE_NAME = "DeviceName";

	public static final String CHROME_DRIVER = "ChromeDriver";

	public static final String PLAN_BENEFITS_AND_COVERAGE = "planBenefitsAndCoverage";

	public static final String BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA = "planbenefitsandcoveragenonlisnotusother.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DATA = "benefitsandcoveragelisnonlis.json";

	public static final String BENEFITS_AND_COVERAGE_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_PAGE_BLAYER_DIRECTORY = "/jsonresponse/member/bluelayer/benefitsandcoverage/";

	public static final String BENEFITS_AND_COVERAGE_DIRECTORY = "/jsonresponse/member/ulayer/planbenefitsandcoverage/";

	public static final String ACCOUNT_HOME_PAGE_DATA = "myaccounthome.json"; // Group

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_MEMBER = "/page-objects/member/ulayer/";

	public static final String PAGE_OBJECT_DIRECTORY_BLAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PLAN_SUMMARY_PAGE_DATA = "plansummarypdp.json";

	public static final String PLAN_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/planSummary/";

	public static final String REGISTRATION_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationcommon/";

	public static final String REGISTRATION_COMMON_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationcommon/";

	private static final String TERMINATED_ACCOUNT_DIRECTORY = "/jsonresponse/Member/ulayer/terminatedaccount/";

	private static final String MANAGE_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/managedrug/";

	public static final String ADD_DRUG_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String DRUG_DOSAGE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String LOW_COST_OPTIONS_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	private static final String SELECT_PHARMACY_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/selectpharmacy/";

	public static final String CONTACT_US = "contactus";

	private static final String CONTACT_US_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/contactus/";

	public static final String DTM_TAG_MEMBER_FILENAME = "member";
	public static final String DTM_TAG_ACQ_FILENAME = "acquisition";
	public static final String PAGE_OBJECT_DTM_TAG_DIR = "/page-objects/dtm-common-data/";
	public static final String NEW_PAYMENT_HISTORY_PAGE_DATA = "newpaymenthistory.json";

	public static final String PAYMENT_HISTORY_MOBILE = "payment_history_mobile";

	public static final String PAYMENT_HISTORY_MOBILE_DATA = "paymenthistory_mobile.json";
	
	public static final String  PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/bluelayer/payment-history/";
	
	public static final String  DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE ="/jsonresponse/mobile/member/ulayer/payment-history/";

	private static final String DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY = "/jsonresponse/member/dashboard/drugcostestimator/";

	public static final String ADD_DRUG_DETAILS = "adddrugdetails";
	
	public static final Page[] PAGES = { new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_DIRECTORY),
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION, CommonConstants.REGISTRATION_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY, CommonConstants.DRUG_COST_BENEFIT_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_AND_COVERAGE_PDP_NONLIS_NONUS_PAGE_DATA,
					CommonConstants.BENEFITS_AND_COVERAGE_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_SUMMARY, CommonConstants.DRUG_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.DRUG_CLAIMS_DETAILS, CommonConstants.DRUG_CLAIMS_DETAILS_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_SUMMARY, CommonConstants.MEDICAL_CLAIMS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.MEDICAL_CLAIMS_DETAILS, CommonConstants.MEDICAL_CLAIMS_DETAILS_DIRECTORY),

			new Page(CommonConstants.MY_PROFILES, CommonConstants.MY_PROFILES_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES, CommonConstants.MY_PREFERENCES_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_ULAYER_DIRECTORY),
			new Page(CommonConstants.MEDICAL_EOB, CommonConstants.MEDICAL_EOB_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_ULAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_ULAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_ULAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_ULAYER_DIRECTORY),
			new Page(CommonConstants.TERMINATED_ACCOUNT, CommonConstants.TERMINATED_ACCOUNT_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY),
			new Page(CommonConstants.CONTACT_US, CommonConstants.CONTACT_US_ULAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY, CommonConstants.BENEFITS_SUMMARY_DIRECTORY),
			new Page(CommonConstants.BENEFITS_DETAIL, CommonConstants.BENEFITS_DETAIL_DIRECTORY),
			new Page(CommonConstants.PLAN_COMPARE, CommonConstants.PLAN_COMPARE_ULAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.DASHBOARD_PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE),
			new Page(CommonConstants.ADD_DRUG_DETAILS,
					CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),
					new Page(CommonConstants.ADD_NEW_DRUG_MODAL,
                            CommonConstants.DASHBOARD_DRUGCOSTESTIMATOR_DIRECTORY),

	};

	public static final String BENEFITS_SUMMARY_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-summary/";

	public static final String BENEFITS_SUMMARY = "benefitssummary";

	public static final String BENEFITS_DETAIL = "benefitsdetail";

	public static final String BENEFITS_DETAIL_DIRECTORY = "/jsonresponse/mobile/member/ulayer/benefits-detail/";

	public static final String BENEFITS_SUMMARY_BLAYER = "benefitssummary";

	public static final String BENEFITS_SUMMARY_DIRECTORY_BLAYER = "/jsonresponse/mobile/member/bluelayer/benefits-summary/";

	public static final String GLOBAL_DIRECTORY = "/jsonresponse/member/ulayer/global/";

	public static final String GLOBAL = "global";

	public static final String DIRECTORY = "/src/main/resources/";

	public static final String MY_ACCOUNT_HOME_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthome/";

	public static final String MY_ACCOUNT_HOME = "myaccounthome";

	public static final String MY_ACCOUNT_HOME_COMBO_DIRECTORY = "/jsonresponse/member/ulayer/myaccounthomecombo/";

	public static final String MY_ACCOUNT_HOME_COMBO = "myaccounthomecombo";

	public static final String PHR_FEDERAL_PAGE_DATA = "phrfederal.json";

	public static final String PHR_DIRECTORY = "/jsonresponse/member/ulayer/phr/";

	public static final String PHR = "phr";

	public static final String COMMON = "common";

	public static final String COMMON_DIRECTORY = "/jsonresponse/member/ulayer/common/";

	public static final String EXPECTED_DATA_MAP = "expectedDataMap";

	private static final String GLOBAL_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/global/";

	private static final String MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthome/";

	private static final String COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/common/";

	private static final String PHR_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/phr/";

	private static final String PLAN_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/plansummary/";

	public static final String PLAN_SUMMARY = "plansummary";

	private static final String FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/formsandresources/";

	private static final String BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/benefitsandcoverage/";

	private static final String PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/registration/planconfirmation/";

	private static final String ADD_PLAN_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/addplan/";

	private static final String MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/myaccounthomecombo/";

	private static final String PAYMENT_HISTORY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/paymenthistory/";

	private static final String ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/onetimepaymentsuccess/";

	private static final String SET_UP_PAYMENT_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/payment/setuppaymentsuccess/";

	private static final String CLAIM_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimsummary/";

	private static final String CLAIM_DETAILS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/claims/claimdetails/";

	private static final String MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/beforeupdate/";

	private static final String MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/myprofiles/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/profilesandpref/mypreferences/afterupdate/";

	private static final String MY_PREF_BEFORE_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/beforeupdate/";

	private static final String MY_PREF_AFTER_UPDATE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/profilesandpref/mypreferences/afterupdate/";

	private static final String DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/drugcostbenefitsummary/";

	private static final String ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/orderplanmaterials/";

	private static final String PREFERENCES_COMMON_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/profilesandpref/mypreferences/preferencescommon/";

	private static final String PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY = "/jsonresponse/Member/bluelayer/prescriptiondrugeob/";

	public static final String MY_PROFILES_BEFORE_UPDATE = "myprofilebeforeupdate";

	public static final String MY_PROFILES_AFTER_UPDATE = "myprofileafterupdate";

	public static final String MY_PREFERENCES_BEFORE_UPDATE = "mypreferencesbeforeupdate";

	public static final String MY_PREFERENCES_AFTER_UPDATE = "mypreferencesafterupdate";

	public static final String PREFERENCES_COMMON = "preferenceColumn";

	public static final String PAYMENT_HISTORY_MOBILE_DIRECTORY = "/page-objects/mobile/member/bluelayer/";

	public static final String PAYMENT_HISTORY_MOBILE_ULAYER = "payment_history_mobile_ulayer";
	public static final String PAYMENT_HISTORY_MOBILE_ULAYER_DIRECTORY = "/page-objects/mobile/member/ulayer/";

	public static final String PAYMENT_HISTORY_ULAYER_DIRECTORY_MOBILE = "/jsonresponse/mobile/member/ulayer/paymenthistory/";

	public static final Page[] PAGES_BLUELAYER = {
			new Page(CommonConstants.GLOBAL, CommonConstants.GLOBAL_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME, CommonConstants.MY_ACCOUNT_HOME_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.COMMON, CommonConstants.COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHR, CommonConstants.PHR_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_SUMMARY, CommonConstants.PLAN_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.FORMS_AND_RESOURCES, CommonConstants.FORMS_AND_RESOURCES_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PLAN_BENEFITS_AND_COVERAGE,
					CommonConstants.BENEFITS_AND_COVERAGE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PHARMACY_RESULT, CommonConstants.PHARMACY_RESULT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN, CommonConstants.ADD_PLAN_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_ACCOUNT_HOME_COMBO, CommonConstants.MY_ACCOUNT_HOME_COMBO_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PAYMENT_HISTORY, CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ONE_TIME_PAYMENT_SUCCESS, CommonConstants.ONE_TIME_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.SET_UP_PAYMENT_SUCCESS, CommonConstants.SET_UP_PAYMENT_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_SUMMARY, CommonConstants.CLAIM_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.CLAIM_DETAILS, CommonConstants.CLAIM_DETAILS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_BEFORE_UPDATE,
					CommonConstants.MY_PROFILES_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PROFILES_AFTER_UPDATE,
					CommonConstants.MY_PROFILES_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_BEFORE_UPDATE,
					CommonConstants.MY_PREF_BEFORE_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MY_PREFERENCES_AFTER_UPDATE,
					CommonConstants.MY_PREF_AFTER_UPDATE_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PREFERENCES_COMMON, CommonConstants.PREFERENCES_COMMON_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_COST_BENEFIT_SUMMARY,
					CommonConstants.DRUG_COST_BENEFIT_SUMMARY_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ORDER_PLAN_MATERIALS, CommonConstants.ORDER_PLAN_MATERIALS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.VIEW_DRUG_COST, CommonConstants.VIEW_DRUG_COST_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.PRESCRIPTION_DRUG_EOB, CommonConstants.PRESCRIPTION_DRUG_EOB_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.MANAGE_DRUG, CommonConstants.MANAGE_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.ADD_DRUG, CommonConstants.ADD_DRUG_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.DRUG_DOSAGE, CommonConstants.DRUG_DOSAGE_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.LOW_COST_OPTIONS, CommonConstants.LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.SELECT_PHARMACY, CommonConstants.SELECT_PHARMACY_BLUE_LAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_SUCCESS, CommonConstants.REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.ADD_PLAN_CONFIRMATION, CommonConstants.ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.BENEFITS_SUMMARY_BLAYER, CommonConstants.BENEFITS_SUMMARY_DIRECTORY_BLAYER),
			new Page(CommonConstants.PAYMENT_HISTORY_MOBILE,
					CommonConstants.PAYMENT_HISTORY_BLUELAYER_DIRECTORY_MOBILE) };

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_MEMBER = "/page-objects/member/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_MYMEDICA_MEMBER = "/page-objects/member/mymedica/";

	public static final String RETIREE_PAGE_OBJECT_DIRECTORY = "/page-objects/uhcretiree/acquisition/";

	public static final String REGISTRATION = "registration";

	public static final String REGISTRATION_SUCCESS = "registrationsuccess";

	public static final String REGISTRATION_SUCCESS_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/registrationsuccess/";

	public static final String REGISTRATION_SUCCESS_PAGE_DATA = "registrationsuccess.json";

	public static final String PLAN_CONFIRMATION = "planconfirmation";

	public static final String PLAN_CONFIRMATION_DIRECTORY = "/jsonresponse/member/ulayer/registration/planconfirmation/";

	public static final String PLAN_CONFIRMATION_PAGE_DATA = "planconfirmation.json";

	public static final String PAYMENT_HISTORY = "paymentHistory";

	public static final String PAYMENT_HISTORY_PAGE_DATA = "paymenthistory.json";

	public static final String PAYMENT_HISTORY_DIRECTORY = "/jsonresponse/Member/ulayer/payment/paymenthistory/";

	public static final String ONE_TIME_PAYMENT_SUCCESS = "onetimepaymentsuccess";

	public static final String ONE_TIME_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/onetimepaymentsuccess/";

	public static final String ONE_PAYMENT_SUCCESS_PAGE_DATA = "onetimepaymentsuccess.json";

	public static final String FORMS_AND_RESOURCES = "formsandresources";

	public static final String FORMS_AND_RESOURCES_DIRECTORY = "/jsonresponse/Member/ulayer/formsandresources/";

	public static final String FR_NEXTYEAR_DIRECTORY = "/jsonresponse/Member/ulayer/Nextyearpdf/";

	public static final String FORMS_AND_RESOURCES_PAGE_DATA = "formsandresources.json";

	public static final String ORDER_PLAN_MATERIALS = "orderplanmaterials";

	public static final String ORDER_PLAN_MATERIALS_DIRECTORY = "/jsonresponse/Member/ulayer/orderplanmaterials/";

	public static final String ORDER_PLAN_MATERIALS_PAGE_DATA = "orderplanmaterials.json";

	public static final String SET_UP_PAYMENT_SUCCESS = "setuppaymentsuccess";

	public static final String SET_UP_PAYMENT_DIRECTORY = "/jsonresponse/Member/ulayer/payment/setuppaymentsuccess/";

	public static final String SET_UP_PAYMENT_SUCCESS_PAGE_DATA = "setuppaymentsuccess.json";

	public static final String PHARMACY_RESULT = "pharmacyresult";

	public static final String PHARMACY_RESULT_PAGE_DATA = "pharmacyresult.json";

	public static final String PHARMACY_RESULT_DIRECTORY = "/jsonresponse/member/ulayer/locatepharmacy/";

	public static final String PHARMACY_RESULT_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/locatepharmacy/";

	public static final String REGISTRATION_COMMON = "registrationCommon";

	public static final String ADD_PLAN = "addplan";

	public static final String ADD_PLAN_DIRECTORY = "/jsonresponse/member/ulayer/addplan/";

	public static final String DRUG_COST_BENEFIT_SUMMARY = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_SUCCESS = "drugcostbenefitsummary";

	public static final String DRUG_COST_BENEFIT_SUMMARY_DIRECTORY = "/jsonresponse/Member/ulayer/drugcostbenefitsummary/";

	public static final String DRUG_COST_BENEFIT_SUMMARY_PAGE_DATA = "drugcostbenefitsummary.json";

	public static final String ACCOUNT_HOME_PAGE_INDIVIDUAL_DATA = "myaccounthomeindividual.json";

	public static final String CLAIM_SUMMARY_PAGE_DATA = "claimsummary.json";

	public static final String CLAIM_SUMMARY = "claimsummary";

	public static final String MEDICAL_CLAIM_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String CLAIM_DETAILS = "claimdetails";

	public static final String VPP_PLAN_SUMMARY_PAGE_DATA = "vppplansummary.json";

	public static final String PAGE_OBJECT_DIRECTORY_ULAYER_ACQ = "/page-objects/acquisition/ulayer/";

	public static final String SITE_ULAYER = "ulayer";

	public static final String SITE_BLUELAYER = "bluelayer";

	public static final String SITE_MYMEDICA = "mymedica";

	public static final String SITE_MYPCP = "mypcp";

	public static final String SITE_UHCRETIREE = "uhcretiree";

	public static final String SITE_BLUELAYER_MEMBER = "bluelayer";

	public static final String SITE_ULAYER_MEMBER = "ulayer";

	public static final String ACQUISITION_EXPECTED_DIRECTORY = "/jsonresponse/acquisition";

	public static final String MEMBER_EXPECTED_DIRECTORY = "/jsonresponse/member";

	public static final String DRX_EXPECTED_DIRECTORY = "/jsonresponse/drx";

	public static final String DRUG_CLAIMS_SUMMARY = "drugclaimsummary";

	public static final String DRUG_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/drugclaimsummary/";

	public static final String DRUG_CLAIMS_SUMMARY_PAGE_DATA = "drugclaimsummary.json";

	public static final String DRUG_CLAIMS_DETAILS = "drugclaimdetails";

	public static final String DRUG_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/drugclaimdetails/";

	public static final String DRUG_CLAIMS_DETAILS_PAGE_DATA = "drugclaimdetails.json";

	public static final String MEDICAL_CLAIMS_SUMMARY = "medicalclaimsummary";

	public static final String MEDICAL_CLAIMS_SUMMARY_DIRECTORY = "/jsonresponse/member/ulayer/claims/medicalclaimsummary/";

	public static final String MEDICAL_CLAIMS_SUMMARY_PAGE_DATA = "medicalclaimsummary.json";

	public static final String MEDICAL_CLAIMS_DETAILS = "medicalclaimdetails";

	public static final String MEDICAL_CLAIMS_DETAILS_DIRECTORY = "/jsonresponse/Member/ulayer/claims/medicalclaimdetails/";

	public static final String MEDICAL_CLAIMS_DETAILS_PAGE_DATA = "medicalclaimdetails.json";

	public static final String PLAN_CATEGORY = "planCategory";

	public static final String CLAIM_SUMMARY_INDIVIDUAL_PAGE_DATA = "claimsummaryindividual.json";

	public static final String DRUG_CLAIM_DETAILS_INDIVIDUAL_PAGE_DATA = "drugclaimdetailsindividual.json";

	public static final String DRUG_CLAIM_DETAILS_PAGE_DATA = "drugClaimDetails.json";

	public static final String PLAN_TYPE = "planType";

	public static final String MY_PROFILES = "myprofiles";

	public static final String MY_PROFILES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/myprofiles/";

	public static final String MY_PROFILES_PAGE_DATA = "myprofiles.json";

	public static final String MY_PREFERENCES = "mypreferences";

	public static final String MY_PREFERENCES_DIRECTORY = "/jsonresponse/Member/ulayer/profilesandprefereneces/mypreferences/";

	public static final String MY_PREFERENCES_PAGE_DATA = "mypreferences.json";

	public static final String VIEW_DRUG_COST_ULAYER_DIRECTORY = "/jsonresponse/Member/ulayer/druglookup/viewdrugcost/";

	public static final String VIEW_DRUG_COST_PDP_PAGE_DATA = "viewdrugcostpdp.json";

	public static final String VIEW_DRUG_COST_MAPD_PAGE_DATA = "viewdrugcostmapd.json";

	public static final String VIEW_DRUG_COST_PAGE_DATA = "viewdrugcost.json";

	public static final String MEDICAL_EOB = "medicaleob";

	public static final String MEDICAL_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/medical/";

	public static final String MEDICAL_EOB_PAGE_DATA = "medicaleob.json";

	public static final String PRESCRIPTION_DRUG_EOB_DIRECTORY = "/jsonresponse/Member/ulayer/eob/drug/";

	public static final String DRUG_LOOK_UP = "druglookup";

	public static final String DRUG_LOOK_UP_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglookup/";

	public static final String DRUG_LOOK_UP_PAGE_DATA = "druglookup.json";

	public static final String DRUG_LIST = "druglist";

	public static final String DRUG_LIST_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/druglist/";

	public static final String SELECT_GENERIC_PAGE_DATA = "selectgeneric.json";

	public static final String DRUG_DOSAGE = "drugdosage";

	public static final String DRUG_DOSAGE_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/drugdosage/";

	public static final String DRUG_DOSAGE_PAGE_DATA = "drugdosage.json";

	public static final String ADD_DRUG = "adddrug";

	public static final String ADD_DRUG_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/adddrug/";

	public static final String ADD_DRUG_PAGE_DATA = "adddrug.json";

	public static final String DRUG_SEARCH_PAGE_DATA = "searchdrug.json";

	public static final String LOW_COST_OPTIONS = "lowcostoptions";

	public static final String LOW_COST_OPTIONS_DIRECTORY = "/jsonresponse/member/ulayer/druglookup/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_PAGE_DATA = "lowcostoptions.json";

	public static final Page[] PAGES_REGISTRATION_BLUELAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_BLUELAYER_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_BLUELAYER_DIRECTORY) };

	public static final Page[] PAGES_REGISTRATION_ULAYER = {
			new Page(CommonConstants.PLAN_CONFIRMATION, CommonConstants.PLAN_CONFIRMATION_DIRECTORY),
			new Page(CommonConstants.REGISTRATION_COMMON, CommonConstants.REGISTRATION_COMMON_ULAYER_DIRECTORY) };

	public static final String PRESCRIPTION_DRUG_EOB_PAGE_DATA = "prescriptiondrugeob.json";

	public static final String PRESCRIPTION_DRUG_EOB = "prescriptionDrugEob";

	public static final String TERMINATED_ACCOUNT_PAGE_DATA = "terminatedaccount.json";

	public static final String TERMINATED_ACCOUNT = "terminatedAccount";

	public static final String PAGE_OBJECT_DIRECTORY_BLUELAYER_ACQ = "/page-objects/acquisition/bluelayer/";

	public static final String PAGE_OBJECT_DIRECTORY_DRX = "/page-objects/drx/";

	public static final String PHR_SHIP_PAGE_DATA = "phrship.json";

	public static final String PHR_PAGE_DATA = "phr.json";

	public static final String MANAGE_DRUG = "manageDrug";

	public static final String MANAGE_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/managedrug/";

	public static final String MANAGE_DRUG_BLUE_LAYER_PAGE_DATA = "managedrug.json";

	public static final String MANAGE_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "managedrugindividual.json";

	public static final String ADD_DRUG_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/adddrug/";

	public static final String ADD_DRUG_BLUE_LAYER_PAGE_DATA = "adddrug.json";

	public static final String ADD_DRUG_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "adddrugindividual.json";

	public static final String DRUG_DOSAGE_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/drugdosage/";

	public static final String DRUG_DOSAGE_BLUE_LAYER_PAGE_DATA = "drugdosage.json";

	public static final String DRUG_DOSAGE_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "drugdosageindividual.json";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/lowcostoptions/";

	public static final String LOW_COST_OPTIONS_BLUE_LAYER_PAGE_DATA = "lowcostoptions.json";

	public static final String LOW_COST_OPTIONS_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "lowcostoptionsindividual.json";

	public static final String SELECT_PHARMACY = "selectpharmacy";
	
	public static final String LOCATE_PHARMACIES_PAGE_DATA = "locatepharmacy.json";

	public static final String SELECT_PHARMACY_BLUE_LAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/selectpharmacy/";

	public static final String SELECT_PHARMACY_BLUE_LAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String SELECT_PHARMACY_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "selectpharmacyindividual.json";

	public static final String VIEW_DRUG_COST = "viewdrugCost";

	private static final String VIEW_DRUG_COST_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/estimatedrugcosts/viewdrugcost/";

	public static final String VIEW_DRUG_COST_BLUE_LAYER_PAGE_DATA = "viewdrugcost.json";

	public static final String PLAN_SELECTOR_PAGE_DATA = "planselector.json";

	public static final String VIEW_DRUG_COST_INDIVIDUAL_BLUE_LAYER_PAGE_DATA = "viewdrugcostindividual.json";

	public static final String GROUP = "Group";

	public static final String LEARN_ABOUT_PLAN_PAGE_DATA = "learnaboutmedicare.json";

	public static final String INITIAL_ENROLL_PAGE_DATA = "initialenroll.json";

	public static final String MANAGE_DRUG_ULAYER_PAGE_DATA = "manageDrug.json";

	public static final String ADD_DRUG_ULAYER_PAGE_DATA = "adddrug.json";

	public static final String SELECT_PHARMACY_ULAYER_PAGE_DATA = "selectpharmacy.json";

	public static final String CATEGORY = "category";

	public static final String INDIVIDUAL = "Individual";

	public static final String ADD_PLAN_CONFIRMATION = "addplanconfirmation";

	private static final String ADD_PLAN_CONFIRMATION_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/addplanconfirmation/";

	public static final String ADD_PLAN_CONFIRMATION_PAGE_DATA = "addplanconfirmation.json";

	public static final String ZIPCODE_SELECTION_PAGE_DATA = "zipselection.json";

	public static final String ZIPCODE_SELECTION_HOME_PAGE_DATA = "zipselectionhome.json";

	public static final long TIMEOUT_30 = 30;

	public static final long TIMEOUT_40 = 40;

	public static final String SELECTED_DRUG_INFORMATION_PAGE_DATA = "selectedDrugInformation.json";

	public static final String MANAGE_DRUG_PAGE_DATA = "managedrug.json";

	public static final String DRUG_LIST_PAGE_DATA = "druglist.json";

	public static final String SELECT_PHARMACIES_PAGE_DATA = "selectpharmacy.json";

	public static final String PHARMACY_INFORMATION_PAGE_DATA = "pharmacyInformation.json";

	public static final String GLOBAL_FOOTER_PAGE_DATA = "globalfooteractual.json";

	public static final String OLE_DTMOBJECT_PAGE_DATA = "oledtmObject.json";

	public static final String OLE_DTMOBJECT_PART2_PAGE_DATA = "oledtmObjectPart2.json";

	public static final String SITE_MAP_PAGE_DATA = "sitemap.json";

	public static final String ABOUT_US_PAGE_DATA = "aboutus.json";

	public static final String CONTACT_US_PAGE_DATA = "contactus.json";

	public static final String AGENTS_AND_BROKERS_PAGE_DATA = "agentsandbrokers.json";

	public static final String HOME_PAGE_DISCLAIMER_DATA = "viewalldisclaimer.json";

	public static final String GLOBAL_HEADER_PAGE_DATA = "globalheaderactual.json";

	public static final String ALREADY_PLAN_MEMBER_PAGE_DATA = "alreadyPlanMemberActual.json";

	public static final String HEADER_PAGE_DATA = "headeractual.json";

	public static final String ENROLL_PLAN_INFO_PAGE_DATA = "enrollinplan.json";

	public static final String MA_PLAN_INFORMATION_PAGE_DATA = "maplaninformation.json";

	public static final String PDP_PLAN_INFORMATION_PAGE_DATA = "pdpplaninformation.json";

	public static final String INTRODUCTION_INFORMATION_PAGE_DATA = "introductioninformation.json";

	public static final String BENEFICIARY_INFORMATION_PAGE_DATA = "beneficiaryinformation.json";

	public static final String SEP_INFORMATION_PAGE_DATA = "sepinformation.json";

	public static final String ESRD_PAGE_DATA = "esrd.json";

	public static final String PRESCRIPTION_DRUG_COVERAGE_PAGE_DATA = "prescriptiondrugcoverage.json";

	public static final String LONG_TERM_CARE_PAGE_DATA = "longtermcare.json";

	public static final String MEDICAID_PAGE_DATA = "medicaid.json";

	public static final String OTHER_HEALTH_INSURANCE_PAGE_DATA = "otherhealthinsurance.json";

	public static final String PRIMARY_CARE_PROVIDER_PAGE_DATA = "primarycareprovider.json";

	public static final String PLAN_PAYMENT_OPTION_PAGE_DATA = "planpaymentoption.json";

	public static final String OPTIONAL_RIDERS_PAGE_DATA = "optionalriders.json";

	public static final String PED_PAGE_DATA = "proposedEffectiveDate.json";

	public static final String MA_REVIEW_AND_SUMMIT_PAGE_DATA = "mareviewandsubmit.json";

	public static final String PDP_REVIEW_AND_SUMMIT_PAGE_DATA = "pdpreviewandsubmit.json";

	public static final String MA_ADDITIONAL_INFORMATION_PAGE_DATA = "maadditionalinformation.json";

	public static final String PDP_ADDITIONAL_INFORMATION_PAGE_DATA = "pdpadditionalinformation.json";

	public static final String MA_REVIEW_APPLICATION_PAGE_DATA = "mareviewapplication.json";

	public static final String PDP_REVIEW_APPLICATION_PAGE_DATA = "pdpreviewapplication.json";

	public static final String SUBMIT_APPLICATION_PAGE_DATA = "submitapplication.json";

	public static final String ENROLLMENT_CONFIRMATION_PAGE_DATA = "enrollmentconfirmation.json";

	public static final String LOGIN_ASSISTANCE_MESSAGE_PAGE_DATA = "loginassistancemessage.json";

	public static final String AGENT_CONFIRMATION_PAGE_DATA = "agentappointmentconfirmation.json";

	public static final String MA_VPP_PAGE_DATA = "maVpp.json";

	public static final String ENQUIRY_KIT_CONFIRMATION_PAGE_DATA = "enquirykitconfirm.json";

	public static final String HEALTH_AND_WELLNESS_PAGE_DATA = "healthandwellness.json";

	public static final String HEALTH_AND_WELLNESS = "healthandwellness";

	public static final String MEDICARE_EDUCATION_SECTION_DATA = "medicareEducationSectionActual.json";

	public static final String OUR_PLANS_NAV_PAGE_DATA = "ourPlansDropdownActual.json";

	public static final String HEALTH_AND_WELLNESS_DROPDOWN_DATA = "healthandwellnessdropdownactual.json";

	public static final String OUR_PLANS_DROPDOWN_DATA = "ourplansdropdownactual.json";

	public static final String PLAN_COMPARE_PAGE_DATA = "plancompare.json";

	public static final String PLAN_COMPARE_DETAILS = "plancomparedetails.json";

	public static final String PLAN_COMPARE = "plancompare";

	private static final String PLAN_COMPARE_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/plancompare/";

	public static final String PROVIDER_SEARCH_PAGE_DATA = "providersearch.json";

	public static final String SELECT_FORMULARY_PAGE_DATA = "selectformulary.json";

	public static final String ENTER_DRUG_PAGE_DATA = "enterdrug.json";

	public static final String RETIREE_EXPECTED_DIRECTORY = "/jsonresponse/uhcretiree/acquisition/";

	public static final String AUTO_DRUG_SEARCH_PAGE_DATA = "autocompletedrugsearch.json";

	private static final String ADD_PLAN_CONFIRMATION_ULAYER_DIRECTORY = "/jsonresponse/member/ulayer/registration/addplanconfirmation/";

	private static final String REGISTRATION_SUCCESS_BLUELAYER_DIRECTORY = "/jsonresponse/member/bluelayer/registration/registrationsuccess/";

	public static final String SECOND_PLAN_INFO_BLUELAYER_PAGE_DATA = "secondplaninfo.json";

	public static final String AARP_BROWSER_CHECK_DATA = "aarpbrowsercheck.json";

	public static final String UHC_BROWSER_CHECK_DATA = "uhcbrowsercheck.json";

	public static final String UHCM_BROWSER_CHECK_DATA = "uhcmbrowsercheck.json";

	public static final String AARPM_BROWSER_CHECK_DATA = "aarpmbrowsercheck.json";

	public static final String AARPM_SECURE_EMAIL_DATA = "aarpmsecureemailwidget.json";

	public static final String GR_BROWSER_CHECK_DATA = "uhcretireebrowsercheck.json";

	public static final String UHCM_MOBILE_BROWSER_CHECK_DATA = "browsercheck_uhcm.json";

	public static final String COBROWSE_MODEL_WINDOW = "cobrowse.json";

	public static final String Request_For_Assistance_PAGE_DATA = "requestforassistance.json";

	public static final String CONFIRMATION_PAGE_DATA = "confirmation.json";
	public static final String ULAYER_DRUGDOSAGEPAGE_EXPECTED_DIRECTORY = "drugdosage";
	public static final String ULAYER_ADDADRUG_DROPDOWN_DIRECTORY = "dropdown";
	public static final String ULAYER_LOWCOSTOPTIONS_EXPECTED_DIRECTORY = "lowcostoptions";
	public static final String ADD_DRUG_ULAYER_DRUG_TYPE = "drugtype";
	public static final String ADD_DRUG_ULAYER_PHARMACIES = "pharmacies";

	public static final String PLAN_DOC_PDF_ACQ_PAGE_DATA = "plandocumentspdf.json";

	public static final String B_AND_C_PDF_MEMBER_PAGE_DATA = "benefitsandcoveragepdfs.json";

	public static final String PLAN_PREV_PDF_PAGE_DATA = "planpreviewpdf.json";

	public static final String AARPM_FR_PDF_PAGE_DATA = "nextyearpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS = "planmaterialpdfs.json";
	public static final String FORMS_AND_RESOURCES_PLANMATERIAL_SECTION_PDFS_AARP = "plandocpdfs.json";
	public static final String REGISTRATION_ERROR_PAGE_DATA = "registrationerrorpage.json";

	public static final String LOGIN_ASSISTANCE_PERSONAL_IDENTIFICATION_ERROR_SCENARIO = "personalIdentificationErrorScenario.json";

	public static final String NEXT_YEAR = "nextyear";
	
	public static final String YEAR_BUTTON_VPPPAGE = "yearBtnVppPageExists";

	public static final String BENEFITS_AND_COVERAGE_MAPD_LIS_NONUS_PAGE_DATA = "planbenefitsandcoveragelisnotusother.json";

	public static final String SIERRA_PLAN_NAME = "UnitedHealthcare MedicareComplete Choice (PPO)";

	public static final String NEW_PAYMENT_HISTORY_ACTUAL_JSON = "newPaymentHistoryActualJSON";
	public static final String NEW_PAYMENT_HISTORY_EXPECTED_JSON = "newPaymentHistoryexpectedJSON";

	public static final String PROFILE_AND_PREFERENCES_REDESIGN_PAGE_DATA = "profilenpreferencesredesign.json";
	
	 public static final String REVIEW_AUTOMATIC_PAGE_DATA = "reviewautomaticactual.json";
	 
	 public static final String REVIEW_ONE_TIME_PAGE_DATA = "reviewonetimeactual.json";
	 
	 public static final String SAVE_DRUG_PAGE_DATA="savedrugpagedata.json";
	 
	 public static final String DCEstimator = "DCEstimator.json";
	 
	 public static final String ADD_DRUG_DETAILS_PAGE_DATA = "adddrugdetailspagedata.json";
	 
	 public static final String PAGE_OBJECT_DIRECTORY_DCE_MEMBER = "/page-objects/member/dashboard/drugcostestimator/";
	 
	 public static final String ADD_NEW_DRUG_PAGE_DATA = "addnewdrugpagedata.json";
	 
	 public static final String SWITCH_GENERIC_PAGE_DATA = "switchgenericpagedata.json";
	 
	 public static final String NEW_CLAIM_DETAILS_PAGE_DATA = "newClaimDetailsPage.json";
	 
	 public static final String SWITCH_GENERIC="switchgeneric.json";
	 
	 public static final String ADD_NEW_DRUG_MODAL = "addnewdrugmodal";
	 
	 public static final String PROFILE_AND_PREFERNCES_PAGE_DIRECTORY = "/jsonresponse/member/ulayer/profilesandprefereneces/";

	public static final String FORMS_AND_RESOURCES_ACTUAL = null;

	public static final String BENEFITS_AND_COVERAGE = "benefitsandcoverage" ;
	
	public static final String DRUGCOSTESTIMATORDATAPAGE = "DrugCostEstimatorPage.json";
	
	public static final String PLAN_NAME_ON_PROFILE_PAGE= "planName";
    //Browsers supported in MRScenario
	public static final String BROWSER_NAME = "browsername";
	public static final String BROWSER_VERSION = "browserversion";
    public static final String JENKINS_BROWSER_PHANTOMJS = "headless";
    public static final String DESKTOP_WEBDRIVER = "WebDriver";
	public static final String JENKINS_BROWSER = "webdriverhost";
    public static final String HTMLUNIT_BROWSER = "HTMLUNIT";
    public static final String FIREFOX_BROWSER = "FIREFOX";
    public static final String CHROME_BROWSER = "CHROME";
    public static final String IE_BROWSER = "IE";
    public static final String MOBILE_BROWSER = "MOBILE";   
    public static final String SAUCE_BROWSER_WEB = "saucelabs";
    public static final String SAUCE_BROWSER_MOBILE = "SAUCE_BROWSER_MOBILE";

    public static final String DESKTOP_BROWSER_AGENT_STRING = "BrowserAgentString";
    public static final String JENKINS_BROWSER_AGENT_STRING = "JENKINS_BROWSER_AGENT_STRING";
	public static final String ACCOUNT_USER_NAME = null;

	public static final String IS_TESTHARNESS = "IS_TESTHARNESS";

	public static final String COMMONSTEPDEFINITIONMEMVBF = "commonStepDefinition";
	public static final String IS_HSID_COMPATIBLE	 = "isHSIDCompatible";
	public static final String CATEGORY_TERMIATED	 = "TerminatedFed";
	public static final long TIMEOUT_60 = 60;
	public static final long TIMEOUT_90 = 90;
	public static final String SAUCELABS_TUNNEL_IDENTIFIER = "saucelabstunnel";
	//public static final String SAUCELABS_DEFAULT_TUNNEL = "OptumSharedTunnel-Stg";
	public static final String SAUCELABS_DEFAULT_TUNNEL = "Optum-Prd"; //Optum-Prd
	private static ThreadLocal<String> MAIN_WINDOW_HANDLE_ACQUISITION = new ThreadLocal<>();

	public synchronized static String getMainWindowHandle() {
		return MAIN_WINDOW_HANDLE_ACQUISITION.get();
	}

	public static void setMainWindowHandle(String parentWindow) {
		MAIN_WINDOW_HANDLE_ACQUISITION.set(parentWindow);
	}
	public static final String CONNECTION_URL_UAT19 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0103:1521/gpsts19";
	public static final String CONNECTION_URL_UAT18 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	public static final String CONNECTION_URL_UAT20 = "jdbc:oracle:thin:qaread/testreadonly@dbslt0104:1521/gpsts20";
	public static final String CONNECTION_URL_STAGE = "jdbc:oracle:thin:qaread/testreadonly@es08-scan01:1521/gpsst04_1svc_trn.uhc.com";
	
	
	public static final String SAUCELABS_DEFAULT_MOBILE_TUNNEL = "";// or Optum-Prd;
	public static final String SAUCELABS_MOBILE_TUNNEL_IDENTIFIER = "SAUCELABS_MOBILE_TUNNEL_IDENTIFIER"; // Parameter name from Jenkins run
	
	public static final String APPIUM_DEFAULT_VERSION = "1.17.0";
	//1.17.0
	public static final String APPIUM_VERSION = "APPIUM_VERSION";
	public static final String MOBILE_DEVICE_TYPE = "MOBILE_DEVICE_TYPE";
	public static final String MOBILE_DEVICE_TYPE_DEFAULT = "Real";
	public static final String MOBILE_DEVICE_TYPE_VIRTUAL = "Virtual";
	
	public static final String SCREEN_RESOLUTION = "screenResolution";
	/*public static final String CONNECTION_URL = "jdbc:sqlserver://120.130.10.2:1433;" +
			  "database=GPSST04SVC_TRN;" + "user=qaread;" + "password=testreadonly;" +
			  "encrypt=true;" + "trustServerCertificate=false;" + "loginTimeout=30;";
	*/
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@localhost:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521:GPSST04SVC_TRN";
	//public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@orass0464:1521/gpsst04svc_trn.uhc.com";
	
	public static final String CONNECTION_URL = "jdbc:oracle:thin:qaread/testreadonly@dbslt0102:1521/gpsts18";
	
	//GPS Query cannot be final variable, since a stage id is to be appended at runtime
	public static String GPS_QUERY = "Select MEDICAID_IND,\n" + 
			"MEDICAID_NUMBER,\n" + 
			"MAILING_ZIP_CD,\n" + 
			"MAILING_STATE_CD,\n" + 
			"MAILING_CITY,\n" + 
			"MAILING_ADDRESS_LINE_2,\n" + 
			"MAILING_ADDRESS_LINE_1,\n" + 
			"FIRST_NAME,\n" + 
			"MIDDLE_INITIAL,\n" + 
			"LAST_NAME,\n" + 
			"DATE_OF_BIRTH,\n" + 
			"GENDER,\n" + 
			"ADDRESS_LINE_1,\n" + 
			"ADDRESS_LINE_2,\n" + 
			"CITY,\n" + 
			"STATE_CD,\n" + 
			"ZIP_CD,\n" + 
			"DAYTIME_PHONE_NUM,\n" + 
			"EVENING_PHONE_NUM,\n" + 
			"PAPERLESS_PREFERENCE_IND,\n" + 
			"EMAIL,\n" + 
			"LANGUAGE_PREFERENCE,\n" + 
			"MEDICARE_NUMBER,\n" + 
			"MEDICARE_PART_A_EFFECTIVE_DATE,\n" + 
			"MEDICARE_PART_B_EFFECTIVE_DATE,\n" + 
			"DO_YOU_HAVE_OTHER_HEALTH_INS,\n" + 
			"OTHER_HEALTH_INSURANCE_NAME,\n" + 
			"OTHER_HEALTH_INSURANCE_GRP_NUM,\n" + 
			"OTHER_HEALTH_INSURANCE_ID,\n" + 
			"SECONDARY_RX_COVERAGE_NAME,\n" + 
			"OTHER_RX_COVERAGE_NAME,\n" + 
			"SECONDARY_RX_GROUP,\n" + 
			"SECONDARY_RX_ID,\n" + 
			"NOTE,\n" + 
			"REQUESTED_EFFECTIVE_DATE,\n" + 
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"XEROX_STAGE_ID,\n" +
			"PRIMARY_CARE_PHYSICIAN,\n" + 
			"DENTAL_PLATINUM,\n" +
			"PRIMARY_CARE_PHYSICIAN_NUMBER,\n" + 
			"CURRENTLY_A_PATIENT_OF_THE_PCP,\n" + 
			"PAYMENT_METHOD,\n" + 
			"DENTAL_PLATINUM,\n" + 
			"AUTHORIZED_REPRESENTATIVE_IND,\n" + 
			"AUTHORIZED_REP_FIRST_NAME,\n" + 
			"AUTHORIZED_REP_LAST_NAME,\n" + 
			"AUTHORIZED_REP_RELATIONSHIP,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_1,\n" + 
			"AUTHORIZED_REP_MAILING_ADDR_2,\n" + 
			"AUTHORIZED_REP_MAILING_CITY,\n" + 
			"AUTHORIZED_REP_MAILING_STATE,\n" + 
			"AUTHORIZED_REP_MAILING_ZIP_CD,\n" + 
			"AUTHORIZED_REP_DAYTIME_PHONE,\n" + 
			"SIGNATURE_PRESENCE,\n" + 
			"CREDIT_CARD_NUMBER,\n" +
			"CREDIT_CARD_NAME_ON_CARD,\n" +
			"CREDIT_CARD_EXPIRATION_DATE,\n" +
			"XEROX_STAGE_ID\n" + 
			"from Xerox_stage where xerox_stage_id = ";
	
	public static final String GPS_QUERY_1 ="Select\n" + 
			"FIRST_NAME,\n" + 
			"LAST_NAME from Xerox_stage where xerox_stage_id = ";

	public static final String DB_ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
	
	public static final String CAMPAIGN_EXTERNAL_LINK_TFNNO = "campaignExternalLinkTfnNo";

//	public static String SELECTED_STATE = null;
	
	private static ThreadLocal<String> SELECTED_STATE = new ThreadLocal<>();

	public synchronized static String getSelectedState() {
		return SELECTED_STATE.get();
	}

	public static void setSelectedState(String State) {
		SELECTED_STATE.set(State);
	}
	
	public static String PAY_BY_MAIL_TEXT = "If you want to pay by mail, we'll send a bill to your mailing address each month or you will receive an email notification if you signed up for e-delivery.";
	
	public static String CREDIT_CARD_TEXT = "Credit Card Information";
	
	public static String SOCIAL_SECURITY_TEXT = "We will bill you directly until the Social Security Administration or Railroad Retirement Board approves the deduction. It could take up to 90 days after the approval for the first deduction to occur, so please continue to make payments. If the Social Security Administration or Railroad Retirement Board does not approve your request for automatic deduction, we will notify you and continue to send a paper bill for your monthly premiums.";
	
	public static String ACCEPTED_CARDS_TEXT = "Accepted Cards are Mastercard, VISA, and Discover";

	public static String SESSION_TIMEOUT_TEXT = "Please submit the below details within 15 minutes to avoid session timeout period";
	
	public static String CARD_STORED_SUCCESSFULLY_TEXT = "Thank You!. Your Card details has been stored successfully.";
	
	public static String NO_MONTHLY_PREMIUM_TEXT = "The plan you have chosen does not have a monthly premium.";
	
	public static String LAST_ENROLLMENT_PENALITY_TEXT = "If you need to pay a late enrollment penality (LEP) you will receive a bill in the email.";
	
	public static String PART_D_INCOME_TEXT = "If you must pay a Part D-Income Related Monthly Adjustment Amount (Part D-IRMAA) Social Security (SS) will send you a letter and ask you how you want to pay it:";
	
	public static String SS_TEXT  = "You can pay it from your SS check";
	
	public static String MEDICARE_TEXT  = "Medicare can bill you";
	
	public static String RAILROAD_TEXT   = "The Railroad Retirement Board (RRB) can bill you";
	//
	public static String PARTDIRMAA_TEXT    = "Please DO NOT pay the plan the Part D-IRMAA at this time.";
	
	public static final String STATE_SELECTED = "state";
	
	public static final String LEARNABOUTMEDICARE_LINK = "linkName";
	
	public static final String PSC_CODE="pscCode";

	public static final String FED_TFN="fedTfn";

	public static final String MEDSUP_TFN="medsupTfn";
	
	public static final String FOOTER_LINK = "linkName";
	
	public static LinkedHashMap<String,String> PRE_FLOW = new LinkedHashMap<String,String>();
	
	public Static String firstRecomPlanName = "";
	public Static String planType = "";
}



----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.ArrayIndexOutOfBoundsException
